
adc_single_dma_demo_stm32l4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004738  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080048c0  080048c0  000148c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004908  08004908  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004908  08004908  00014908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004910  08004910  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004914  08004914  00014914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000000c  08004924  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08004924  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ec4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f13  00000000  00000000  00030f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00032e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00033b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002707e  00000000  00000000  00034790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e983  00000000  00000000  0005b80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8f1e  00000000  00000000  0006a191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001630af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036dc  00000000  00000000  00163104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080048a8 	.word	0x080048a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080048a8 	.word	0x080048a8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fb3a 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f812 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f926 	bl	800071c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 f8d6 	bl	8000680 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80004d4:	f000 f904 	bl	80006e0 <MX_DMA_Init>
  MX_ADC1_Init();
 80004d8:	f000 f85c 	bl	8000594 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 80004dc:	2264      	movs	r2, #100	; 0x64
 80004de:	4902      	ldr	r1, [pc, #8]	; (80004e8 <main+0x28>)
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <main+0x2c>)
 80004e2:	f000 fed3 	bl	800128c <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <main+0x26>
 80004e8:	200000d4 	.word	0x200000d4
 80004ec:	20000028 	.word	0x20000028

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b096      	sub	sp, #88	; 0x58
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	2244      	movs	r2, #68	; 0x44
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f004 f9ca 	bl	8004898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	463b      	mov	r3, r7
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000512:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000516:	f002 fa15 	bl	8002944 <HAL_PWREx_ControlVoltageScaling>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000520:	f000 f97e 	bl	8000820 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000524:	2302      	movs	r3, #2
 8000526:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800052c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052e:	2310      	movs	r3, #16
 8000530:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000532:	2302      	movs	r3, #2
 8000534:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000536:	2302      	movs	r3, #2
 8000538:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800053a:	2301      	movs	r3, #1
 800053c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800053e:	230a      	movs	r3, #10
 8000540:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000542:	2307      	movs	r3, #7
 8000544:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000546:	2302      	movs	r3, #2
 8000548:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800054a:	2302      	movs	r3, #2
 800054c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	4618      	mov	r0, r3
 8000554:	f002 fa4c 	bl	80029f0 <HAL_RCC_OscConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800055e:	f000 f95f 	bl	8000820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000562:	230f      	movs	r3, #15
 8000564:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000566:	2303      	movs	r3, #3
 8000568:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000576:	463b      	mov	r3, r7
 8000578:	2104      	movs	r1, #4
 800057a:	4618      	mov	r0, r3
 800057c:	f002 fe1e 	bl	80031bc <HAL_RCC_ClockConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000586:	f000 f94b 	bl	8000820 <Error_Handler>
  }
}
 800058a:	bf00      	nop
 800058c:	3758      	adds	r7, #88	; 0x58
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
 80005b4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80005b6:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005b8:	4a2f      	ldr	r2, [pc, #188]	; (8000678 <MX_ADC1_Init+0xe4>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c8:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ce:	4b29      	ldr	r3, [pc, #164]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005e6:	4b23      	ldr	r3, [pc, #140]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000602:	2201      	movs	r2, #1
 8000604:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_ADC1_Init+0xe0>)
 800060a:	2200      	movs	r2, #0
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000616:	4817      	ldr	r0, [pc, #92]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000618:	f000 fce2 	bl	8000fe0 <HAL_ADC_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000622:	f000 f8fd 	bl	8000820 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4810      	ldr	r0, [pc, #64]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000632:	f001 fbfd 	bl	8001e30 <HAL_ADCEx_MultiModeConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800063c:	f000 f8f0 	bl	8000820 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_ADC1_Init+0xe8>)
 8000642:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000644:	2306      	movs	r3, #6
 8000646:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800064c:	237f      	movs	r3, #127	; 0x7f
 800064e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000650:	2304      	movs	r3, #4
 8000652:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_ADC1_Init+0xe0>)
 800065e:	f000 fedb 	bl	8001418 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000668:	f000 f8da 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3728      	adds	r7, #40	; 0x28
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000028 	.word	0x20000028
 8000678:	50040000 	.word	0x50040000
 800067c:	14f00020 	.word	0x14f00020

08000680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 8000686:	4a15      	ldr	r2, [pc, #84]	; (80006dc <MX_USART2_UART_Init+0x5c>)
 8000688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART2_UART_Init+0x58>)
 80006c4:	f003 fc3c 	bl	8003f40 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ce:	f000 f8a7 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2000019c 	.word	0x2000019c
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_DMA_Init+0x38>)
 80006e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <MX_DMA_Init+0x38>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6493      	str	r3, [r2, #72]	; 0x48
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_DMA_Init+0x38>)
 80006f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	200b      	movs	r0, #11
 8000704:	f001 fd1f 	bl	8002146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000708:	200b      	movs	r0, #11
 800070a:	f001 fd38 	bl	800217e <HAL_NVIC_EnableIRQ>

}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a2a      	ldr	r2, [pc, #168]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <MX_GPIO_Init+0xc4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a24      	ldr	r2, [pc, #144]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a1e      	ldr	r2, [pc, #120]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_GPIO_Init+0xc4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_GPIO_Init+0xc4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2120      	movs	r1, #32
 8000796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079a:	f002 f8ad 	bl	80028f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <MX_GPIO_Init+0xc8>)
 80007b6:	f001 fef5 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ba:	2320      	movs	r3, #32
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d4:	f001 fee6 	bl	80025a4 <HAL_GPIO_Init>

}
 80007d8:	bf00      	nop
 80007da:	3728      	adds	r7, #40	; 0x28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000
 80007e4:	48000800 	.word	0x48000800

080007e8 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2120      	movs	r1, #32
 80007f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f8:	f002 f87e 	bl	80028f8 <HAL_GPIO_WritePin>
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2120      	movs	r1, #32
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f002 f870 	bl	80028f8 <HAL_GPIO_WritePin>
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000828:	e7fe      	b.n	8000828 <Error_Handler+0x8>
	...

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <HAL_MspInit+0x44>)
 8000834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000836:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <HAL_MspInit+0x44>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6613      	str	r3, [r2, #96]	; 0x60
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <HAL_MspInit+0x44>)
 8000840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_MspInit+0x44>)
 800084c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084e:	4a08      	ldr	r2, [pc, #32]	; (8000870 <HAL_MspInit+0x44>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000854:	6593      	str	r3, [r2, #88]	; 0x58
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_MspInit+0x44>)
 8000858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b0ac      	sub	sp, #176	; 0xb0
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2288      	movs	r2, #136	; 0x88
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f003 ffff 	bl	8004898 <memset>
  if(hadc->Instance==ADC1)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a3d      	ldr	r2, [pc, #244]	; (8000994 <HAL_ADC_MspInit+0x120>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d172      	bne.n	800098a <HAL_ADC_MspInit+0x116>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008a8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80008ba:	2308      	movs	r3, #8
 80008bc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008be:	2307      	movs	r3, #7
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4618      	mov	r0, r3
 80008d6:	f002 fe77 	bl	80035c8 <HAL_RCCEx_PeriphCLKConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80008e0:	f7ff ff9e 	bl	8000820 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008e4:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <HAL_ADC_MspInit+0x124>)
 80008e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e8:	4a2b      	ldr	r2, [pc, #172]	; (8000998 <HAL_ADC_MspInit+0x124>)
 80008ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f0:	4b29      	ldr	r3, [pc, #164]	; (8000998 <HAL_ADC_MspInit+0x124>)
 80008f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b26      	ldr	r3, [pc, #152]	; (8000998 <HAL_ADC_MspInit+0x124>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000900:	4a25      	ldr	r2, [pc, #148]	; (8000998 <HAL_ADC_MspInit+0x124>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <HAL_ADC_MspInit+0x124>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000914:	2301      	movs	r3, #1
 8000916:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800091a:	230b      	movs	r3, #11
 800091c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800092a:	4619      	mov	r1, r3
 800092c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000930:	f001 fe38 	bl	80025a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <HAL_ADC_MspInit+0x128>)
 8000936:	4a1a      	ldr	r2, [pc, #104]	; (80009a0 <HAL_ADC_MspInit+0x12c>)
 8000938:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <HAL_ADC_MspInit+0x128>)
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_ADC_MspInit+0x128>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <HAL_ADC_MspInit+0x128>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <HAL_ADC_MspInit+0x128>)
 800094e:	2280      	movs	r2, #128	; 0x80
 8000950:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_ADC_MspInit+0x128>)
 8000954:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000958:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_ADC_MspInit+0x128>)
 800095c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000960:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <HAL_ADC_MspInit+0x128>)
 8000964:	2220      	movs	r2, #32
 8000966:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_ADC_MspInit+0x128>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800096e:	480b      	ldr	r0, [pc, #44]	; (800099c <HAL_ADC_MspInit+0x128>)
 8000970:	f001 fc20 	bl	80021b4 <HAL_DMA_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 800097a:	f7ff ff51 	bl	8000820 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a06      	ldr	r2, [pc, #24]	; (800099c <HAL_ADC_MspInit+0x128>)
 8000982:	64da      	str	r2, [r3, #76]	; 0x4c
 8000984:	4a05      	ldr	r2, [pc, #20]	; (800099c <HAL_ADC_MspInit+0x128>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800098a:	bf00      	nop
 800098c:	37b0      	adds	r7, #176	; 0xb0
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	50040000 	.word	0x50040000
 8000998:	40021000 	.word	0x40021000
 800099c:	2000008c 	.word	0x2000008c
 80009a0:	40020008 	.word	0x40020008

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b0ac      	sub	sp, #176	; 0xb0
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2288      	movs	r2, #136	; 0x88
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f003 ff67 	bl	8004898 <memset>
  if(huart->Instance==USART2)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a21      	ldr	r2, [pc, #132]	; (8000a54 <HAL_UART_MspInit+0xb0>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d13b      	bne.n	8000a4c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009d8:	2300      	movs	r3, #0
 80009da:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 fdf1 	bl	80035c8 <HAL_RCCEx_PeriphCLKConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009ec:	f7ff ff18 	bl	8000820 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <HAL_UART_MspInit+0xb4>)
 80009f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f4:	4a18      	ldr	r2, [pc, #96]	; (8000a58 <HAL_UART_MspInit+0xb4>)
 80009f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fa:	6593      	str	r3, [r2, #88]	; 0x58
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <HAL_UART_MspInit+0xb4>)
 80009fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <HAL_UART_MspInit+0xb4>)
 8000a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0c:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <HAL_UART_MspInit+0xb4>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a14:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_UART_MspInit+0xb4>)
 8000a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a20:	230c      	movs	r3, #12
 8000a22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a42:	4619      	mov	r1, r3
 8000a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a48:	f001 fdac 	bl	80025a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a4c:	bf00      	nop
 8000a4e:	37b0      	adds	r7, #176	; 0xb0
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40004400 	.word	0x40004400
 8000a58:	40021000 	.word	0x40021000

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <MemManage_Handler+0x4>

08000a6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa8:	f000 f8a4 	bl	8000bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <DMA1_Channel1_IRQHandler+0x10>)
 8000ab6:	f001 fc95 	bl	80023e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000008c 	.word	0x2000008c

08000ac4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <SystemInit+0x20>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <SystemInit+0x20>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aec:	f7ff ffea 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000af2:	490d      	ldr	r1, [pc, #52]	; (8000b28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <LoopForever+0xe>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b08:	4c0a      	ldr	r4, [pc, #40]	; (8000b34 <LoopForever+0x16>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b16:	f003 fe9b 	bl	8004850 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b1a:	f7ff fcd1 	bl	80004c0 <main>

08000b1e <LoopForever>:

LoopForever:
    b LoopForever
 8000b1e:	e7fe      	b.n	8000b1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b2c:	08004918 	.word	0x08004918
  ldr r2, =_sbss
 8000b30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b34:	20000224 	.word	0x20000224

08000b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_2_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_Init+0x3c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_Init+0x3c>)
 8000b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b50:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b52:	2003      	movs	r0, #3
 8000b54:	f001 faec 	bl	8002130 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f000 f80f 	bl	8000b7c <HAL_InitTick>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d002      	beq.n	8000b6a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	71fb      	strb	r3, [r7, #7]
 8000b68:	e001      	b.n	8000b6e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b6a:	f7ff fe5f 	bl	800082c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40022000 	.word	0x40022000

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <HAL_InitTick+0x6c>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d023      	beq.n	8000bd8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_InitTick+0x70>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <HAL_InitTick+0x6c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 faf7 	bl	800219a <HAL_SYSTICK_Config>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d10f      	bne.n	8000bd2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d809      	bhi.n	8000bcc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc0:	f001 fac1 	bl	8002146 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_InitTick+0x74>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
 8000bca:	e007      	b.n	8000bdc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
 8000bd0:	e004      	b.n	8000bdc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	73fb      	strb	r3, [r7, #15]
 8000bd6:	e001      	b.n	8000bdc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000004 	.word	0x20000004

08000bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x20>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x24>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_IncTick+0x24>)
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008
 8000c18:	20000220 	.word	0x20000220

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <HAL_GetTick+0x14>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000220 	.word	0x20000220

08000c34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	609a      	str	r2, [r3, #8]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b087      	sub	sp, #28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3360      	adds	r3, #96	; 0x60
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <LL_ADC_SetOffset+0x44>)
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000cd4:	bf00      	nop
 8000cd6:	371c      	adds	r7, #28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	03fff000 	.word	0x03fff000

08000ce4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3360      	adds	r3, #96	; 0x60
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3360      	adds	r3, #96	; 0x60
 8000d20:	461a      	mov	r2, r3
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	431a      	orrs	r2, r3
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d3a:	bf00      	nop
 8000d3c:	371c      	adds	r7, #28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e000      	b.n	8000d60 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	3330      	adds	r3, #48	; 0x30
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	f003 030c 	and.w	r3, r3, #12
 8000d88:	4413      	add	r3, r2
 8000d8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	f003 031f 	and.w	r3, r3, #31
 8000d96:	211f      	movs	r1, #31
 8000d98:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	401a      	ands	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	0e9b      	lsrs	r3, r3, #26
 8000da4:	f003 011f 	and.w	r1, r3, #31
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	f003 031f 	and.w	r3, r3, #31
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	431a      	orrs	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000db8:	bf00      	nop
 8000dba:	371c      	adds	r7, #28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	3314      	adds	r3, #20
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	0e5b      	lsrs	r3, r3, #25
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	4413      	add	r3, r2
 8000de2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	0d1b      	lsrs	r3, r3, #20
 8000dec:	f003 031f 	and.w	r3, r3, #31
 8000df0:	2107      	movs	r1, #7
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	401a      	ands	r2, r3
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	0d1b      	lsrs	r3, r3, #20
 8000dfe:	f003 031f 	and.w	r3, r3, #31
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	fa01 f303 	lsl.w	r3, r1, r3
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e0e:	bf00      	nop
 8000e10:	371c      	adds	r7, #28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e34:	43db      	mvns	r3, r3
 8000e36:	401a      	ands	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0318 	and.w	r3, r3, #24
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e40:	40d9      	lsrs	r1, r3
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	400b      	ands	r3, r1
 8000e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e52:	bf00      	nop
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	0007ffff 	.word	0x0007ffff

08000e64 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	f003 031f 	and.w	r3, r3, #31
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000e90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6093      	str	r3, [r2, #8]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000eb8:	d101      	bne.n	8000ebe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000edc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ee0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f08:	d101      	bne.n	8000f0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f30:	f043 0201 	orr.w	r2, r3, #1
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d101      	bne.n	8000f5c <LL_ADC_IsEnabled+0x18>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <LL_ADC_IsEnabled+0x1a>
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f7e:	f043 0204 	orr.w	r2, r3, #4
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	d101      	bne.n	8000faa <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 0308 	and.w	r3, r3, #8
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d101      	bne.n	8000fd0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e000      	b.n	8000fd2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e136      	b.n	8001268 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001004:	2b00      	cmp	r3, #0
 8001006:	d109      	bne.n	800101c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff fc33 	bl	8000874 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff3f 	bl	8000ea4 <LL_ADC_IsDeepPowerDownEnabled>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d004      	beq.n	8001036 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff25 	bl	8000e80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff5a 	bl	8000ef4 <LL_ADC_IsInternalRegulatorEnabled>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d115      	bne.n	8001072 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff3e 	bl	8000ecc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001050:	4b87      	ldr	r3, [pc, #540]	; (8001270 <HAL_ADC_Init+0x290>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	099b      	lsrs	r3, r3, #6
 8001056:	4a87      	ldr	r2, [pc, #540]	; (8001274 <HAL_ADC_Init+0x294>)
 8001058:	fba2 2303 	umull	r2, r3, r2, r3
 800105c:	099b      	lsrs	r3, r3, #6
 800105e:	3301      	adds	r3, #1
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001064:	e002      	b.n	800106c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	3b01      	subs	r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f9      	bne.n	8001066 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff3c 	bl	8000ef4 <LL_ADC_IsInternalRegulatorEnabled>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10d      	bne.n	800109e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001086:	f043 0210 	orr.w	r2, r3, #16
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	f043 0201 	orr.w	r2, r3, #1
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff75 	bl	8000f92 <LL_ADC_REG_IsConversionOngoing>
 80010a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f040 80cf 	bne.w	8001256 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f040 80cb 	bne.w	8001256 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010c8:	f043 0202 	orr.w	r2, r3, #2
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff35 	bl	8000f44 <LL_ADC_IsEnabled>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d115      	bne.n	800110c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80010e0:	4865      	ldr	r0, [pc, #404]	; (8001278 <HAL_ADC_Init+0x298>)
 80010e2:	f7ff ff2f 	bl	8000f44 <LL_ADC_IsEnabled>
 80010e6:	4604      	mov	r4, r0
 80010e8:	4864      	ldr	r0, [pc, #400]	; (800127c <HAL_ADC_Init+0x29c>)
 80010ea:	f7ff ff2b 	bl	8000f44 <LL_ADC_IsEnabled>
 80010ee:	4603      	mov	r3, r0
 80010f0:	431c      	orrs	r4, r3
 80010f2:	4863      	ldr	r0, [pc, #396]	; (8001280 <HAL_ADC_Init+0x2a0>)
 80010f4:	f7ff ff26 	bl	8000f44 <LL_ADC_IsEnabled>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4323      	orrs	r3, r4
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d105      	bne.n	800110c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4619      	mov	r1, r3
 8001106:	485f      	ldr	r0, [pc, #380]	; (8001284 <HAL_ADC_Init+0x2a4>)
 8001108:	f7ff fd94 	bl	8000c34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7e5b      	ldrb	r3, [r3, #25]
 8001110:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001116:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800111c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001122:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3020 	ldrb.w	r3, [r3, #32]
 800112a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d106      	bne.n	8001148 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113e:	3b01      	subs	r3, #1
 8001140:	045b      	lsls	r3, r3, #17
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114c:	2b00      	cmp	r3, #0
 800114e:	d009      	beq.n	8001164 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	4b47      	ldr	r3, [pc, #284]	; (8001288 <HAL_ADC_Init+0x2a8>)
 800116c:	4013      	ands	r3, r2
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	6812      	ldr	r2, [r2, #0]
 8001172:	69b9      	ldr	r1, [r7, #24]
 8001174:	430b      	orrs	r3, r1
 8001176:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff08 	bl	8000f92 <LL_ADC_REG_IsConversionOngoing>
 8001182:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff15 	bl	8000fb8 <LL_ADC_INJ_IsConversionOngoing>
 800118e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d13d      	bne.n	8001212 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d13a      	bne.n	8001212 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011a0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011a8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011b8:	f023 0302 	bic.w	r3, r3, #2
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	69b9      	ldr	r1, [r7, #24]
 80011c2:	430b      	orrs	r3, r1
 80011c4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d118      	bne.n	8001202 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80011da:	f023 0304 	bic.w	r3, r3, #4
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011e6:	4311      	orrs	r1, r2
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80011ec:	4311      	orrs	r1, r2
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80011f2:	430a      	orrs	r2, r1
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0201 	orr.w	r2, r2, #1
 80011fe:	611a      	str	r2, [r3, #16]
 8001200:	e007      	b.n	8001212 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	691a      	ldr	r2, [r3, #16]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0201 	bic.w	r2, r2, #1
 8001210:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d10c      	bne.n	8001234 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	f023 010f 	bic.w	r1, r3, #15
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	1e5a      	subs	r2, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	430a      	orrs	r2, r1
 8001230:	631a      	str	r2, [r3, #48]	; 0x30
 8001232:	e007      	b.n	8001244 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 020f 	bic.w	r2, r2, #15
 8001242:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001248:	f023 0303 	bic.w	r3, r3, #3
 800124c:	f043 0201 	orr.w	r2, r3, #1
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	655a      	str	r2, [r3, #84]	; 0x54
 8001254:	e007      	b.n	8001266 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125a:	f043 0210 	orr.w	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001266:	7ffb      	ldrb	r3, [r7, #31]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3724      	adds	r7, #36	; 0x24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd90      	pop	{r4, r7, pc}
 8001270:	20000000 	.word	0x20000000
 8001274:	053e2d63 	.word	0x053e2d63
 8001278:	50040000 	.word	0x50040000
 800127c:	50040100 	.word	0x50040100
 8001280:	50040200 	.word	0x50040200
 8001284:	50040300 	.word	0x50040300
 8001288:	fff0c007 	.word	0xfff0c007

0800128c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001298:	4853      	ldr	r0, [pc, #332]	; (80013e8 <HAL_ADC_Start_DMA+0x15c>)
 800129a:	f7ff fde3 	bl	8000e64 <LL_ADC_GetMultimode>
 800129e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fe74 	bl	8000f92 <LL_ADC_REG_IsConversionOngoing>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f040 8093 	bne.w	80013d8 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d101      	bne.n	80012c0 <HAL_ADC_Start_DMA+0x34>
 80012bc:	2302      	movs	r3, #2
 80012be:	e08e      	b.n	80013de <HAL_ADC_Start_DMA+0x152>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a47      	ldr	r2, [pc, #284]	; (80013ec <HAL_ADC_Start_DMA+0x160>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d008      	beq.n	80012e4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	2b05      	cmp	r3, #5
 80012dc:	d002      	beq.n	80012e4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	2b09      	cmp	r3, #9
 80012e2:	d172      	bne.n	80013ca <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f000 fc87 	bl	8001bf8 <ADC_Enable>
 80012ea:	4603      	mov	r3, r0
 80012ec:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d165      	bne.n	80013c0 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012fc:	f023 0301 	bic.w	r3, r3, #1
 8001300:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a38      	ldr	r2, [pc, #224]	; (80013f0 <HAL_ADC_Start_DMA+0x164>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d002      	beq.n	8001318 <HAL_ADC_Start_DMA+0x8c>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	e000      	b.n	800131a <HAL_ADC_Start_DMA+0x8e>
 8001318:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <HAL_ADC_Start_DMA+0x168>)
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	6812      	ldr	r2, [r2, #0]
 800131e:	4293      	cmp	r3, r2
 8001320:	d002      	beq.n	8001328 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d105      	bne.n	8001334 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001344:	f023 0206 	bic.w	r2, r3, #6
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	659a      	str	r2, [r3, #88]	; 0x58
 800134c:	e002      	b.n	8001354 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2200      	movs	r2, #0
 8001352:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	4a27      	ldr	r2, [pc, #156]	; (80013f8 <HAL_ADC_Start_DMA+0x16c>)
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	4a26      	ldr	r2, [pc, #152]	; (80013fc <HAL_ADC_Start_DMA+0x170>)
 8001362:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	4a25      	ldr	r2, [pc, #148]	; (8001400 <HAL_ADC_Start_DMA+0x174>)
 800136a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	221c      	movs	r2, #28
 8001372:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 0210 	orr.w	r2, r2, #16
 800138a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f042 0201 	orr.w	r2, r2, #1
 800139a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3340      	adds	r3, #64	; 0x40
 80013a6:	4619      	mov	r1, r3
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f000 ffba 	bl	8002324 <HAL_DMA_Start_IT>
 80013b0:	4603      	mov	r3, r0
 80013b2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fdd6 	bl	8000f6a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80013be:	e00d      	b.n	80013dc <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80013c8:	e008      	b.n	80013dc <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80013d6:	e001      	b.n	80013dc <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013d8:	2302      	movs	r3, #2
 80013da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	50040300 	.word	0x50040300
 80013ec:	50040200 	.word	0x50040200
 80013f0:	50040100 	.word	0x50040100
 80013f4:	50040000 	.word	0x50040000
 80013f8:	08001cbd 	.word	0x08001cbd
 80013fc:	08001d95 	.word	0x08001d95
 8001400:	08001db1 	.word	0x08001db1

08001404 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0b6      	sub	sp, #216	; 0xd8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001432:	2b01      	cmp	r3, #1
 8001434:	d101      	bne.n	800143a <HAL_ADC_ConfigChannel+0x22>
 8001436:	2302      	movs	r3, #2
 8001438:	e3c7      	b.n	8001bca <HAL_ADC_ConfigChannel+0x7b2>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fda3 	bl	8000f92 <LL_ADC_REG_IsConversionOngoing>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	f040 83a8 	bne.w	8001ba4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b05      	cmp	r3, #5
 800145a:	d824      	bhi.n	80014a6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	3b02      	subs	r3, #2
 8001462:	2b03      	cmp	r3, #3
 8001464:	d81b      	bhi.n	800149e <HAL_ADC_ConfigChannel+0x86>
 8001466:	a201      	add	r2, pc, #4	; (adr r2, 800146c <HAL_ADC_ConfigChannel+0x54>)
 8001468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146c:	0800147d 	.word	0x0800147d
 8001470:	08001485 	.word	0x08001485
 8001474:	0800148d 	.word	0x0800148d
 8001478:	08001495 	.word	0x08001495
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	220c      	movs	r2, #12
 8001480:	605a      	str	r2, [r3, #4]
          break;
 8001482:	e011      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	2212      	movs	r2, #18
 8001488:	605a      	str	r2, [r3, #4]
          break;
 800148a:	e00d      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2218      	movs	r2, #24
 8001490:	605a      	str	r2, [r3, #4]
          break;
 8001492:	e009      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800149a:	605a      	str	r2, [r3, #4]
          break;
 800149c:	e004      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2206      	movs	r2, #6
 80014a2:	605a      	str	r2, [r3, #4]
          break;
 80014a4:	e000      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80014a6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	f7ff fc59 	bl	8000d6c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fd67 	bl	8000f92 <LL_ADC_REG_IsConversionOngoing>
 80014c4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fd73 	bl	8000fb8 <LL_ADC_INJ_IsConversionOngoing>
 80014d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f040 81a6 	bne.w	800182c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f040 81a1 	bne.w	800182c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	6819      	ldr	r1, [r3, #0]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	461a      	mov	r2, r3
 80014f8:	f7ff fc64 	bl	8000dc4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	695a      	ldr	r2, [r3, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	08db      	lsrs	r3, r3, #3
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	2b04      	cmp	r3, #4
 800151c:	d00a      	beq.n	8001534 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6818      	ldr	r0, [r3, #0]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	6919      	ldr	r1, [r3, #16]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800152e:	f7ff fbb5 	bl	8000c9c <LL_ADC_SetOffset>
 8001532:	e17b      	b.n	800182c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fbd2 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10a      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x148>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fbc7 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	0e9b      	lsrs	r3, r3, #26
 800155a:	f003 021f 	and.w	r2, r3, #31
 800155e:	e01e      	b.n	800159e <HAL_ADC_ConfigChannel+0x186>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fbbc 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 800156c:	4603      	mov	r3, r0
 800156e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001576:	fa93 f3a3 	rbit	r3, r3
 800157a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800157e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001582:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001586:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800158e:	2320      	movs	r3, #32
 8001590:	e004      	b.n	800159c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001592:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001596:	fab3 f383 	clz	r3, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d105      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x19e>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	0e9b      	lsrs	r3, r3, #26
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	e018      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x1d0>
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015c2:	fa93 f3a3 	rbit	r3, r3
 80015c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80015ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80015d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80015da:	2320      	movs	r3, #32
 80015dc:	e004      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80015de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015e2:	fab3 f383 	clz	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d106      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fb8b 	bl	8000d10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2101      	movs	r1, #1
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fb6f 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10a      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x20e>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2101      	movs	r1, #1
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fb64 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	0e9b      	lsrs	r3, r3, #26
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	e01e      	b.n	8001664 <HAL_ADC_ConfigChannel+0x24c>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2101      	movs	r1, #1
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fb59 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001638:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800163c:	fa93 f3a3 	rbit	r3, r3
 8001640:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001644:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800164c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001654:	2320      	movs	r3, #32
 8001656:	e004      	b.n	8001662 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001658:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800165c:	fab3 f383 	clz	r3, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800166c:	2b00      	cmp	r3, #0
 800166e:	d105      	bne.n	800167c <HAL_ADC_ConfigChannel+0x264>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	0e9b      	lsrs	r3, r3, #26
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	e018      	b.n	80016ae <HAL_ADC_ConfigChannel+0x296>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001684:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001688:	fa93 f3a3 	rbit	r3, r3
 800168c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001690:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001694:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001698:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80016a0:	2320      	movs	r3, #32
 80016a2:	e004      	b.n	80016ae <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80016a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016a8:	fab3 f383 	clz	r3, r3
 80016ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d106      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2200      	movs	r2, #0
 80016b8:	2101      	movs	r1, #1
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fb28 	bl	8000d10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2102      	movs	r1, #2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fb0c 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10a      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x2d4>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2102      	movs	r1, #2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fb01 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	0e9b      	lsrs	r3, r3, #26
 80016e6:	f003 021f 	and.w	r2, r3, #31
 80016ea:	e01e      	b.n	800172a <HAL_ADC_ConfigChannel+0x312>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2102      	movs	r1, #2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff faf6 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800170a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800170e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001712:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800171a:	2320      	movs	r3, #32
 800171c:	e004      	b.n	8001728 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800171e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001722:	fab3 f383 	clz	r3, r3
 8001726:	b2db      	uxtb	r3, r3
 8001728:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001732:	2b00      	cmp	r3, #0
 8001734:	d105      	bne.n	8001742 <HAL_ADC_ConfigChannel+0x32a>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	0e9b      	lsrs	r3, r3, #26
 800173c:	f003 031f 	and.w	r3, r3, #31
 8001740:	e016      	b.n	8001770 <HAL_ADC_ConfigChannel+0x358>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800174e:	fa93 f3a3 	rbit	r3, r3
 8001752:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001754:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001756:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800175a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001762:	2320      	movs	r3, #32
 8001764:	e004      	b.n	8001770 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001766:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800176a:	fab3 f383 	clz	r3, r3
 800176e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001770:	429a      	cmp	r2, r3
 8001772:	d106      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2200      	movs	r2, #0
 800177a:	2102      	movs	r1, #2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fac7 	bl	8000d10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2103      	movs	r1, #3
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff faab 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 800178e:	4603      	mov	r3, r0
 8001790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10a      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x396>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2103      	movs	r1, #3
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff faa0 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 80017a4:	4603      	mov	r3, r0
 80017a6:	0e9b      	lsrs	r3, r3, #26
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	e017      	b.n	80017de <HAL_ADC_ConfigChannel+0x3c6>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2103      	movs	r1, #3
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fa95 	bl	8000ce4 <LL_ADC_GetOffsetChannel>
 80017ba:	4603      	mov	r3, r0
 80017bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017c0:	fa93 f3a3 	rbit	r3, r3
 80017c4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80017c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017c8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80017ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80017d0:	2320      	movs	r3, #32
 80017d2:	e003      	b.n	80017dc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80017d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017d6:	fab3 f383 	clz	r3, r3
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d105      	bne.n	80017f6 <HAL_ADC_ConfigChannel+0x3de>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	0e9b      	lsrs	r3, r3, #26
 80017f0:	f003 031f 	and.w	r3, r3, #31
 80017f4:	e011      	b.n	800181a <HAL_ADC_ConfigChannel+0x402>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001806:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800180e:	2320      	movs	r3, #32
 8001810:	e003      	b.n	800181a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001814:	fab3 f383 	clz	r3, r3
 8001818:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800181a:	429a      	cmp	r2, r3
 800181c:	d106      	bne.n	800182c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2200      	movs	r2, #0
 8001824:	2103      	movs	r1, #3
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fa72 	bl	8000d10 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fb87 	bl	8000f44 <LL_ADC_IsEnabled>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	f040 813f 	bne.w	8001abc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6818      	ldr	r0, [r3, #0]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	6819      	ldr	r1, [r3, #0]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	461a      	mov	r2, r3
 800184c:	f7ff fae6 	bl	8000e1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4a8e      	ldr	r2, [pc, #568]	; (8001a90 <HAL_ADC_ConfigChannel+0x678>)
 8001856:	4293      	cmp	r3, r2
 8001858:	f040 8130 	bne.w	8001abc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10b      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x46c>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	0e9b      	lsrs	r3, r3, #26
 8001872:	3301      	adds	r3, #1
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	2b09      	cmp	r3, #9
 800187a:	bf94      	ite	ls
 800187c:	2301      	movls	r3, #1
 800187e:	2300      	movhi	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	e019      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x4a0>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800188c:	fa93 f3a3 	rbit	r3, r3
 8001890:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001894:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800189c:	2320      	movs	r3, #32
 800189e:	e003      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80018a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	3301      	adds	r3, #1
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	2b09      	cmp	r3, #9
 80018b0:	bf94      	ite	ls
 80018b2:	2301      	movls	r3, #1
 80018b4:	2300      	movhi	r3, #0
 80018b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d079      	beq.n	80019b0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d107      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x4c0>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	0e9b      	lsrs	r3, r3, #26
 80018ce:	3301      	adds	r3, #1
 80018d0:	069b      	lsls	r3, r3, #26
 80018d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018d6:	e015      	b.n	8001904 <HAL_ADC_ConfigChannel+0x4ec>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80018e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80018ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80018f0:	2320      	movs	r3, #32
 80018f2:	e003      	b.n	80018fc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80018f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	3301      	adds	r3, #1
 80018fe:	069b      	lsls	r3, r3, #26
 8001900:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800190c:	2b00      	cmp	r3, #0
 800190e:	d109      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x50c>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	0e9b      	lsrs	r3, r3, #26
 8001916:	3301      	adds	r3, #1
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	2101      	movs	r1, #1
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	e017      	b.n	8001954 <HAL_ADC_ConfigChannel+0x53c>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800192c:	fa93 f3a3 	rbit	r3, r3
 8001930:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001934:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800193c:	2320      	movs	r3, #32
 800193e:	e003      	b.n	8001948 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001942:	fab3 f383 	clz	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	3301      	adds	r3, #1
 800194a:	f003 031f 	and.w	r3, r3, #31
 800194e:	2101      	movs	r1, #1
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	ea42 0103 	orr.w	r1, r2, r3
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10a      	bne.n	800197a <HAL_ADC_ConfigChannel+0x562>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	0e9b      	lsrs	r3, r3, #26
 800196a:	3301      	adds	r3, #1
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	4613      	mov	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4413      	add	r3, r2
 8001976:	051b      	lsls	r3, r3, #20
 8001978:	e018      	b.n	80019ac <HAL_ADC_ConfigChannel+0x594>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800198c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001992:	2320      	movs	r3, #32
 8001994:	e003      	b.n	800199e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	3301      	adds	r3, #1
 80019a0:	f003 021f 	and.w	r2, r3, #31
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019ac:	430b      	orrs	r3, r1
 80019ae:	e080      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d107      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x5b4>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	0e9b      	lsrs	r3, r3, #26
 80019c2:	3301      	adds	r3, #1
 80019c4:	069b      	lsls	r3, r3, #26
 80019c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019ca:	e015      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x5e0>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80019da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80019de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80019e4:	2320      	movs	r3, #32
 80019e6:	e003      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80019e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ea:	fab3 f383 	clz	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	3301      	adds	r3, #1
 80019f2:	069b      	lsls	r3, r3, #26
 80019f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d109      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x600>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	0e9b      	lsrs	r3, r3, #26
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	2101      	movs	r1, #1
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	e017      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x630>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	61fb      	str	r3, [r7, #28]
  return result;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001a30:	2320      	movs	r3, #32
 8001a32:	e003      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	fab3 f383 	clz	r3, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	f003 031f 	and.w	r3, r3, #31
 8001a42:	2101      	movs	r1, #1
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	ea42 0103 	orr.w	r1, r2, r3
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10d      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x65c>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	0e9b      	lsrs	r3, r3, #26
 8001a5e:	3301      	adds	r3, #1
 8001a60:	f003 021f 	and.w	r2, r3, #31
 8001a64:	4613      	mov	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	3b1e      	subs	r3, #30
 8001a6c:	051b      	lsls	r3, r3, #20
 8001a6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a72:	e01d      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x698>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	fa93 f3a3 	rbit	r3, r3
 8001a80:	613b      	str	r3, [r7, #16]
  return result;
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d103      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001a8c:	2320      	movs	r3, #32
 8001a8e:	e005      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x684>
 8001a90:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f003 021f 	and.w	r2, r3, #31
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3b1e      	subs	r3, #30
 8001aaa:	051b      	lsls	r3, r3, #20
 8001aac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	6892      	ldr	r2, [r2, #8]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff f984 	bl	8000dc4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b44      	ldr	r3, [pc, #272]	; (8001bd4 <HAL_ADC_ConfigChannel+0x7bc>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d07a      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ac8:	4843      	ldr	r0, [pc, #268]	; (8001bd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001aca:	f7ff f8d9 	bl	8000c80 <LL_ADC_GetCommonPathInternalCh>
 8001ace:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a41      	ldr	r2, [pc, #260]	; (8001bdc <HAL_ADC_ConfigChannel+0x7c4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d12c      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001adc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d126      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a3c      	ldr	r2, [pc, #240]	; (8001be0 <HAL_ADC_ConfigChannel+0x7c8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d004      	beq.n	8001afc <HAL_ADC_ConfigChannel+0x6e4>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a3b      	ldr	r2, [pc, #236]	; (8001be4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d15d      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001afc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b04:	4619      	mov	r1, r3
 8001b06:	4834      	ldr	r0, [pc, #208]	; (8001bd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b08:	f7ff f8a7 	bl	8000c5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b0c:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <HAL_ADC_ConfigChannel+0x7d0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	4a36      	ldr	r2, [pc, #216]	; (8001bec <HAL_ADC_ConfigChannel+0x7d4>)
 8001b14:	fba2 2303 	umull	r2, r3, r2, r3
 8001b18:	099b      	lsrs	r3, r3, #6
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b26:	e002      	b.n	8001b2e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f9      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b34:	e040      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a2d      	ldr	r2, [pc, #180]	; (8001bf0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d118      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x75a>
 8001b40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d112      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a23      	ldr	r2, [pc, #140]	; (8001be0 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d004      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x748>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a22      	ldr	r2, [pc, #136]	; (8001be4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d12d      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b68:	4619      	mov	r1, r3
 8001b6a:	481b      	ldr	r0, [pc, #108]	; (8001bd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b6c:	f7ff f875 	bl	8000c5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b70:	e024      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1f      	ldr	r2, [pc, #124]	; (8001bf4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d120      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d11a      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d115      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480e      	ldr	r0, [pc, #56]	; (8001bd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b9e:	f7ff f85c 	bl	8000c5a <LL_ADC_SetCommonPathInternalCh>
 8001ba2:	e00c      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba8:	f043 0220 	orr.w	r2, r3, #32
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001bb6:	e002      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bb8:	bf00      	nop
 8001bba:	e000      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bbc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001bc6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	37d8      	adds	r7, #216	; 0xd8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	80080000 	.word	0x80080000
 8001bd8:	50040300 	.word	0x50040300
 8001bdc:	c7520000 	.word	0xc7520000
 8001be0:	50040000 	.word	0x50040000
 8001be4:	50040200 	.word	0x50040200
 8001be8:	20000000 	.word	0x20000000
 8001bec:	053e2d63 	.word	0x053e2d63
 8001bf0:	cb840000 	.word	0xcb840000
 8001bf4:	80000001 	.word	0x80000001

08001bf8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff f99d 	bl	8000f44 <LL_ADC_IsEnabled>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d14d      	bne.n	8001cac <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <ADC_Enable+0xc0>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00d      	beq.n	8001c3a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c22:	f043 0210 	orr.w	r2, r3, #16
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	f043 0201 	orr.w	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e039      	b.n	8001cae <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff f96c 	bl	8000f1c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001c44:	f7fe ffea 	bl	8000c1c <HAL_GetTick>
 8001c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c4a:	e028      	b.n	8001c9e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff f977 	bl	8000f44 <LL_ADC_IsEnabled>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d104      	bne.n	8001c66 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff f95b 	bl	8000f1c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c66:	f7fe ffd9 	bl	8000c1c <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d914      	bls.n	8001c9e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d00d      	beq.n	8001c9e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c86:	f043 0210 	orr.w	r2, r3, #16
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	f043 0201 	orr.w	r2, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e007      	b.n	8001cae <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d1cf      	bne.n	8001c4c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	8000003f 	.word	0x8000003f

08001cbc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d14b      	bne.n	8001d6e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d021      	beq.n	8001d34 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff f826 	bl	8000d46 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d032      	beq.n	8001d66 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d12b      	bne.n	8001d66 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d11f      	bne.n	8001d66 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2a:	f043 0201 	orr.w	r2, r3, #1
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54
 8001d32:	e018      	b.n	8001d66 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d111      	bne.n	8001d66 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d105      	bne.n	8001d66 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5e:	f043 0201 	orr.w	r2, r3, #1
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f7fe fd4c 	bl	8000804 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d6c:	e00e      	b.n	8001d8c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f7ff fb42 	bl	8001404 <HAL_ADC_ErrorCallback>
}
 8001d80:	e004      	b.n	8001d8c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	4798      	blx	r3
}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7fe fd20 	bl	80007e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	f043 0204 	orr.w	r2, r3, #4
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f7ff fb14 	bl	8001404 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ddc:	bf00      	nop
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <LL_ADC_IsEnabled>:
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <LL_ADC_IsEnabled+0x18>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <LL_ADC_IsEnabled+0x1a>
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_ADC_REG_IsConversionOngoing>:
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d101      	bne.n	8001e22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b09f      	sub	sp, #124	; 0x7c
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e093      	b.n	8001f76 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001e56:	2300      	movs	r3, #0
 8001e58:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a47      	ldr	r2, [pc, #284]	; (8001f80 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d102      	bne.n	8001e6e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e68:	4b46      	ldr	r3, [pc, #280]	; (8001f84 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	e001      	b.n	8001e72 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10b      	bne.n	8001e90 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	f043 0220 	orr.w	r2, r3, #32
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e072      	b.n	8001f76 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ffb9 	bl	8001e0a <LL_ADC_REG_IsConversionOngoing>
 8001e98:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff ffb3 	bl	8001e0a <LL_ADC_REG_IsConversionOngoing>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d154      	bne.n	8001f54 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001eaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d151      	bne.n	8001f54 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001eb0:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001eb2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d02c      	beq.n	8001f16 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6859      	ldr	r1, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ece:	035b      	lsls	r3, r3, #13
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ed6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ed8:	4829      	ldr	r0, [pc, #164]	; (8001f80 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001eda:	f7ff ff83 	bl	8001de4 <LL_ADC_IsEnabled>
 8001ede:	4604      	mov	r4, r0
 8001ee0:	4828      	ldr	r0, [pc, #160]	; (8001f84 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001ee2:	f7ff ff7f 	bl	8001de4 <LL_ADC_IsEnabled>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	431c      	orrs	r4, r3
 8001eea:	4828      	ldr	r0, [pc, #160]	; (8001f8c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001eec:	f7ff ff7a 	bl	8001de4 <LL_ADC_IsEnabled>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4323      	orrs	r3, r4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d137      	bne.n	8001f68 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f00:	f023 030f 	bic.w	r3, r3, #15
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	6811      	ldr	r1, [r2, #0]
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	6892      	ldr	r2, [r2, #8]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f12:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f14:	e028      	b.n	8001f68 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f20:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f22:	4817      	ldr	r0, [pc, #92]	; (8001f80 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f24:	f7ff ff5e 	bl	8001de4 <LL_ADC_IsEnabled>
 8001f28:	4604      	mov	r4, r0
 8001f2a:	4816      	ldr	r0, [pc, #88]	; (8001f84 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f2c:	f7ff ff5a 	bl	8001de4 <LL_ADC_IsEnabled>
 8001f30:	4603      	mov	r3, r0
 8001f32:	431c      	orrs	r4, r3
 8001f34:	4815      	ldr	r0, [pc, #84]	; (8001f8c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001f36:	f7ff ff55 	bl	8001de4 <LL_ADC_IsEnabled>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4323      	orrs	r3, r4
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d112      	bne.n	8001f68 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f4a:	f023 030f 	bic.w	r3, r3, #15
 8001f4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f50:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f52:	e009      	b.n	8001f68 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f58:	f043 0220 	orr.w	r2, r3, #32
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001f66:	e000      	b.n	8001f6a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f72:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	377c      	adds	r7, #124	; 0x7c
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd90      	pop	{r4, r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	50040000 	.word	0x50040000
 8001f84:	50040100 	.word	0x50040100
 8001f88:	50040300 	.word	0x50040300
 8001f8c:	50040200 	.word	0x50040200

08001f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fac:	4013      	ands	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc2:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	60d3      	str	r3, [r2, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	f003 0307 	and.w	r3, r3, #7
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	2b00      	cmp	r3, #0
 8002004:	db0b      	blt.n	800201e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	4907      	ldr	r1, [pc, #28]	; (800202c <__NVIC_EnableIRQ+0x38>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2001      	movs	r0, #1
 8002016:	fa00 f202 	lsl.w	r2, r0, r2
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000e100 	.word	0xe000e100

08002030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	2b00      	cmp	r3, #0
 8002042:	db0a      	blt.n	800205a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	490c      	ldr	r1, [pc, #48]	; (800207c <__NVIC_SetPriority+0x4c>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	440b      	add	r3, r1
 8002054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002058:	e00a      	b.n	8002070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4908      	ldr	r1, [pc, #32]	; (8002080 <__NVIC_SetPriority+0x50>)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	3b04      	subs	r3, #4
 8002068:	0112      	lsls	r2, r2, #4
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	440b      	add	r3, r1
 800206e:	761a      	strb	r2, [r3, #24]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000e100 	.word	0xe000e100
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f1c3 0307 	rsb	r3, r3, #7
 800209e:	2b04      	cmp	r3, #4
 80020a0:	bf28      	it	cs
 80020a2:	2304      	movcs	r3, #4
 80020a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3304      	adds	r3, #4
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d902      	bls.n	80020b4 <NVIC_EncodePriority+0x30>
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3b03      	subs	r3, #3
 80020b2:	e000      	b.n	80020b6 <NVIC_EncodePriority+0x32>
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	401a      	ands	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43d9      	mvns	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	4313      	orrs	r3, r2
         );
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020fc:	d301      	bcc.n	8002102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fe:	2301      	movs	r3, #1
 8002100:	e00f      	b.n	8002122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <SysTick_Config+0x40>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210a:	210f      	movs	r1, #15
 800210c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002110:	f7ff ff8e 	bl	8002030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <SysTick_Config+0x40>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <SysTick_Config+0x40>)
 800211c:	2207      	movs	r2, #7
 800211e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	e000e010 	.word	0xe000e010

08002130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff29 	bl	8001f90 <__NVIC_SetPriorityGrouping>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002158:	f7ff ff3e 	bl	8001fd8 <__NVIC_GetPriorityGrouping>
 800215c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	6978      	ldr	r0, [r7, #20]
 8002164:	f7ff ff8e 	bl	8002084 <NVIC_EncodePriority>
 8002168:	4602      	mov	r2, r0
 800216a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff5d 	bl	8002030 <__NVIC_SetPriority>
}
 8002176:	bf00      	nop
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff31 	bl	8001ff4 <__NVIC_EnableIRQ>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ffa2 	bl	80020ec <SysTick_Config>
 80021a8:	4603      	mov	r3, r0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e098      	b.n	80022f8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	4b4d      	ldr	r3, [pc, #308]	; (8002304 <HAL_DMA_Init+0x150>)
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d80f      	bhi.n	80021f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b4b      	ldr	r3, [pc, #300]	; (8002308 <HAL_DMA_Init+0x154>)
 80021da:	4413      	add	r3, r2
 80021dc:	4a4b      	ldr	r2, [pc, #300]	; (800230c <HAL_DMA_Init+0x158>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	009a      	lsls	r2, r3, #2
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a48      	ldr	r2, [pc, #288]	; (8002310 <HAL_DMA_Init+0x15c>)
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40
 80021f0:	e00e      	b.n	8002210 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	4b46      	ldr	r3, [pc, #280]	; (8002314 <HAL_DMA_Init+0x160>)
 80021fa:	4413      	add	r3, r2
 80021fc:	4a43      	ldr	r2, [pc, #268]	; (800230c <HAL_DMA_Init+0x158>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	091b      	lsrs	r3, r3, #4
 8002204:	009a      	lsls	r2, r3, #2
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a42      	ldr	r2, [pc, #264]	; (8002318 <HAL_DMA_Init+0x164>)
 800220e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800222a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002234:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002240:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800224c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800226a:	d039      	beq.n	80022e0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	4a27      	ldr	r2, [pc, #156]	; (8002310 <HAL_DMA_Init+0x15c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d11a      	bne.n	80022ac <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002276:	4b29      	ldr	r3, [pc, #164]	; (800231c <HAL_DMA_Init+0x168>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f003 031c 	and.w	r3, r3, #28
 8002282:	210f      	movs	r1, #15
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	4924      	ldr	r1, [pc, #144]	; (800231c <HAL_DMA_Init+0x168>)
 800228c:	4013      	ands	r3, r2
 800228e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002290:	4b22      	ldr	r3, [pc, #136]	; (800231c <HAL_DMA_Init+0x168>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229c:	f003 031c 	and.w	r3, r3, #28
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	491d      	ldr	r1, [pc, #116]	; (800231c <HAL_DMA_Init+0x168>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
 80022aa:	e019      	b.n	80022e0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022ac:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <HAL_DMA_Init+0x16c>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b4:	f003 031c 	and.w	r3, r3, #28
 80022b8:	210f      	movs	r1, #15
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	4917      	ldr	r1, [pc, #92]	; (8002320 <HAL_DMA_Init+0x16c>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022c6:	4b16      	ldr	r3, [pc, #88]	; (8002320 <HAL_DMA_Init+0x16c>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6859      	ldr	r1, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	f003 031c 	and.w	r3, r3, #28
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	4911      	ldr	r1, [pc, #68]	; (8002320 <HAL_DMA_Init+0x16c>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	40020407 	.word	0x40020407
 8002308:	bffdfff8 	.word	0xbffdfff8
 800230c:	cccccccd 	.word	0xcccccccd
 8002310:	40020000 	.word	0x40020000
 8002314:	bffdfbf8 	.word	0xbffdfbf8
 8002318:	40020400 	.word	0x40020400
 800231c:	400200a8 	.word	0x400200a8
 8002320:	400204a8 	.word	0x400204a8

08002324 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_DMA_Start_IT+0x20>
 8002340:	2302      	movs	r3, #2
 8002342:	e04b      	b.n	80023dc <HAL_DMA_Start_IT+0xb8>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b01      	cmp	r3, #1
 8002356:	d13a      	bne.n	80023ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0201 	bic.w	r2, r2, #1
 8002374:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f8e0 	bl	8002542 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 020e 	orr.w	r2, r2, #14
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	e00f      	b.n	80023bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0204 	bic.w	r2, r2, #4
 80023aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 020a 	orr.w	r2, r2, #10
 80023ba:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	e005      	b.n	80023da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80023d6:	2302      	movs	r3, #2
 80023d8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80023da:	7dfb      	ldrb	r3, [r7, #23]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002400:	f003 031c 	and.w	r3, r3, #28
 8002404:	2204      	movs	r2, #4
 8002406:	409a      	lsls	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d026      	beq.n	800245e <HAL_DMA_IRQHandler+0x7a>
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d021      	beq.n	800245e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b00      	cmp	r3, #0
 8002426:	d107      	bne.n	8002438 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0204 	bic.w	r2, r2, #4
 8002436:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243c:	f003 021c 	and.w	r2, r3, #28
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	2104      	movs	r1, #4
 8002446:	fa01 f202 	lsl.w	r2, r1, r2
 800244a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	2b00      	cmp	r3, #0
 8002452:	d071      	beq.n	8002538 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800245c:	e06c      	b.n	8002538 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f003 031c 	and.w	r3, r3, #28
 8002466:	2202      	movs	r2, #2
 8002468:	409a      	lsls	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4013      	ands	r3, r2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d02e      	beq.n	80024d0 <HAL_DMA_IRQHandler+0xec>
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d029      	beq.n	80024d0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10b      	bne.n	80024a2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 020a 	bic.w	r2, r2, #10
 8002498:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f003 021c 	and.w	r2, r3, #28
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	2102      	movs	r1, #2
 80024b0:	fa01 f202 	lsl.w	r2, r1, r2
 80024b4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d038      	beq.n	8002538 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80024ce:	e033      	b.n	8002538 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d4:	f003 031c 	and.w	r3, r3, #28
 80024d8:	2208      	movs	r2, #8
 80024da:	409a      	lsls	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d02a      	beq.n	800253a <HAL_DMA_IRQHandler+0x156>
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d025      	beq.n	800253a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 020e 	bic.w	r2, r2, #14
 80024fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	f003 021c 	and.w	r2, r3, #28
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	2101      	movs	r1, #1
 800250c:	fa01 f202 	lsl.w	r2, r1, r2
 8002510:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252c:	2b00      	cmp	r3, #0
 800252e:	d004      	beq.n	800253a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002538:	bf00      	nop
 800253a:	bf00      	nop
}
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002542:	b480      	push	{r7}
 8002544:	b085      	sub	sp, #20
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002554:	f003 021c 	and.w	r2, r3, #28
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	2101      	movs	r1, #1
 800255e:	fa01 f202 	lsl.w	r2, r1, r2
 8002562:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b10      	cmp	r3, #16
 8002572:	d108      	bne.n	8002586 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002584:	e007      	b.n	8002596 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	60da      	str	r2, [r3, #12]
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b2:	e17f      	b.n	80028b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	2101      	movs	r1, #1
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	4013      	ands	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8171 	beq.w	80028ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d005      	beq.n	80025e4 <HAL_GPIO_Init+0x40>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d130      	bne.n	8002646 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800261a:	2201      	movs	r2, #1
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	f003 0201 	and.w	r2, r3, #1
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b03      	cmp	r3, #3
 8002650:	d118      	bne.n	8002684 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002658:	2201      	movs	r2, #1
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4013      	ands	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	08db      	lsrs	r3, r3, #3
 800266e:	f003 0201 	and.w	r2, r3, #1
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2b03      	cmp	r3, #3
 800268e:	d017      	beq.n	80026c0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d123      	bne.n	8002714 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	08da      	lsrs	r2, r3, #3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3208      	adds	r2, #8
 80026d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	220f      	movs	r2, #15
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	08da      	lsrs	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3208      	adds	r2, #8
 800270e:	6939      	ldr	r1, [r7, #16]
 8002710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0203 	and.w	r2, r3, #3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80ac 	beq.w	80028ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002756:	4b5f      	ldr	r3, [pc, #380]	; (80028d4 <HAL_GPIO_Init+0x330>)
 8002758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275a:	4a5e      	ldr	r2, [pc, #376]	; (80028d4 <HAL_GPIO_Init+0x330>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6613      	str	r3, [r2, #96]	; 0x60
 8002762:	4b5c      	ldr	r3, [pc, #368]	; (80028d4 <HAL_GPIO_Init+0x330>)
 8002764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800276e:	4a5a      	ldr	r2, [pc, #360]	; (80028d8 <HAL_GPIO_Init+0x334>)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	089b      	lsrs	r3, r3, #2
 8002774:	3302      	adds	r3, #2
 8002776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	220f      	movs	r2, #15
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4013      	ands	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002798:	d025      	beq.n	80027e6 <HAL_GPIO_Init+0x242>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4f      	ldr	r2, [pc, #316]	; (80028dc <HAL_GPIO_Init+0x338>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d01f      	beq.n	80027e2 <HAL_GPIO_Init+0x23e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a4e      	ldr	r2, [pc, #312]	; (80028e0 <HAL_GPIO_Init+0x33c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d019      	beq.n	80027de <HAL_GPIO_Init+0x23a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a4d      	ldr	r2, [pc, #308]	; (80028e4 <HAL_GPIO_Init+0x340>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d013      	beq.n	80027da <HAL_GPIO_Init+0x236>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4c      	ldr	r2, [pc, #304]	; (80028e8 <HAL_GPIO_Init+0x344>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00d      	beq.n	80027d6 <HAL_GPIO_Init+0x232>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a4b      	ldr	r2, [pc, #300]	; (80028ec <HAL_GPIO_Init+0x348>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d007      	beq.n	80027d2 <HAL_GPIO_Init+0x22e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a4a      	ldr	r2, [pc, #296]	; (80028f0 <HAL_GPIO_Init+0x34c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d101      	bne.n	80027ce <HAL_GPIO_Init+0x22a>
 80027ca:	2306      	movs	r3, #6
 80027cc:	e00c      	b.n	80027e8 <HAL_GPIO_Init+0x244>
 80027ce:	2307      	movs	r3, #7
 80027d0:	e00a      	b.n	80027e8 <HAL_GPIO_Init+0x244>
 80027d2:	2305      	movs	r3, #5
 80027d4:	e008      	b.n	80027e8 <HAL_GPIO_Init+0x244>
 80027d6:	2304      	movs	r3, #4
 80027d8:	e006      	b.n	80027e8 <HAL_GPIO_Init+0x244>
 80027da:	2303      	movs	r3, #3
 80027dc:	e004      	b.n	80027e8 <HAL_GPIO_Init+0x244>
 80027de:	2302      	movs	r3, #2
 80027e0:	e002      	b.n	80027e8 <HAL_GPIO_Init+0x244>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_GPIO_Init+0x244>
 80027e6:	2300      	movs	r3, #0
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	f002 0203 	and.w	r2, r2, #3
 80027ee:	0092      	lsls	r2, r2, #2
 80027f0:	4093      	lsls	r3, r2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027f8:	4937      	ldr	r1, [pc, #220]	; (80028d8 <HAL_GPIO_Init+0x334>)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	089b      	lsrs	r3, r3, #2
 80027fe:	3302      	adds	r3, #2
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002806:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <HAL_GPIO_Init+0x350>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800282a:	4a32      	ldr	r2, [pc, #200]	; (80028f4 <HAL_GPIO_Init+0x350>)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002830:	4b30      	ldr	r3, [pc, #192]	; (80028f4 <HAL_GPIO_Init+0x350>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	43db      	mvns	r3, r3
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002854:	4a27      	ldr	r2, [pc, #156]	; (80028f4 <HAL_GPIO_Init+0x350>)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800285a:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <HAL_GPIO_Init+0x350>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	43db      	mvns	r3, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800287e:	4a1d      	ldr	r2, [pc, #116]	; (80028f4 <HAL_GPIO_Init+0x350>)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <HAL_GPIO_Init+0x350>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	43db      	mvns	r3, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028a8:	4a12      	ldr	r2, [pc, #72]	; (80028f4 <HAL_GPIO_Init+0x350>)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	3301      	adds	r3, #1
 80028b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	fa22 f303 	lsr.w	r3, r2, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f47f ae78 	bne.w	80025b4 <HAL_GPIO_Init+0x10>
  }
}
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop
 80028c8:	371c      	adds	r7, #28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40010000 	.word	0x40010000
 80028dc:	48000400 	.word	0x48000400
 80028e0:	48000800 	.word	0x48000800
 80028e4:	48000c00 	.word	0x48000c00
 80028e8:	48001000 	.word	0x48001000
 80028ec:	48001400 	.word	0x48001400
 80028f0:	48001800 	.word	0x48001800
 80028f4:	40010400 	.word	0x40010400

080028f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	807b      	strh	r3, [r7, #2]
 8002904:	4613      	mov	r3, r2
 8002906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002908:	787b      	ldrb	r3, [r7, #1]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800290e:	887a      	ldrh	r2, [r7, #2]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002914:	e002      	b.n	800291c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800292c:	4b04      	ldr	r3, [pc, #16]	; (8002940 <HAL_PWREx_GetVoltageRange+0x18>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40007000 	.word	0x40007000

08002944 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002952:	d130      	bne.n	80029b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002954:	4b23      	ldr	r3, [pc, #140]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800295c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002960:	d038      	beq.n	80029d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002962:	4b20      	ldr	r3, [pc, #128]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800296a:	4a1e      	ldr	r2, [pc, #120]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002970:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002972:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2232      	movs	r2, #50	; 0x32
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	4a1b      	ldr	r2, [pc, #108]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	0c9b      	lsrs	r3, r3, #18
 8002984:	3301      	adds	r3, #1
 8002986:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002988:	e002      	b.n	8002990 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3b01      	subs	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002990:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299c:	d102      	bne.n	80029a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f2      	bne.n	800298a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029a4:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b0:	d110      	bne.n	80029d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e00f      	b.n	80029d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c2:	d007      	beq.n	80029d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029c4:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029cc:	4a05      	ldr	r2, [pc, #20]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40007000 	.word	0x40007000
 80029e8:	20000000 	.word	0x20000000
 80029ec:	431bde83 	.word	0x431bde83

080029f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e3d4      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a02:	4ba1      	ldr	r3, [pc, #644]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a0c:	4b9e      	ldr	r3, [pc, #632]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 80e4 	beq.w	8002bec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d007      	beq.n	8002a3a <HAL_RCC_OscConfig+0x4a>
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	2b0c      	cmp	r3, #12
 8002a2e:	f040 808b 	bne.w	8002b48 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	f040 8087 	bne.w	8002b48 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a3a:	4b93      	ldr	r3, [pc, #588]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d005      	beq.n	8002a52 <HAL_RCC_OscConfig+0x62>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e3ac      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1a      	ldr	r2, [r3, #32]
 8002a56:	4b8c      	ldr	r3, [pc, #560]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <HAL_RCC_OscConfig+0x7c>
 8002a62:	4b89      	ldr	r3, [pc, #548]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a6a:	e005      	b.n	8002a78 <HAL_RCC_OscConfig+0x88>
 8002a6c:	4b86      	ldr	r3, [pc, #536]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d223      	bcs.n	8002ac4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fd41 	bl	8003508 <RCC_SetFlashLatencyFromMSIRange>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e38d      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a90:	4b7d      	ldr	r3, [pc, #500]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a7c      	ldr	r2, [pc, #496]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002a96:	f043 0308 	orr.w	r3, r3, #8
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4b7a      	ldr	r3, [pc, #488]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4977      	ldr	r1, [pc, #476]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aae:	4b76      	ldr	r3, [pc, #472]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	4972      	ldr	r1, [pc, #456]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
 8002ac2:	e025      	b.n	8002b10 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ac4:	4b70      	ldr	r3, [pc, #448]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a6f      	ldr	r2, [pc, #444]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002aca:	f043 0308 	orr.w	r3, r3, #8
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b6d      	ldr	r3, [pc, #436]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	496a      	ldr	r1, [pc, #424]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ae2:	4b69      	ldr	r3, [pc, #420]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	021b      	lsls	r3, r3, #8
 8002af0:	4965      	ldr	r1, [pc, #404]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d109      	bne.n	8002b10 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fd01 	bl	8003508 <RCC_SetFlashLatencyFromMSIRange>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e34d      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b10:	f000 fc36 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4b5c      	ldr	r3, [pc, #368]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	091b      	lsrs	r3, r3, #4
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	495a      	ldr	r1, [pc, #360]	; (8002c8c <HAL_RCC_OscConfig+0x29c>)
 8002b22:	5ccb      	ldrb	r3, [r1, r3]
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2c:	4a58      	ldr	r2, [pc, #352]	; (8002c90 <HAL_RCC_OscConfig+0x2a0>)
 8002b2e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b30:	4b58      	ldr	r3, [pc, #352]	; (8002c94 <HAL_RCC_OscConfig+0x2a4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fe f821 	bl	8000b7c <HAL_InitTick>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d052      	beq.n	8002bea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	e331      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d032      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b50:	4b4d      	ldr	r3, [pc, #308]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a4c      	ldr	r2, [pc, #304]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe f85e 	bl	8000c1c <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b64:	f7fe f85a 	bl	8000c1c <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e31a      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b76:	4b44      	ldr	r3, [pc, #272]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b82:	4b41      	ldr	r3, [pc, #260]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a40      	ldr	r2, [pc, #256]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002b88:	f043 0308 	orr.w	r3, r3, #8
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	4b3e      	ldr	r3, [pc, #248]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	493b      	ldr	r1, [pc, #236]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ba0:	4b39      	ldr	r3, [pc, #228]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	4936      	ldr	r1, [pc, #216]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]
 8002bb4:	e01a      	b.n	8002bec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bb6:	4b34      	ldr	r3, [pc, #208]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a33      	ldr	r2, [pc, #204]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bc2:	f7fe f82b 	bl	8000c1c <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bca:	f7fe f827 	bl	8000c1c <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e2e7      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bdc:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f0      	bne.n	8002bca <HAL_RCC_OscConfig+0x1da>
 8002be8:	e000      	b.n	8002bec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d074      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d005      	beq.n	8002c0a <HAL_RCC_OscConfig+0x21a>
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	2b0c      	cmp	r3, #12
 8002c02:	d10e      	bne.n	8002c22 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d10b      	bne.n	8002c22 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0a:	4b1f      	ldr	r3, [pc, #124]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d064      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x2f0>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d160      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e2c4      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2a:	d106      	bne.n	8002c3a <HAL_RCC_OscConfig+0x24a>
 8002c2c:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a15      	ldr	r2, [pc, #84]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	e01d      	b.n	8002c76 <HAL_RCC_OscConfig+0x286>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c42:	d10c      	bne.n	8002c5e <HAL_RCC_OscConfig+0x26e>
 8002c44:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a0f      	ldr	r2, [pc, #60]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0c      	ldr	r2, [pc, #48]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	e00b      	b.n	8002c76 <HAL_RCC_OscConfig+0x286>
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a09      	ldr	r2, [pc, #36]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a06      	ldr	r2, [pc, #24]	; (8002c88 <HAL_RCC_OscConfig+0x298>)
 8002c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d01c      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7e:	f7fd ffcd 	bl	8000c1c <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c84:	e011      	b.n	8002caa <HAL_RCC_OscConfig+0x2ba>
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	080048c0 	.word	0x080048c0
 8002c90:	20000000 	.word	0x20000000
 8002c94:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c98:	f7fd ffc0 	bl	8000c1c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e280      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002caa:	4baf      	ldr	r3, [pc, #700]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0x2a8>
 8002cb6:	e014      	b.n	8002ce2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fd ffb0 	bl	8000c1c <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7fd ffac 	bl	8000c1c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e26c      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cd2:	4ba5      	ldr	r3, [pc, #660]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x2d0>
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d060      	beq.n	8002db0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_OscConfig+0x310>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	2b0c      	cmp	r3, #12
 8002cf8:	d119      	bne.n	8002d2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d116      	bne.n	8002d2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d00:	4b99      	ldr	r3, [pc, #612]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_OscConfig+0x328>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e249      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d18:	4b93      	ldr	r3, [pc, #588]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	4990      	ldr	r1, [pc, #576]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d2c:	e040      	b.n	8002db0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d023      	beq.n	8002d7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d36:	4b8c      	ldr	r3, [pc, #560]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a8b      	ldr	r2, [pc, #556]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d42:	f7fd ff6b 	bl	8000c1c <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4a:	f7fd ff67 	bl	8000c1c <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e227      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d5c:	4b82      	ldr	r3, [pc, #520]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d68:	4b7f      	ldr	r3, [pc, #508]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	061b      	lsls	r3, r3, #24
 8002d76:	497c      	ldr	r1, [pc, #496]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
 8002d7c:	e018      	b.n	8002db0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7e:	4b7a      	ldr	r3, [pc, #488]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a79      	ldr	r2, [pc, #484]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7fd ff47 	bl	8000c1c <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d92:	f7fd ff43 	bl	8000c1c <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e203      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002da4:	4b70      	ldr	r3, [pc, #448]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d03c      	beq.n	8002e36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01c      	beq.n	8002dfe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc4:	4b68      	ldr	r3, [pc, #416]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dca:	4a67      	ldr	r2, [pc, #412]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd4:	f7fd ff22 	bl	8000c1c <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7fd ff1e 	bl	8000c1c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e1de      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dee:	4b5e      	ldr	r3, [pc, #376]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ef      	beq.n	8002ddc <HAL_RCC_OscConfig+0x3ec>
 8002dfc:	e01b      	b.n	8002e36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dfe:	4b5a      	ldr	r3, [pc, #360]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e04:	4a58      	ldr	r2, [pc, #352]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0e:	f7fd ff05 	bl	8000c1c <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e16:	f7fd ff01 	bl	8000c1c <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e1c1      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e28:	4b4f      	ldr	r3, [pc, #316]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1ef      	bne.n	8002e16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 80a6 	beq.w	8002f90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e44:	2300      	movs	r3, #0
 8002e46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e48:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10d      	bne.n	8002e70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e54:	4b44      	ldr	r3, [pc, #272]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e58:	4a43      	ldr	r2, [pc, #268]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e60:	4b41      	ldr	r3, [pc, #260]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e70:	4b3e      	ldr	r3, [pc, #248]	; (8002f6c <HAL_RCC_OscConfig+0x57c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d118      	bne.n	8002eae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e7c:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <HAL_RCC_OscConfig+0x57c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a3a      	ldr	r2, [pc, #232]	; (8002f6c <HAL_RCC_OscConfig+0x57c>)
 8002e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e88:	f7fd fec8 	bl	8000c1c <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e90:	f7fd fec4 	bl	8000c1c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e184      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea2:	4b32      	ldr	r3, [pc, #200]	; (8002f6c <HAL_RCC_OscConfig+0x57c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d108      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x4d8>
 8002eb6:	4b2c      	ldr	r3, [pc, #176]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebc:	4a2a      	ldr	r2, [pc, #168]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec6:	e024      	b.n	8002f12 <HAL_RCC_OscConfig+0x522>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	d110      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x502>
 8002ed0:	4b25      	ldr	r3, [pc, #148]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed6:	4a24      	ldr	r2, [pc, #144]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ee0:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	4a20      	ldr	r2, [pc, #128]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ef0:	e00f      	b.n	8002f12 <HAL_RCC_OscConfig+0x522>
 8002ef2:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef8:	4a1b      	ldr	r2, [pc, #108]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f02:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f08:	4a17      	ldr	r2, [pc, #92]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002f0a:	f023 0304 	bic.w	r3, r3, #4
 8002f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d016      	beq.n	8002f48 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1a:	f7fd fe7f 	bl	8000c1c <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7fd fe7b 	bl	8000c1c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e139      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_RCC_OscConfig+0x578>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0ed      	beq.n	8002f22 <HAL_RCC_OscConfig+0x532>
 8002f46:	e01a      	b.n	8002f7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f48:	f7fd fe68 	bl	8000c1c <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f4e:	e00f      	b.n	8002f70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f50:	f7fd fe64 	bl	8000c1c <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d906      	bls.n	8002f70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e122      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
 8002f66:	bf00      	nop
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f70:	4b90      	ldr	r3, [pc, #576]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1e8      	bne.n	8002f50 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f7e:	7ffb      	ldrb	r3, [r7, #31]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d105      	bne.n	8002f90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f84:	4b8b      	ldr	r3, [pc, #556]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	4a8a      	ldr	r2, [pc, #552]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 8002f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 8108 	beq.w	80031aa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	f040 80d0 	bne.w	8003144 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fa4:	4b83      	ldr	r3, [pc, #524]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f003 0203 	and.w	r2, r3, #3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d130      	bne.n	800301a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d127      	bne.n	800301a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d11f      	bne.n	800301a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fe4:	2a07      	cmp	r2, #7
 8002fe6:	bf14      	ite	ne
 8002fe8:	2201      	movne	r2, #1
 8002fea:	2200      	moveq	r2, #0
 8002fec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d113      	bne.n	800301a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffc:	085b      	lsrs	r3, r3, #1
 8002ffe:	3b01      	subs	r3, #1
 8003000:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003002:	429a      	cmp	r2, r3
 8003004:	d109      	bne.n	800301a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	085b      	lsrs	r3, r3, #1
 8003012:	3b01      	subs	r3, #1
 8003014:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003016:	429a      	cmp	r2, r3
 8003018:	d06e      	beq.n	80030f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	2b0c      	cmp	r3, #12
 800301e:	d069      	beq.n	80030f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003020:	4b64      	ldr	r3, [pc, #400]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800302c:	4b61      	ldr	r3, [pc, #388]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0b7      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800303c:	4b5d      	ldr	r3, [pc, #372]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a5c      	ldr	r2, [pc, #368]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 8003042:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003046:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003048:	f7fd fde8 	bl	8000c1c <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003050:	f7fd fde4 	bl	8000c1c <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e0a4      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003062:	4b54      	ldr	r3, [pc, #336]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800306e:	4b51      	ldr	r3, [pc, #324]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	4b51      	ldr	r3, [pc, #324]	; (80031b8 <HAL_RCC_OscConfig+0x7c8>)
 8003074:	4013      	ands	r3, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800307e:	3a01      	subs	r2, #1
 8003080:	0112      	lsls	r2, r2, #4
 8003082:	4311      	orrs	r1, r2
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003088:	0212      	lsls	r2, r2, #8
 800308a:	4311      	orrs	r1, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003090:	0852      	lsrs	r2, r2, #1
 8003092:	3a01      	subs	r2, #1
 8003094:	0552      	lsls	r2, r2, #21
 8003096:	4311      	orrs	r1, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800309c:	0852      	lsrs	r2, r2, #1
 800309e:	3a01      	subs	r2, #1
 80030a0:	0652      	lsls	r2, r2, #25
 80030a2:	4311      	orrs	r1, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030a8:	0912      	lsrs	r2, r2, #4
 80030aa:	0452      	lsls	r2, r2, #17
 80030ac:	430a      	orrs	r2, r1
 80030ae:	4941      	ldr	r1, [pc, #260]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030b4:	4b3f      	ldr	r3, [pc, #252]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a3e      	ldr	r2, [pc, #248]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 80030ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030c0:	4b3c      	ldr	r3, [pc, #240]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4a3b      	ldr	r2, [pc, #236]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 80030c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030cc:	f7fd fda6 	bl	8000c1c <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d4:	f7fd fda2 	bl	8000c1c <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e062      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e6:	4b33      	ldr	r3, [pc, #204]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030f2:	e05a      	b.n	80031aa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e059      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f8:	4b2e      	ldr	r3, [pc, #184]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d152      	bne.n	80031aa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003104:	4b2b      	ldr	r3, [pc, #172]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a2a      	ldr	r2, [pc, #168]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 800310a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003110:	4b28      	ldr	r3, [pc, #160]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4a27      	ldr	r2, [pc, #156]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 8003116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800311a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800311c:	f7fd fd7e 	bl	8000c1c <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003124:	f7fd fd7a 	bl	8000c1c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e03a      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003136:	4b1f      	ldr	r3, [pc, #124]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0x734>
 8003142:	e032      	b.n	80031aa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2b0c      	cmp	r3, #12
 8003148:	d02d      	beq.n	80031a6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314a:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a19      	ldr	r2, [pc, #100]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 8003150:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003154:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003156:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d105      	bne.n	800316e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003162:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	4a13      	ldr	r2, [pc, #76]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 8003168:	f023 0303 	bic.w	r3, r3, #3
 800316c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800316e:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	4a10      	ldr	r2, [pc, #64]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 8003174:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317e:	f7fd fd4d 	bl	8000c1c <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003186:	f7fd fd49 	bl	8000c1c <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e009      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <HAL_RCC_OscConfig+0x7c4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f0      	bne.n	8003186 <HAL_RCC_OscConfig+0x796>
 80031a4:	e001      	b.n	80031aa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3720      	adds	r7, #32
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000
 80031b8:	f99d808c 	.word	0xf99d808c

080031bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0c8      	b.n	8003362 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031d0:	4b66      	ldr	r3, [pc, #408]	; (800336c <HAL_RCC_ClockConfig+0x1b0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d910      	bls.n	8003200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b63      	ldr	r3, [pc, #396]	; (800336c <HAL_RCC_ClockConfig+0x1b0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 0207 	bic.w	r2, r3, #7
 80031e6:	4961      	ldr	r1, [pc, #388]	; (800336c <HAL_RCC_ClockConfig+0x1b0>)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b5f      	ldr	r3, [pc, #380]	; (800336c <HAL_RCC_ClockConfig+0x1b0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0b0      	b.n	8003362 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d04c      	beq.n	80032a6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b03      	cmp	r3, #3
 8003212:	d107      	bne.n	8003224 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003214:	4b56      	ldr	r3, [pc, #344]	; (8003370 <HAL_RCC_ClockConfig+0x1b4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d121      	bne.n	8003264 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e09e      	b.n	8003362 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d107      	bne.n	800323c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800322c:	4b50      	ldr	r3, [pc, #320]	; (8003370 <HAL_RCC_ClockConfig+0x1b4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d115      	bne.n	8003264 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e092      	b.n	8003362 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d107      	bne.n	8003254 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003244:	4b4a      	ldr	r3, [pc, #296]	; (8003370 <HAL_RCC_ClockConfig+0x1b4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d109      	bne.n	8003264 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e086      	b.n	8003362 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003254:	4b46      	ldr	r3, [pc, #280]	; (8003370 <HAL_RCC_ClockConfig+0x1b4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e07e      	b.n	8003362 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003264:	4b42      	ldr	r3, [pc, #264]	; (8003370 <HAL_RCC_ClockConfig+0x1b4>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f023 0203 	bic.w	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	493f      	ldr	r1, [pc, #252]	; (8003370 <HAL_RCC_ClockConfig+0x1b4>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003276:	f7fd fcd1 	bl	8000c1c <HAL_GetTick>
 800327a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327c:	e00a      	b.n	8003294 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327e:	f7fd fccd 	bl	8000c1c <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e066      	b.n	8003362 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003294:	4b36      	ldr	r3, [pc, #216]	; (8003370 <HAL_RCC_ClockConfig+0x1b4>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 020c 	and.w	r2, r3, #12
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d1eb      	bne.n	800327e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b2:	4b2f      	ldr	r3, [pc, #188]	; (8003370 <HAL_RCC_ClockConfig+0x1b4>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	492c      	ldr	r1, [pc, #176]	; (8003370 <HAL_RCC_ClockConfig+0x1b4>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032c4:	4b29      	ldr	r3, [pc, #164]	; (800336c <HAL_RCC_ClockConfig+0x1b0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d210      	bcs.n	80032f4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	4b26      	ldr	r3, [pc, #152]	; (800336c <HAL_RCC_ClockConfig+0x1b0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 0207 	bic.w	r2, r3, #7
 80032da:	4924      	ldr	r1, [pc, #144]	; (800336c <HAL_RCC_ClockConfig+0x1b0>)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b22      	ldr	r3, [pc, #136]	; (800336c <HAL_RCC_ClockConfig+0x1b0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e036      	b.n	8003362 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <HAL_RCC_ClockConfig+0x1b4>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4918      	ldr	r1, [pc, #96]	; (8003370 <HAL_RCC_ClockConfig+0x1b4>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800331e:	4b14      	ldr	r3, [pc, #80]	; (8003370 <HAL_RCC_ClockConfig+0x1b4>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4910      	ldr	r1, [pc, #64]	; (8003370 <HAL_RCC_ClockConfig+0x1b4>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003332:	f000 f825 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 8003336:	4602      	mov	r2, r0
 8003338:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <HAL_RCC_ClockConfig+0x1b4>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	490c      	ldr	r1, [pc, #48]	; (8003374 <HAL_RCC_ClockConfig+0x1b8>)
 8003344:	5ccb      	ldrb	r3, [r1, r3]
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	fa22 f303 	lsr.w	r3, r2, r3
 800334e:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003352:	4b0a      	ldr	r3, [pc, #40]	; (800337c <HAL_RCC_ClockConfig+0x1c0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd fc10 	bl	8000b7c <HAL_InitTick>
 800335c:	4603      	mov	r3, r0
 800335e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003360:	7afb      	ldrb	r3, [r7, #11]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40022000 	.word	0x40022000
 8003370:	40021000 	.word	0x40021000
 8003374:	080048c0 	.word	0x080048c0
 8003378:	20000000 	.word	0x20000000
 800337c:	20000004 	.word	0x20000004

08003380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003380:	b480      	push	{r7}
 8003382:	b089      	sub	sp, #36	; 0x24
 8003384:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800338e:	4b3e      	ldr	r3, [pc, #248]	; (8003488 <HAL_RCC_GetSysClockFreq+0x108>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003398:	4b3b      	ldr	r3, [pc, #236]	; (8003488 <HAL_RCC_GetSysClockFreq+0x108>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0x34>
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	2b0c      	cmp	r3, #12
 80033ac:	d121      	bne.n	80033f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d11e      	bne.n	80033f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033b4:	4b34      	ldr	r3, [pc, #208]	; (8003488 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d107      	bne.n	80033d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033c0:	4b31      	ldr	r3, [pc, #196]	; (8003488 <HAL_RCC_GetSysClockFreq+0x108>)
 80033c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	e005      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033d0:	4b2d      	ldr	r3, [pc, #180]	; (8003488 <HAL_RCC_GetSysClockFreq+0x108>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033dc:	4a2b      	ldr	r2, [pc, #172]	; (800348c <HAL_RCC_GetSysClockFreq+0x10c>)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10d      	bne.n	8003408 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d102      	bne.n	80033fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033f8:	4b25      	ldr	r3, [pc, #148]	; (8003490 <HAL_RCC_GetSysClockFreq+0x110>)
 80033fa:	61bb      	str	r3, [r7, #24]
 80033fc:	e004      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b08      	cmp	r3, #8
 8003402:	d101      	bne.n	8003408 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003404:	4b23      	ldr	r3, [pc, #140]	; (8003494 <HAL_RCC_GetSysClockFreq+0x114>)
 8003406:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	2b0c      	cmp	r3, #12
 800340c:	d134      	bne.n	8003478 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800340e:	4b1e      	ldr	r3, [pc, #120]	; (8003488 <HAL_RCC_GetSysClockFreq+0x108>)
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d003      	beq.n	8003426 <HAL_RCC_GetSysClockFreq+0xa6>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b03      	cmp	r3, #3
 8003422:	d003      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0xac>
 8003424:	e005      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003426:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <HAL_RCC_GetSysClockFreq+0x110>)
 8003428:	617b      	str	r3, [r7, #20]
      break;
 800342a:	e005      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800342c:	4b19      	ldr	r3, [pc, #100]	; (8003494 <HAL_RCC_GetSysClockFreq+0x114>)
 800342e:	617b      	str	r3, [r7, #20]
      break;
 8003430:	e002      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	617b      	str	r3, [r7, #20]
      break;
 8003436:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003438:	4b13      	ldr	r3, [pc, #76]	; (8003488 <HAL_RCC_GetSysClockFreq+0x108>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	3301      	adds	r3, #1
 8003444:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003446:	4b10      	ldr	r3, [pc, #64]	; (8003488 <HAL_RCC_GetSysClockFreq+0x108>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	0a1b      	lsrs	r3, r3, #8
 800344c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	fb02 f203 	mul.w	r2, r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	fbb2 f3f3 	udiv	r3, r2, r3
 800345c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <HAL_RCC_GetSysClockFreq+0x108>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	0e5b      	lsrs	r3, r3, #25
 8003464:	f003 0303 	and.w	r3, r3, #3
 8003468:	3301      	adds	r3, #1
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	fbb2 f3f3 	udiv	r3, r2, r3
 8003476:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003478:	69bb      	ldr	r3, [r7, #24]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3724      	adds	r7, #36	; 0x24
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40021000 	.word	0x40021000
 800348c:	080048d8 	.word	0x080048d8
 8003490:	00f42400 	.word	0x00f42400
 8003494:	007a1200 	.word	0x007a1200

08003498 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800349c:	4b03      	ldr	r3, [pc, #12]	; (80034ac <HAL_RCC_GetHCLKFreq+0x14>)
 800349e:	681b      	ldr	r3, [r3, #0]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20000000 	.word	0x20000000

080034b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034b4:	f7ff fff0 	bl	8003498 <HAL_RCC_GetHCLKFreq>
 80034b8:	4602      	mov	r2, r0
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	4904      	ldr	r1, [pc, #16]	; (80034d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034c6:	5ccb      	ldrb	r3, [r1, r3]
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40021000 	.word	0x40021000
 80034d8:	080048d0 	.word	0x080048d0

080034dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034e0:	f7ff ffda 	bl	8003498 <HAL_RCC_GetHCLKFreq>
 80034e4:	4602      	mov	r2, r0
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	0adb      	lsrs	r3, r3, #11
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	4904      	ldr	r1, [pc, #16]	; (8003504 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034f2:	5ccb      	ldrb	r3, [r1, r3]
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000
 8003504:	080048d0 	.word	0x080048d0

08003508 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003510:	2300      	movs	r3, #0
 8003512:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003514:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003520:	f7ff fa02 	bl	8002928 <HAL_PWREx_GetVoltageRange>
 8003524:	6178      	str	r0, [r7, #20]
 8003526:	e014      	b.n	8003552 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003528:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800352a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352c:	4a24      	ldr	r2, [pc, #144]	; (80035c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800352e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003532:	6593      	str	r3, [r2, #88]	; 0x58
 8003534:	4b22      	ldr	r3, [pc, #136]	; (80035c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003540:	f7ff f9f2 	bl	8002928 <HAL_PWREx_GetVoltageRange>
 8003544:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003546:	4b1e      	ldr	r3, [pc, #120]	; (80035c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354a:	4a1d      	ldr	r2, [pc, #116]	; (80035c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003550:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003558:	d10b      	bne.n	8003572 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b80      	cmp	r3, #128	; 0x80
 800355e:	d919      	bls.n	8003594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2ba0      	cmp	r3, #160	; 0xa0
 8003564:	d902      	bls.n	800356c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003566:	2302      	movs	r3, #2
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	e013      	b.n	8003594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800356c:	2301      	movs	r3, #1
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	e010      	b.n	8003594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b80      	cmp	r3, #128	; 0x80
 8003576:	d902      	bls.n	800357e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003578:	2303      	movs	r3, #3
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	e00a      	b.n	8003594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b80      	cmp	r3, #128	; 0x80
 8003582:	d102      	bne.n	800358a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003584:	2302      	movs	r3, #2
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	e004      	b.n	8003594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b70      	cmp	r3, #112	; 0x70
 800358e:	d101      	bne.n	8003594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003590:	2301      	movs	r3, #1
 8003592:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f023 0207 	bic.w	r2, r3, #7
 800359c:	4909      	ldr	r1, [pc, #36]	; (80035c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035a4:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d001      	beq.n	80035b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40022000 	.word	0x40022000

080035c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035d0:	2300      	movs	r3, #0
 80035d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035d4:	2300      	movs	r3, #0
 80035d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d041      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035ec:	d02a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035f2:	d824      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035f8:	d008      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035fe:	d81e      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003608:	d010      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800360a:	e018      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800360c:	4b86      	ldr	r3, [pc, #536]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4a85      	ldr	r2, [pc, #532]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003616:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003618:	e015      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3304      	adds	r3, #4
 800361e:	2100      	movs	r1, #0
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fabb 	bl	8003b9c <RCCEx_PLLSAI1_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800362a:	e00c      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3320      	adds	r3, #32
 8003630:	2100      	movs	r1, #0
 8003632:	4618      	mov	r0, r3
 8003634:	f000 fba6 	bl	8003d84 <RCCEx_PLLSAI2_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800363c:	e003      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	74fb      	strb	r3, [r7, #19]
      break;
 8003642:	e000      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003646:	7cfb      	ldrb	r3, [r7, #19]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10b      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800364c:	4b76      	ldr	r3, [pc, #472]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800365a:	4973      	ldr	r1, [pc, #460]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003662:	e001      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003664:	7cfb      	ldrb	r3, [r7, #19]
 8003666:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d041      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003678:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800367c:	d02a      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800367e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003682:	d824      	bhi.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003684:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003688:	d008      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800368a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800368e:	d81e      	bhi.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003698:	d010      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800369a:	e018      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800369c:	4b62      	ldr	r3, [pc, #392]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4a61      	ldr	r2, [pc, #388]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036a8:	e015      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3304      	adds	r3, #4
 80036ae:	2100      	movs	r1, #0
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fa73 	bl	8003b9c <RCCEx_PLLSAI1_Config>
 80036b6:	4603      	mov	r3, r0
 80036b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036ba:	e00c      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3320      	adds	r3, #32
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fb5e 	bl	8003d84 <RCCEx_PLLSAI2_Config>
 80036c8:	4603      	mov	r3, r0
 80036ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036cc:	e003      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	74fb      	strb	r3, [r7, #19]
      break;
 80036d2:	e000      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80036d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036d6:	7cfb      	ldrb	r3, [r7, #19]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10b      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036dc:	4b52      	ldr	r3, [pc, #328]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ea:	494f      	ldr	r1, [pc, #316]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036f2:	e001      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	7cfb      	ldrb	r3, [r7, #19]
 80036f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80a0 	beq.w	8003846 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003706:	2300      	movs	r3, #0
 8003708:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800370a:	4b47      	ldr	r3, [pc, #284]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800371a:	2300      	movs	r3, #0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00d      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003720:	4b41      	ldr	r3, [pc, #260]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003724:	4a40      	ldr	r2, [pc, #256]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372a:	6593      	str	r3, [r2, #88]	; 0x58
 800372c:	4b3e      	ldr	r3, [pc, #248]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003738:	2301      	movs	r3, #1
 800373a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800373c:	4b3b      	ldr	r3, [pc, #236]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a3a      	ldr	r2, [pc, #232]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003746:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003748:	f7fd fa68 	bl	8000c1c <HAL_GetTick>
 800374c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800374e:	e009      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003750:	f7fd fa64 	bl	8000c1c <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d902      	bls.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	74fb      	strb	r3, [r7, #19]
        break;
 8003762:	e005      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003764:	4b31      	ldr	r3, [pc, #196]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0ef      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003770:	7cfb      	ldrb	r3, [r7, #19]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d15c      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003776:	4b2c      	ldr	r3, [pc, #176]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003780:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01f      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	429a      	cmp	r2, r3
 8003792:	d019      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003794:	4b24      	ldr	r3, [pc, #144]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800379e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037a0:	4b21      	ldr	r3, [pc, #132]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a6:	4a20      	ldr	r2, [pc, #128]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037b0:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	4a1c      	ldr	r2, [pc, #112]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037c0:	4a19      	ldr	r2, [pc, #100]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d016      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d2:	f7fd fa23 	bl	8000c1c <HAL_GetTick>
 80037d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037d8:	e00b      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037da:	f7fd fa1f 	bl	8000c1c <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d902      	bls.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	74fb      	strb	r3, [r7, #19]
            break;
 80037f0:	e006      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f2:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0ec      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003800:	7cfb      	ldrb	r3, [r7, #19]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10c      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003806:	4b08      	ldr	r3, [pc, #32]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003816:	4904      	ldr	r1, [pc, #16]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800381e:	e009      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003820:	7cfb      	ldrb	r3, [r7, #19]
 8003822:	74bb      	strb	r3, [r7, #18]
 8003824:	e006      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000
 800382c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003830:	7cfb      	ldrb	r3, [r7, #19]
 8003832:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003834:	7c7b      	ldrb	r3, [r7, #17]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d105      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383a:	4b9e      	ldr	r3, [pc, #632]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	4a9d      	ldr	r2, [pc, #628]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003844:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003852:	4b98      	ldr	r3, [pc, #608]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003858:	f023 0203 	bic.w	r2, r3, #3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	4994      	ldr	r1, [pc, #592]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003874:	4b8f      	ldr	r3, [pc, #572]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	f023 020c 	bic.w	r2, r3, #12
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003882:	498c      	ldr	r1, [pc, #560]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003896:	4b87      	ldr	r3, [pc, #540]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	4983      	ldr	r1, [pc, #524]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038b8:	4b7e      	ldr	r3, [pc, #504]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	497b      	ldr	r1, [pc, #492]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038da:	4b76      	ldr	r3, [pc, #472]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e8:	4972      	ldr	r1, [pc, #456]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038fc:	4b6d      	ldr	r3, [pc, #436]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390a:	496a      	ldr	r1, [pc, #424]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800391e:	4b65      	ldr	r3, [pc, #404]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	4961      	ldr	r1, [pc, #388]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003940:	4b5c      	ldr	r3, [pc, #368]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003946:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394e:	4959      	ldr	r1, [pc, #356]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003962:	4b54      	ldr	r3, [pc, #336]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003968:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003970:	4950      	ldr	r1, [pc, #320]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00a      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003984:	4b4b      	ldr	r3, [pc, #300]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003992:	4948      	ldr	r1, [pc, #288]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039a6:	4b43      	ldr	r3, [pc, #268]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b4:	493f      	ldr	r1, [pc, #252]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d028      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039c8:	4b3a      	ldr	r3, [pc, #232]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039d6:	4937      	ldr	r1, [pc, #220]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039e6:	d106      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e8:	4b32      	ldr	r3, [pc, #200]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	4a31      	ldr	r2, [pc, #196]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039f2:	60d3      	str	r3, [r2, #12]
 80039f4:	e011      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039fe:	d10c      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3304      	adds	r3, #4
 8003a04:	2101      	movs	r1, #1
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 f8c8 	bl	8003b9c <RCCEx_PLLSAI1_Config>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a16:	7cfb      	ldrb	r3, [r7, #19]
 8003a18:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d028      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a26:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a34:	491f      	ldr	r1, [pc, #124]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a44:	d106      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a46:	4b1b      	ldr	r3, [pc, #108]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	4a1a      	ldr	r2, [pc, #104]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a50:	60d3      	str	r3, [r2, #12]
 8003a52:	e011      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3304      	adds	r3, #4
 8003a62:	2101      	movs	r1, #1
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 f899 	bl	8003b9c <RCCEx_PLLSAI1_Config>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d02b      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a92:	4908      	ldr	r1, [pc, #32]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aa2:	d109      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4a02      	ldr	r2, [pc, #8]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aae:	60d3      	str	r3, [r2, #12]
 8003ab0:	e014      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ab2:	bf00      	nop
 8003ab4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003abc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ac0:	d10c      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 f867 	bl	8003b9c <RCCEx_PLLSAI1_Config>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ad2:	7cfb      	ldrb	r3, [r7, #19]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ad8:	7cfb      	ldrb	r3, [r7, #19]
 8003ada:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d02f      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ae8:	4b2b      	ldr	r3, [pc, #172]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003af6:	4928      	ldr	r1, [pc, #160]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b06:	d10d      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	2102      	movs	r1, #2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f844 	bl	8003b9c <RCCEx_PLLSAI1_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b18:	7cfb      	ldrb	r3, [r7, #19]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d014      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b1e:	7cfb      	ldrb	r3, [r7, #19]
 8003b20:	74bb      	strb	r3, [r7, #18]
 8003b22:	e011      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3320      	adds	r3, #32
 8003b32:	2102      	movs	r1, #2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 f925 	bl	8003d84 <RCCEx_PLLSAI2_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b3e:	7cfb      	ldrb	r3, [r7, #19]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b44:	7cfb      	ldrb	r3, [r7, #19]
 8003b46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b54:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b62:	490d      	ldr	r1, [pc, #52]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00b      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b76:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b86:	4904      	ldr	r1, [pc, #16]	; (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40021000 	.word	0x40021000

08003b9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003baa:	4b75      	ldr	r3, [pc, #468]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d018      	beq.n	8003be8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bb6:	4b72      	ldr	r3, [pc, #456]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f003 0203 	and.w	r2, r3, #3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d10d      	bne.n	8003be2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
       ||
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003bce:	4b6c      	ldr	r3, [pc, #432]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	091b      	lsrs	r3, r3, #4
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
       ||
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d047      	beq.n	8003c72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	73fb      	strb	r3, [r7, #15]
 8003be6:	e044      	b.n	8003c72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d018      	beq.n	8003c22 <RCCEx_PLLSAI1_Config+0x86>
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d825      	bhi.n	8003c40 <RCCEx_PLLSAI1_Config+0xa4>
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d002      	beq.n	8003bfe <RCCEx_PLLSAI1_Config+0x62>
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d009      	beq.n	8003c10 <RCCEx_PLLSAI1_Config+0x74>
 8003bfc:	e020      	b.n	8003c40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bfe:	4b60      	ldr	r3, [pc, #384]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d11d      	bne.n	8003c46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c0e:	e01a      	b.n	8003c46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c10:	4b5b      	ldr	r3, [pc, #364]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d116      	bne.n	8003c4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c20:	e013      	b.n	8003c4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c22:	4b57      	ldr	r3, [pc, #348]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10f      	bne.n	8003c4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c2e:	4b54      	ldr	r3, [pc, #336]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c3e:	e006      	b.n	8003c4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
      break;
 8003c44:	e004      	b.n	8003c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c46:	bf00      	nop
 8003c48:	e002      	b.n	8003c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c4a:	bf00      	nop
 8003c4c:	e000      	b.n	8003c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10d      	bne.n	8003c72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c56:	4b4a      	ldr	r3, [pc, #296]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6819      	ldr	r1, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	430b      	orrs	r3, r1
 8003c6c:	4944      	ldr	r1, [pc, #272]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d17d      	bne.n	8003d74 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c78:	4b41      	ldr	r3, [pc, #260]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a40      	ldr	r2, [pc, #256]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c84:	f7fc ffca 	bl	8000c1c <HAL_GetTick>
 8003c88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c8a:	e009      	b.n	8003ca0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c8c:	f7fc ffc6 	bl	8000c1c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d902      	bls.n	8003ca0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	73fb      	strb	r3, [r7, #15]
        break;
 8003c9e:	e005      	b.n	8003cac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ca0:	4b37      	ldr	r3, [pc, #220]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1ef      	bne.n	8003c8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d160      	bne.n	8003d74 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d111      	bne.n	8003cdc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cb8:	4b31      	ldr	r3, [pc, #196]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6892      	ldr	r2, [r2, #8]
 8003cc8:	0211      	lsls	r1, r2, #8
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68d2      	ldr	r2, [r2, #12]
 8003cce:	0912      	lsrs	r2, r2, #4
 8003cd0:	0452      	lsls	r2, r2, #17
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	492a      	ldr	r1, [pc, #168]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	610b      	str	r3, [r1, #16]
 8003cda:	e027      	b.n	8003d2c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d112      	bne.n	8003d08 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ce2:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003cea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6892      	ldr	r2, [r2, #8]
 8003cf2:	0211      	lsls	r1, r2, #8
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6912      	ldr	r2, [r2, #16]
 8003cf8:	0852      	lsrs	r2, r2, #1
 8003cfa:	3a01      	subs	r2, #1
 8003cfc:	0552      	lsls	r2, r2, #21
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	491f      	ldr	r1, [pc, #124]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	610b      	str	r3, [r1, #16]
 8003d06:	e011      	b.n	8003d2c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d08:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6892      	ldr	r2, [r2, #8]
 8003d18:	0211      	lsls	r1, r2, #8
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6952      	ldr	r2, [r2, #20]
 8003d1e:	0852      	lsrs	r2, r2, #1
 8003d20:	3a01      	subs	r2, #1
 8003d22:	0652      	lsls	r2, r2, #25
 8003d24:	430a      	orrs	r2, r1
 8003d26:	4916      	ldr	r1, [pc, #88]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d2c:	4b14      	ldr	r3, [pc, #80]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d38:	f7fc ff70 	bl	8000c1c <HAL_GetTick>
 8003d3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d3e:	e009      	b.n	8003d54 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d40:	f7fc ff6c 	bl	8000c1c <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d902      	bls.n	8003d54 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	73fb      	strb	r3, [r7, #15]
          break;
 8003d52:	e005      	b.n	8003d60 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d54:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0ef      	beq.n	8003d40 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d66:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	4904      	ldr	r1, [pc, #16]	; (8003d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000

08003d84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d92:	4b6a      	ldr	r3, [pc, #424]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d018      	beq.n	8003dd0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d9e:	4b67      	ldr	r3, [pc, #412]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f003 0203 	and.w	r2, r3, #3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d10d      	bne.n	8003dca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
       ||
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003db6:	4b61      	ldr	r3, [pc, #388]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	091b      	lsrs	r3, r3, #4
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
       ||
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d047      	beq.n	8003e5a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
 8003dce:	e044      	b.n	8003e5a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d018      	beq.n	8003e0a <RCCEx_PLLSAI2_Config+0x86>
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d825      	bhi.n	8003e28 <RCCEx_PLLSAI2_Config+0xa4>
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d002      	beq.n	8003de6 <RCCEx_PLLSAI2_Config+0x62>
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d009      	beq.n	8003df8 <RCCEx_PLLSAI2_Config+0x74>
 8003de4:	e020      	b.n	8003e28 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003de6:	4b55      	ldr	r3, [pc, #340]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d11d      	bne.n	8003e2e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df6:	e01a      	b.n	8003e2e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003df8:	4b50      	ldr	r3, [pc, #320]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d116      	bne.n	8003e32 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e08:	e013      	b.n	8003e32 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e0a:	4b4c      	ldr	r3, [pc, #304]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10f      	bne.n	8003e36 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e16:	4b49      	ldr	r3, [pc, #292]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e26:	e006      	b.n	8003e36 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e2c:	e004      	b.n	8003e38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e2e:	bf00      	nop
 8003e30:	e002      	b.n	8003e38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e32:	bf00      	nop
 8003e34:	e000      	b.n	8003e38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e36:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10d      	bne.n	8003e5a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e3e:	4b3f      	ldr	r3, [pc, #252]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6819      	ldr	r1, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	430b      	orrs	r3, r1
 8003e54:	4939      	ldr	r1, [pc, #228]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d167      	bne.n	8003f30 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e60:	4b36      	ldr	r3, [pc, #216]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a35      	ldr	r2, [pc, #212]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e6c:	f7fc fed6 	bl	8000c1c <HAL_GetTick>
 8003e70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e72:	e009      	b.n	8003e88 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e74:	f7fc fed2 	bl	8000c1c <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d902      	bls.n	8003e88 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	73fb      	strb	r3, [r7, #15]
        break;
 8003e86:	e005      	b.n	8003e94 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e88:	4b2c      	ldr	r3, [pc, #176]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1ef      	bne.n	8003e74 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d14a      	bne.n	8003f30 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d111      	bne.n	8003ec4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ea0:	4b26      	ldr	r3, [pc, #152]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6892      	ldr	r2, [r2, #8]
 8003eb0:	0211      	lsls	r1, r2, #8
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	68d2      	ldr	r2, [r2, #12]
 8003eb6:	0912      	lsrs	r2, r2, #4
 8003eb8:	0452      	lsls	r2, r2, #17
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	491f      	ldr	r1, [pc, #124]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	614b      	str	r3, [r1, #20]
 8003ec2:	e011      	b.n	8003ee8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ec4:	4b1d      	ldr	r3, [pc, #116]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ecc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6892      	ldr	r2, [r2, #8]
 8003ed4:	0211      	lsls	r1, r2, #8
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6912      	ldr	r2, [r2, #16]
 8003eda:	0852      	lsrs	r2, r2, #1
 8003edc:	3a01      	subs	r2, #1
 8003ede:	0652      	lsls	r2, r2, #25
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	4916      	ldr	r1, [pc, #88]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ee8:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a13      	ldr	r2, [pc, #76]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef4:	f7fc fe92 	bl	8000c1c <HAL_GetTick>
 8003ef8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003efa:	e009      	b.n	8003f10 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003efc:	f7fc fe8e 	bl	8000c1c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d902      	bls.n	8003f10 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	73fb      	strb	r3, [r7, #15]
          break;
 8003f0e:	e005      	b.n	8003f1c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0ef      	beq.n	8003efc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	4904      	ldr	r1, [pc, #16]	; (8003f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40021000 	.word	0x40021000

08003f40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e040      	b.n	8003fd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fc fd1e 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2224      	movs	r2, #36	; 0x24
 8003f6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0201 	bic.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f82c 	bl	8003fdc <UART_SetConfig>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e022      	b.n	8003fd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 faaa 	bl	80044f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003faa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fb31 	bl	8004634 <UART_CheckIdleState>
 8003fd2:	4603      	mov	r3, r0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fdc:	b5b0      	push	{r4, r5, r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4bad      	ldr	r3, [pc, #692]	; (80042bc <UART_SetConfig+0x2e0>)
 8004008:	4013      	ands	r3, r2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	69f9      	ldr	r1, [r7, #28]
 8004010:	430b      	orrs	r3, r1
 8004012:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4aa2      	ldr	r2, [pc, #648]	; (80042c0 <UART_SetConfig+0x2e4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d004      	beq.n	8004044 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	4313      	orrs	r3, r2
 8004042:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	430a      	orrs	r2, r1
 8004056:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a99      	ldr	r2, [pc, #612]	; (80042c4 <UART_SetConfig+0x2e8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d121      	bne.n	80040a6 <UART_SetConfig+0xca>
 8004062:	4b99      	ldr	r3, [pc, #612]	; (80042c8 <UART_SetConfig+0x2ec>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	2b03      	cmp	r3, #3
 800406e:	d817      	bhi.n	80040a0 <UART_SetConfig+0xc4>
 8004070:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <UART_SetConfig+0x9c>)
 8004072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004076:	bf00      	nop
 8004078:	08004089 	.word	0x08004089
 800407c:	08004095 	.word	0x08004095
 8004080:	0800408f 	.word	0x0800408f
 8004084:	0800409b 	.word	0x0800409b
 8004088:	2301      	movs	r3, #1
 800408a:	76fb      	strb	r3, [r7, #27]
 800408c:	e0e7      	b.n	800425e <UART_SetConfig+0x282>
 800408e:	2302      	movs	r3, #2
 8004090:	76fb      	strb	r3, [r7, #27]
 8004092:	e0e4      	b.n	800425e <UART_SetConfig+0x282>
 8004094:	2304      	movs	r3, #4
 8004096:	76fb      	strb	r3, [r7, #27]
 8004098:	e0e1      	b.n	800425e <UART_SetConfig+0x282>
 800409a:	2308      	movs	r3, #8
 800409c:	76fb      	strb	r3, [r7, #27]
 800409e:	e0de      	b.n	800425e <UART_SetConfig+0x282>
 80040a0:	2310      	movs	r3, #16
 80040a2:	76fb      	strb	r3, [r7, #27]
 80040a4:	e0db      	b.n	800425e <UART_SetConfig+0x282>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a88      	ldr	r2, [pc, #544]	; (80042cc <UART_SetConfig+0x2f0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d132      	bne.n	8004116 <UART_SetConfig+0x13a>
 80040b0:	4b85      	ldr	r3, [pc, #532]	; (80042c8 <UART_SetConfig+0x2ec>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f003 030c 	and.w	r3, r3, #12
 80040ba:	2b0c      	cmp	r3, #12
 80040bc:	d828      	bhi.n	8004110 <UART_SetConfig+0x134>
 80040be:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <UART_SetConfig+0xe8>)
 80040c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c4:	080040f9 	.word	0x080040f9
 80040c8:	08004111 	.word	0x08004111
 80040cc:	08004111 	.word	0x08004111
 80040d0:	08004111 	.word	0x08004111
 80040d4:	08004105 	.word	0x08004105
 80040d8:	08004111 	.word	0x08004111
 80040dc:	08004111 	.word	0x08004111
 80040e0:	08004111 	.word	0x08004111
 80040e4:	080040ff 	.word	0x080040ff
 80040e8:	08004111 	.word	0x08004111
 80040ec:	08004111 	.word	0x08004111
 80040f0:	08004111 	.word	0x08004111
 80040f4:	0800410b 	.word	0x0800410b
 80040f8:	2300      	movs	r3, #0
 80040fa:	76fb      	strb	r3, [r7, #27]
 80040fc:	e0af      	b.n	800425e <UART_SetConfig+0x282>
 80040fe:	2302      	movs	r3, #2
 8004100:	76fb      	strb	r3, [r7, #27]
 8004102:	e0ac      	b.n	800425e <UART_SetConfig+0x282>
 8004104:	2304      	movs	r3, #4
 8004106:	76fb      	strb	r3, [r7, #27]
 8004108:	e0a9      	b.n	800425e <UART_SetConfig+0x282>
 800410a:	2308      	movs	r3, #8
 800410c:	76fb      	strb	r3, [r7, #27]
 800410e:	e0a6      	b.n	800425e <UART_SetConfig+0x282>
 8004110:	2310      	movs	r3, #16
 8004112:	76fb      	strb	r3, [r7, #27]
 8004114:	e0a3      	b.n	800425e <UART_SetConfig+0x282>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a6d      	ldr	r2, [pc, #436]	; (80042d0 <UART_SetConfig+0x2f4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d120      	bne.n	8004162 <UART_SetConfig+0x186>
 8004120:	4b69      	ldr	r3, [pc, #420]	; (80042c8 <UART_SetConfig+0x2ec>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800412a:	2b30      	cmp	r3, #48	; 0x30
 800412c:	d013      	beq.n	8004156 <UART_SetConfig+0x17a>
 800412e:	2b30      	cmp	r3, #48	; 0x30
 8004130:	d814      	bhi.n	800415c <UART_SetConfig+0x180>
 8004132:	2b20      	cmp	r3, #32
 8004134:	d009      	beq.n	800414a <UART_SetConfig+0x16e>
 8004136:	2b20      	cmp	r3, #32
 8004138:	d810      	bhi.n	800415c <UART_SetConfig+0x180>
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <UART_SetConfig+0x168>
 800413e:	2b10      	cmp	r3, #16
 8004140:	d006      	beq.n	8004150 <UART_SetConfig+0x174>
 8004142:	e00b      	b.n	800415c <UART_SetConfig+0x180>
 8004144:	2300      	movs	r3, #0
 8004146:	76fb      	strb	r3, [r7, #27]
 8004148:	e089      	b.n	800425e <UART_SetConfig+0x282>
 800414a:	2302      	movs	r3, #2
 800414c:	76fb      	strb	r3, [r7, #27]
 800414e:	e086      	b.n	800425e <UART_SetConfig+0x282>
 8004150:	2304      	movs	r3, #4
 8004152:	76fb      	strb	r3, [r7, #27]
 8004154:	e083      	b.n	800425e <UART_SetConfig+0x282>
 8004156:	2308      	movs	r3, #8
 8004158:	76fb      	strb	r3, [r7, #27]
 800415a:	e080      	b.n	800425e <UART_SetConfig+0x282>
 800415c:	2310      	movs	r3, #16
 800415e:	76fb      	strb	r3, [r7, #27]
 8004160:	e07d      	b.n	800425e <UART_SetConfig+0x282>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a5b      	ldr	r2, [pc, #364]	; (80042d4 <UART_SetConfig+0x2f8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d120      	bne.n	80041ae <UART_SetConfig+0x1d2>
 800416c:	4b56      	ldr	r3, [pc, #344]	; (80042c8 <UART_SetConfig+0x2ec>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004172:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004176:	2bc0      	cmp	r3, #192	; 0xc0
 8004178:	d013      	beq.n	80041a2 <UART_SetConfig+0x1c6>
 800417a:	2bc0      	cmp	r3, #192	; 0xc0
 800417c:	d814      	bhi.n	80041a8 <UART_SetConfig+0x1cc>
 800417e:	2b80      	cmp	r3, #128	; 0x80
 8004180:	d009      	beq.n	8004196 <UART_SetConfig+0x1ba>
 8004182:	2b80      	cmp	r3, #128	; 0x80
 8004184:	d810      	bhi.n	80041a8 <UART_SetConfig+0x1cc>
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <UART_SetConfig+0x1b4>
 800418a:	2b40      	cmp	r3, #64	; 0x40
 800418c:	d006      	beq.n	800419c <UART_SetConfig+0x1c0>
 800418e:	e00b      	b.n	80041a8 <UART_SetConfig+0x1cc>
 8004190:	2300      	movs	r3, #0
 8004192:	76fb      	strb	r3, [r7, #27]
 8004194:	e063      	b.n	800425e <UART_SetConfig+0x282>
 8004196:	2302      	movs	r3, #2
 8004198:	76fb      	strb	r3, [r7, #27]
 800419a:	e060      	b.n	800425e <UART_SetConfig+0x282>
 800419c:	2304      	movs	r3, #4
 800419e:	76fb      	strb	r3, [r7, #27]
 80041a0:	e05d      	b.n	800425e <UART_SetConfig+0x282>
 80041a2:	2308      	movs	r3, #8
 80041a4:	76fb      	strb	r3, [r7, #27]
 80041a6:	e05a      	b.n	800425e <UART_SetConfig+0x282>
 80041a8:	2310      	movs	r3, #16
 80041aa:	76fb      	strb	r3, [r7, #27]
 80041ac:	e057      	b.n	800425e <UART_SetConfig+0x282>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a49      	ldr	r2, [pc, #292]	; (80042d8 <UART_SetConfig+0x2fc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d125      	bne.n	8004204 <UART_SetConfig+0x228>
 80041b8:	4b43      	ldr	r3, [pc, #268]	; (80042c8 <UART_SetConfig+0x2ec>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041c6:	d017      	beq.n	80041f8 <UART_SetConfig+0x21c>
 80041c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041cc:	d817      	bhi.n	80041fe <UART_SetConfig+0x222>
 80041ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d2:	d00b      	beq.n	80041ec <UART_SetConfig+0x210>
 80041d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d8:	d811      	bhi.n	80041fe <UART_SetConfig+0x222>
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <UART_SetConfig+0x20a>
 80041de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e2:	d006      	beq.n	80041f2 <UART_SetConfig+0x216>
 80041e4:	e00b      	b.n	80041fe <UART_SetConfig+0x222>
 80041e6:	2300      	movs	r3, #0
 80041e8:	76fb      	strb	r3, [r7, #27]
 80041ea:	e038      	b.n	800425e <UART_SetConfig+0x282>
 80041ec:	2302      	movs	r3, #2
 80041ee:	76fb      	strb	r3, [r7, #27]
 80041f0:	e035      	b.n	800425e <UART_SetConfig+0x282>
 80041f2:	2304      	movs	r3, #4
 80041f4:	76fb      	strb	r3, [r7, #27]
 80041f6:	e032      	b.n	800425e <UART_SetConfig+0x282>
 80041f8:	2308      	movs	r3, #8
 80041fa:	76fb      	strb	r3, [r7, #27]
 80041fc:	e02f      	b.n	800425e <UART_SetConfig+0x282>
 80041fe:	2310      	movs	r3, #16
 8004200:	76fb      	strb	r3, [r7, #27]
 8004202:	e02c      	b.n	800425e <UART_SetConfig+0x282>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a2d      	ldr	r2, [pc, #180]	; (80042c0 <UART_SetConfig+0x2e4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d125      	bne.n	800425a <UART_SetConfig+0x27e>
 800420e:	4b2e      	ldr	r3, [pc, #184]	; (80042c8 <UART_SetConfig+0x2ec>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004214:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004218:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800421c:	d017      	beq.n	800424e <UART_SetConfig+0x272>
 800421e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004222:	d817      	bhi.n	8004254 <UART_SetConfig+0x278>
 8004224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004228:	d00b      	beq.n	8004242 <UART_SetConfig+0x266>
 800422a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800422e:	d811      	bhi.n	8004254 <UART_SetConfig+0x278>
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <UART_SetConfig+0x260>
 8004234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004238:	d006      	beq.n	8004248 <UART_SetConfig+0x26c>
 800423a:	e00b      	b.n	8004254 <UART_SetConfig+0x278>
 800423c:	2300      	movs	r3, #0
 800423e:	76fb      	strb	r3, [r7, #27]
 8004240:	e00d      	b.n	800425e <UART_SetConfig+0x282>
 8004242:	2302      	movs	r3, #2
 8004244:	76fb      	strb	r3, [r7, #27]
 8004246:	e00a      	b.n	800425e <UART_SetConfig+0x282>
 8004248:	2304      	movs	r3, #4
 800424a:	76fb      	strb	r3, [r7, #27]
 800424c:	e007      	b.n	800425e <UART_SetConfig+0x282>
 800424e:	2308      	movs	r3, #8
 8004250:	76fb      	strb	r3, [r7, #27]
 8004252:	e004      	b.n	800425e <UART_SetConfig+0x282>
 8004254:	2310      	movs	r3, #16
 8004256:	76fb      	strb	r3, [r7, #27]
 8004258:	e001      	b.n	800425e <UART_SetConfig+0x282>
 800425a:	2310      	movs	r3, #16
 800425c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a17      	ldr	r2, [pc, #92]	; (80042c0 <UART_SetConfig+0x2e4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	f040 8087 	bne.w	8004378 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800426a:	7efb      	ldrb	r3, [r7, #27]
 800426c:	2b08      	cmp	r3, #8
 800426e:	d837      	bhi.n	80042e0 <UART_SetConfig+0x304>
 8004270:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <UART_SetConfig+0x29c>)
 8004272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004276:	bf00      	nop
 8004278:	0800429d 	.word	0x0800429d
 800427c:	080042e1 	.word	0x080042e1
 8004280:	080042a5 	.word	0x080042a5
 8004284:	080042e1 	.word	0x080042e1
 8004288:	080042ab 	.word	0x080042ab
 800428c:	080042e1 	.word	0x080042e1
 8004290:	080042e1 	.word	0x080042e1
 8004294:	080042e1 	.word	0x080042e1
 8004298:	080042b3 	.word	0x080042b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800429c:	f7ff f908 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 80042a0:	6178      	str	r0, [r7, #20]
        break;
 80042a2:	e022      	b.n	80042ea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a4:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <UART_SetConfig+0x300>)
 80042a6:	617b      	str	r3, [r7, #20]
        break;
 80042a8:	e01f      	b.n	80042ea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042aa:	f7ff f869 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 80042ae:	6178      	str	r0, [r7, #20]
        break;
 80042b0:	e01b      	b.n	80042ea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042b6:	617b      	str	r3, [r7, #20]
        break;
 80042b8:	e017      	b.n	80042ea <UART_SetConfig+0x30e>
 80042ba:	bf00      	nop
 80042bc:	efff69f3 	.word	0xefff69f3
 80042c0:	40008000 	.word	0x40008000
 80042c4:	40013800 	.word	0x40013800
 80042c8:	40021000 	.word	0x40021000
 80042cc:	40004400 	.word	0x40004400
 80042d0:	40004800 	.word	0x40004800
 80042d4:	40004c00 	.word	0x40004c00
 80042d8:	40005000 	.word	0x40005000
 80042dc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	76bb      	strb	r3, [r7, #26]
        break;
 80042e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 80f1 	beq.w	80044d4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	4413      	add	r3, r2
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d305      	bcc.n	800430e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	429a      	cmp	r2, r3
 800430c:	d902      	bls.n	8004314 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	76bb      	strb	r3, [r7, #26]
 8004312:	e0df      	b.n	80044d4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	4618      	mov	r0, r3
 8004318:	f04f 0100 	mov.w	r1, #0
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	020b      	lsls	r3, r1, #8
 8004326:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800432a:	0202      	lsls	r2, r0, #8
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	6849      	ldr	r1, [r1, #4]
 8004330:	0849      	lsrs	r1, r1, #1
 8004332:	4608      	mov	r0, r1
 8004334:	f04f 0100 	mov.w	r1, #0
 8004338:	1814      	adds	r4, r2, r0
 800433a:	eb43 0501 	adc.w	r5, r3, r1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	461a      	mov	r2, r3
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	4620      	mov	r0, r4
 800434a:	4629      	mov	r1, r5
 800434c:	f7fb ff3c 	bl	80001c8 <__aeabi_uldivmod>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4613      	mov	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800435e:	d308      	bcc.n	8004372 <UART_SetConfig+0x396>
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004366:	d204      	bcs.n	8004372 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	60da      	str	r2, [r3, #12]
 8004370:	e0b0      	b.n	80044d4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	76bb      	strb	r3, [r7, #26]
 8004376:	e0ad      	b.n	80044d4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004380:	d15b      	bne.n	800443a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004382:	7efb      	ldrb	r3, [r7, #27]
 8004384:	2b08      	cmp	r3, #8
 8004386:	d828      	bhi.n	80043da <UART_SetConfig+0x3fe>
 8004388:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <UART_SetConfig+0x3b4>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043b5 	.word	0x080043b5
 8004394:	080043bd 	.word	0x080043bd
 8004398:	080043c5 	.word	0x080043c5
 800439c:	080043db 	.word	0x080043db
 80043a0:	080043cb 	.word	0x080043cb
 80043a4:	080043db 	.word	0x080043db
 80043a8:	080043db 	.word	0x080043db
 80043ac:	080043db 	.word	0x080043db
 80043b0:	080043d3 	.word	0x080043d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b4:	f7ff f87c 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 80043b8:	6178      	str	r0, [r7, #20]
        break;
 80043ba:	e013      	b.n	80043e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043bc:	f7ff f88e 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 80043c0:	6178      	str	r0, [r7, #20]
        break;
 80043c2:	e00f      	b.n	80043e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c4:	4b49      	ldr	r3, [pc, #292]	; (80044ec <UART_SetConfig+0x510>)
 80043c6:	617b      	str	r3, [r7, #20]
        break;
 80043c8:	e00c      	b.n	80043e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ca:	f7fe ffd9 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 80043ce:	6178      	str	r0, [r7, #20]
        break;
 80043d0:	e008      	b.n	80043e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043d6:	617b      	str	r3, [r7, #20]
        break;
 80043d8:	e004      	b.n	80043e4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	76bb      	strb	r3, [r7, #26]
        break;
 80043e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d074      	beq.n	80044d4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	005a      	lsls	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	441a      	add	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2b0f      	cmp	r3, #15
 8004404:	d916      	bls.n	8004434 <UART_SetConfig+0x458>
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440c:	d212      	bcs.n	8004434 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	b29b      	uxth	r3, r3
 8004412:	f023 030f 	bic.w	r3, r3, #15
 8004416:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	085b      	lsrs	r3, r3, #1
 800441c:	b29b      	uxth	r3, r3
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	b29a      	uxth	r2, r3
 8004424:	89fb      	ldrh	r3, [r7, #14]
 8004426:	4313      	orrs	r3, r2
 8004428:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	89fa      	ldrh	r2, [r7, #14]
 8004430:	60da      	str	r2, [r3, #12]
 8004432:	e04f      	b.n	80044d4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	76bb      	strb	r3, [r7, #26]
 8004438:	e04c      	b.n	80044d4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800443a:	7efb      	ldrb	r3, [r7, #27]
 800443c:	2b08      	cmp	r3, #8
 800443e:	d828      	bhi.n	8004492 <UART_SetConfig+0x4b6>
 8004440:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <UART_SetConfig+0x46c>)
 8004442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004446:	bf00      	nop
 8004448:	0800446d 	.word	0x0800446d
 800444c:	08004475 	.word	0x08004475
 8004450:	0800447d 	.word	0x0800447d
 8004454:	08004493 	.word	0x08004493
 8004458:	08004483 	.word	0x08004483
 800445c:	08004493 	.word	0x08004493
 8004460:	08004493 	.word	0x08004493
 8004464:	08004493 	.word	0x08004493
 8004468:	0800448b 	.word	0x0800448b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800446c:	f7ff f820 	bl	80034b0 <HAL_RCC_GetPCLK1Freq>
 8004470:	6178      	str	r0, [r7, #20]
        break;
 8004472:	e013      	b.n	800449c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004474:	f7ff f832 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 8004478:	6178      	str	r0, [r7, #20]
        break;
 800447a:	e00f      	b.n	800449c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800447c:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <UART_SetConfig+0x510>)
 800447e:	617b      	str	r3, [r7, #20]
        break;
 8004480:	e00c      	b.n	800449c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004482:	f7fe ff7d 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 8004486:	6178      	str	r0, [r7, #20]
        break;
 8004488:	e008      	b.n	800449c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800448a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800448e:	617b      	str	r3, [r7, #20]
        break;
 8004490:	e004      	b.n	800449c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	76bb      	strb	r3, [r7, #26]
        break;
 800449a:	bf00      	nop
    }

    if (pclk != 0U)
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d018      	beq.n	80044d4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	085a      	lsrs	r2, r3, #1
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	441a      	add	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b0f      	cmp	r3, #15
 80044ba:	d909      	bls.n	80044d0 <UART_SetConfig+0x4f4>
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c2:	d205      	bcs.n	80044d0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60da      	str	r2, [r3, #12]
 80044ce:	e001      	b.n	80044d4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80044e0:	7ebb      	ldrb	r3, [r7, #26]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3720      	adds	r7, #32
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bdb0      	pop	{r4, r5, r7, pc}
 80044ea:	bf00      	nop
 80044ec:	00f42400 	.word	0x00f42400

080044f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00a      	beq.n	800455e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	f003 0310 	and.w	r3, r3, #16
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01a      	beq.n	8004606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ee:	d10a      	bne.n	8004606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	605a      	str	r2, [r3, #4]
  }
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af02      	add	r7, sp, #8
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004644:	f7fc faea 	bl	8000c1c <HAL_GetTick>
 8004648:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b08      	cmp	r3, #8
 8004656:	d10e      	bne.n	8004676 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f82d 	bl	80046c6 <UART_WaitOnFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e023      	b.n	80046be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b04      	cmp	r3, #4
 8004682:	d10e      	bne.n	80046a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004684:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f817 	bl	80046c6 <UART_WaitOnFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e00d      	b.n	80046be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2220      	movs	r2, #32
 80046a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b09c      	sub	sp, #112	; 0x70
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	60f8      	str	r0, [r7, #12]
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	603b      	str	r3, [r7, #0]
 80046d2:	4613      	mov	r3, r2
 80046d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d6:	e0a5      	b.n	8004824 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046de:	f000 80a1 	beq.w	8004824 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e2:	f7fc fa9b 	bl	8000c1c <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d302      	bcc.n	80046f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80046f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d13e      	bne.n	8004776 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004708:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800470c:	667b      	str	r3, [r7, #100]	; 0x64
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	461a      	mov	r2, r3
 8004714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004716:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004718:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800471c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800471e:	e841 2300 	strex	r3, r2, [r1]
 8004722:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1e6      	bne.n	80046f8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3308      	adds	r3, #8
 8004730:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800473a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	663b      	str	r3, [r7, #96]	; 0x60
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3308      	adds	r3, #8
 8004748:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800474a:	64ba      	str	r2, [r7, #72]	; 0x48
 800474c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004750:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e5      	bne.n	800472a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e067      	b.n	8004846 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d04f      	beq.n	8004824 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800478e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004792:	d147      	bne.n	8004824 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800479c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a6:	e853 3f00 	ldrex	r3, [r3]
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047bc:	637b      	str	r3, [r7, #52]	; 0x34
 80047be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047c4:	e841 2300 	strex	r3, r2, [r1]
 80047c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e6      	bne.n	800479e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3308      	adds	r3, #8
 80047d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	e853 3f00 	ldrex	r3, [r3]
 80047de:	613b      	str	r3, [r7, #16]
   return(result);
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f023 0301 	bic.w	r3, r3, #1
 80047e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3308      	adds	r3, #8
 80047ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047f0:	623a      	str	r2, [r7, #32]
 80047f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f4:	69f9      	ldr	r1, [r7, #28]
 80047f6:	6a3a      	ldr	r2, [r7, #32]
 80047f8:	e841 2300 	strex	r3, r2, [r1]
 80047fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e5      	bne.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2220      	movs	r2, #32
 8004814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e010      	b.n	8004846 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69da      	ldr	r2, [r3, #28]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4013      	ands	r3, r2
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	429a      	cmp	r2, r3
 8004832:	bf0c      	ite	eq
 8004834:	2301      	moveq	r3, #1
 8004836:	2300      	movne	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	461a      	mov	r2, r3
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	429a      	cmp	r2, r3
 8004840:	f43f af4a 	beq.w	80046d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3770      	adds	r7, #112	; 0x70
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <__libc_init_array>:
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	4d0d      	ldr	r5, [pc, #52]	; (8004888 <__libc_init_array+0x38>)
 8004854:	4c0d      	ldr	r4, [pc, #52]	; (800488c <__libc_init_array+0x3c>)
 8004856:	1b64      	subs	r4, r4, r5
 8004858:	10a4      	asrs	r4, r4, #2
 800485a:	2600      	movs	r6, #0
 800485c:	42a6      	cmp	r6, r4
 800485e:	d109      	bne.n	8004874 <__libc_init_array+0x24>
 8004860:	4d0b      	ldr	r5, [pc, #44]	; (8004890 <__libc_init_array+0x40>)
 8004862:	4c0c      	ldr	r4, [pc, #48]	; (8004894 <__libc_init_array+0x44>)
 8004864:	f000 f820 	bl	80048a8 <_init>
 8004868:	1b64      	subs	r4, r4, r5
 800486a:	10a4      	asrs	r4, r4, #2
 800486c:	2600      	movs	r6, #0
 800486e:	42a6      	cmp	r6, r4
 8004870:	d105      	bne.n	800487e <__libc_init_array+0x2e>
 8004872:	bd70      	pop	{r4, r5, r6, pc}
 8004874:	f855 3b04 	ldr.w	r3, [r5], #4
 8004878:	4798      	blx	r3
 800487a:	3601      	adds	r6, #1
 800487c:	e7ee      	b.n	800485c <__libc_init_array+0xc>
 800487e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004882:	4798      	blx	r3
 8004884:	3601      	adds	r6, #1
 8004886:	e7f2      	b.n	800486e <__libc_init_array+0x1e>
 8004888:	08004910 	.word	0x08004910
 800488c:	08004910 	.word	0x08004910
 8004890:	08004910 	.word	0x08004910
 8004894:	08004914 	.word	0x08004914

08004898 <memset>:
 8004898:	4402      	add	r2, r0
 800489a:	4603      	mov	r3, r0
 800489c:	4293      	cmp	r3, r2
 800489e:	d100      	bne.n	80048a2 <memset+0xa>
 80048a0:	4770      	bx	lr
 80048a2:	f803 1b01 	strb.w	r1, [r3], #1
 80048a6:	e7f9      	b.n	800489c <memset+0x4>

080048a8 <_init>:
 80048a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048aa:	bf00      	nop
 80048ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ae:	bc08      	pop	{r3}
 80048b0:	469e      	mov	lr, r3
 80048b2:	4770      	bx	lr

080048b4 <_fini>:
 80048b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b6:	bf00      	nop
 80048b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ba:	bc08      	pop	{r3}
 80048bc:	469e      	mov	lr, r3
 80048be:	4770      	bx	lr
