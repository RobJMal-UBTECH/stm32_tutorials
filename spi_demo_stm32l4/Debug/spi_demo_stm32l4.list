
spi_demo_stm32l4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003664  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080037ec  080037ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003834  08003834  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003834  08003834  00013834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800383c  0800383c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800383c  0800383c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08003850  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003850  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd28  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff3  00000000  00000000  0002fd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  00031d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a20  00000000  00000000  00032850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002706e  00000000  00000000  00033270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e09f  00000000  00000000  0005a2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec5ae  00000000  00000000  0006837d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015492b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b90  00000000  00000000  00154980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037d4 	.word	0x080037d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080037d4 	.word	0x080037d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d6:	4b2b      	ldr	r3, [pc, #172]	; (8000584 <MX_GPIO_Init+0xc4>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	4a2a      	ldr	r2, [pc, #168]	; (8000584 <MX_GPIO_Init+0xc4>)
 80004dc:	f043 0304 	orr.w	r3, r3, #4
 80004e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e2:	4b28      	ldr	r3, [pc, #160]	; (8000584 <MX_GPIO_Init+0xc4>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0304 	and.w	r3, r3, #4
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ee:	4b25      	ldr	r3, [pc, #148]	; (8000584 <MX_GPIO_Init+0xc4>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a24      	ldr	r2, [pc, #144]	; (8000584 <MX_GPIO_Init+0xc4>)
 80004f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b22      	ldr	r3, [pc, #136]	; (8000584 <MX_GPIO_Init+0xc4>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <MX_GPIO_Init+0xc4>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a1e      	ldr	r2, [pc, #120]	; (8000584 <MX_GPIO_Init+0xc4>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <MX_GPIO_Init+0xc4>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <MX_GPIO_Init+0xc4>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a18      	ldr	r2, [pc, #96]	; (8000584 <MX_GPIO_Init+0xc4>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b16      	ldr	r3, [pc, #88]	; (8000584 <MX_GPIO_Init+0xc4>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 7100 	mov.w	r1, #512	; 0x200
 800053c:	4812      	ldr	r0, [pc, #72]	; (8000588 <MX_GPIO_Init+0xc8>)
 800053e:	f000 fdfb 	bl	8001138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000548:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800054c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	480b      	ldr	r0, [pc, #44]	; (8000588 <MX_GPIO_Init+0xc8>)
 800055a:	f000 fc43 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800055e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000564:	2301      	movs	r3, #1
 8000566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056c:	2300      	movs	r3, #0
 800056e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4619      	mov	r1, r3
 8000576:	4804      	ldr	r0, [pc, #16]	; (8000588 <MX_GPIO_Init+0xc8>)
 8000578:	f000 fc34 	bl	8000de4 <HAL_GPIO_Init>

}
 800057c:	bf00      	nop
 800057e:	3728      	adds	r7, #40	; 0x28
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40021000 	.word	0x40021000
 8000588:	48000800 	.word	0x48000800

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b089      	sub	sp, #36	; 0x24
 8000590:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t led_buf_len = LED_START_FRAME_LEN + 4*NUMBER_OF_LEDS + LED_END_FRAME_LEN;
 8000592:	2304      	movs	r3, #4
 8000594:	b29a      	uxth	r2, r3
 8000596:	2302      	movs	r3, #2
 8000598:	b29b      	uxth	r3, r3
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	b29b      	uxth	r3, r3
 800059e:	4413      	add	r3, r2
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	2304      	movs	r3, #4
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	4413      	add	r3, r2
 80005a8:	82fb      	strh	r3, [r7, #22]
	uint8_t led_buf[led_buf_len];
 80005aa:	8afc      	ldrh	r4, [r7, #22]
 80005ac:	4623      	mov	r3, r4
 80005ae:	3b01      	subs	r3, #1
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	b2a0      	uxth	r0, r4
 80005b4:	f04f 0100 	mov.w	r1, #0
 80005b8:	f04f 0200 	mov.w	r2, #0
 80005bc:	f04f 0300 	mov.w	r3, #0
 80005c0:	00cb      	lsls	r3, r1, #3
 80005c2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80005c6:	00c2      	lsls	r2, r0, #3
 80005c8:	b2a0      	uxth	r0, r4
 80005ca:	f04f 0100 	mov.w	r1, #0
 80005ce:	f04f 0200 	mov.w	r2, #0
 80005d2:	f04f 0300 	mov.w	r3, #0
 80005d6:	00cb      	lsls	r3, r1, #3
 80005d8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80005dc:	00c2      	lsls	r2, r0, #3
 80005de:	4623      	mov	r3, r4
 80005e0:	3307      	adds	r3, #7
 80005e2:	08db      	lsrs	r3, r3, #3
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	ebad 0d03 	sub.w	sp, sp, r3
 80005ea:	ab02      	add	r3, sp, #8
 80005ec:	3300      	adds	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
	uint8_t* led_buf_ptr = led_buf;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	60bb      	str	r3, [r7, #8]

	PrepareLedBuf(led_buf_ptr);
 80005f4:	68b8      	ldr	r0, [r7, #8]
 80005f6:	f000 f87b 	bl	80006f0 <PrepareLedBuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fa91 	bl	8000b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f821 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f7ff ff5d 	bl	80004c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000606:	f000 f9d5 	bl	80009b4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800060a:	f000 f8f3 	bl	80007f4 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t red_level = 255;			// between [0, 255]
 800060e:	23ff      	movs	r3, #255	; 0xff
 8000610:	71fb      	strb	r3, [r7, #7]
  	uint8_t green_level = 16;			// between [0, 255]
 8000612:	2310      	movs	r3, #16
 8000614:	71bb      	strb	r3, [r7, #6]
  	uint8_t blue_level = 128;			// between [0, 255]
 8000616:	2380      	movs	r3, #128	; 0x80
 8000618:	717b      	strb	r3, [r7, #5]
  	uint8_t brightness_level = 2;	// between [0, 31]
 800061a:	2302      	movs	r3, #2
 800061c:	713b      	strb	r3, [r7, #4]

  	WriteToLedBuf(led_buf_ptr,
 800061e:	7978      	ldrb	r0, [r7, #5]
 8000620:	79ba      	ldrb	r2, [r7, #6]
 8000622:	79f9      	ldrb	r1, [r7, #7]
 8000624:	793b      	ldrb	r3, [r7, #4]
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	4603      	mov	r3, r0
 800062a:	68b8      	ldr	r0, [r7, #8]
 800062c:	f000 f894 	bl	8000758 <WriteToLedBuf>
  						green_level,
  						blue_level,
  						brightness_level);

  	// Send out LED information
  	HAL_SPI_Transmit(&hspi1, led_buf_ptr, sizeof(led_buf), 100);
 8000630:	2364      	movs	r3, #100	; 0x64
 8000632:	4622      	mov	r2, r4
 8000634:	68b9      	ldr	r1, [r7, #8]
 8000636:	4802      	ldr	r0, [pc, #8]	; (8000640 <main+0xb4>)
 8000638:	f002 f945 	bl	80028c6 <HAL_SPI_Transmit>

  while (1)
 800063c:	e7fe      	b.n	800063c <main+0xb0>
 800063e:	bf00      	nop
 8000640:	20000028 	.word	0x20000028

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b096      	sub	sp, #88	; 0x58
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	2244      	movs	r2, #68	; 0x44
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f003 f8b6 	bl	80037c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	463b      	mov	r3, r7
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000666:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066a:	f000 fd8b 	bl	8001184 <HAL_PWREx_ControlVoltageScaling>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000674:	f000 f837 	bl	80006e6 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000680:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000682:	2310      	movs	r3, #16
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068a:	2302      	movs	r3, #2
 800068c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800068e:	2301      	movs	r3, #1
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000692:	230a      	movs	r3, #10
 8000694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000696:	2307      	movs	r3, #7
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 fdc2 	bl	8001230 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006b2:	f000 f818 	bl	80006e6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2303      	movs	r3, #3
 80006bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ca:	463b      	mov	r3, r7
 80006cc:	2104      	movs	r1, #4
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f994 	bl	80019fc <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006da:	f000 f804 	bl	80006e6 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3758      	adds	r7, #88	; 0x58
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ea:	b672      	cpsid	i
}
 80006ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ee:	e7fe      	b.n	80006ee <Error_Handler+0x8>

080006f0 <PrepareLedBuf>:

/*
 * Prepares LED buffer.
 */
void PrepareLedBuf(uint8_t* led_buf_ptr)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	// Prepares the start frame
	for (int i = 0; i < LED_START_FRAME_LEN; i++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	e007      	b.n	800070e <PrepareLedBuf+0x1e>
	{
		led_buf_ptr[i] = 0x00;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LED_START_FRAME_LEN; i++)
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	3301      	adds	r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	2304      	movs	r3, #4
 8000710:	461a      	mov	r2, r3
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	4293      	cmp	r3, r2
 8000716:	dbf2      	blt.n	80006fe <PrepareLedBuf+0xe>
	}

	// Preparing the end frame
	for (int i = LED_START_FRAME_LEN + 4*NUMBER_OF_LEDS;
 8000718:	2304      	movs	r3, #4
 800071a:	461a      	mov	r2, r3
 800071c:	2302      	movs	r3, #2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4413      	add	r3, r2
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	e007      	b.n	8000736 <PrepareLedBuf+0x46>
			i < LED_START_FRAME_LEN + 4*NUMBER_OF_LEDS + LED_END_FRAME_LEN; i++)
	{
		led_buf_ptr[i] = 0x00;
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	4413      	add	r3, r2
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
			i < LED_START_FRAME_LEN + 4*NUMBER_OF_LEDS + LED_END_FRAME_LEN; i++)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	3301      	adds	r3, #1
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	2304      	movs	r3, #4
 8000738:	461a      	mov	r2, r3
 800073a:	2302      	movs	r3, #2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	2204      	movs	r2, #4
 8000742:	4413      	add	r3, r2
	for (int i = LED_START_FRAME_LEN + 4*NUMBER_OF_LEDS;
 8000744:	68ba      	ldr	r2, [r7, #8]
 8000746:	429a      	cmp	r2, r3
 8000748:	dbed      	blt.n	8000726 <PrepareLedBuf+0x36>
	}
}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <WriteToLedBuf>:
void WriteToLedBuf(uint8_t* led_buf_ptr,
					uint8_t red_level,
					uint8_t green_level,
					uint8_t blue_level,
					uint8_t brightness_level)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	4608      	mov	r0, r1
 8000762:	4611      	mov	r1, r2
 8000764:	461a      	mov	r2, r3
 8000766:	4603      	mov	r3, r0
 8000768:	70fb      	strb	r3, [r7, #3]
 800076a:	460b      	mov	r3, r1
 800076c:	70bb      	strb	r3, [r7, #2]
 800076e:	4613      	mov	r3, r2
 8000770:	707b      	strb	r3, [r7, #1]
	for (int i = 0; i < NUMBER_OF_LEDS; i++)
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e031      	b.n	80007dc <WriteToLedBuf+0x84>
	{
		led_buf_ptr[LED_START_FRAME_LEN*(i+1)] = (0b11100000 | brightness_level);	// brightness buffer
 8000778:	2304      	movs	r3, #4
 800077a:	461a      	mov	r2, r3
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3301      	adds	r3, #1
 8000780:	fb03 f302 	mul.w	r3, r3, r2
 8000784:	461a      	mov	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	7e3a      	ldrb	r2, [r7, #24]
 800078c:	f062 021f 	orn	r2, r2, #31
 8000790:	b2d2      	uxtb	r2, r2
 8000792:	701a      	strb	r2, [r3, #0]
		led_buf_ptr[LED_START_FRAME_LEN*(i+1) + 1] = blue_level;		// blue level
 8000794:	2304      	movs	r3, #4
 8000796:	461a      	mov	r2, r3
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3301      	adds	r3, #1
 800079c:	fb03 f302 	mul.w	r3, r3, r2
 80007a0:	3301      	adds	r3, #1
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	787a      	ldrb	r2, [r7, #1]
 80007a8:	701a      	strb	r2, [r3, #0]
		led_buf_ptr[LED_START_FRAME_LEN*(i+1) + 2] = green_level;		// green level
 80007aa:	2304      	movs	r3, #4
 80007ac:	461a      	mov	r2, r3
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3301      	adds	r3, #1
 80007b2:	fb03 f302 	mul.w	r3, r3, r2
 80007b6:	3302      	adds	r3, #2
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	4413      	add	r3, r2
 80007bc:	78ba      	ldrb	r2, [r7, #2]
 80007be:	701a      	strb	r2, [r3, #0]
		led_buf_ptr[LED_START_FRAME_LEN*(i+1) + 3] = red_level;			// red level
 80007c0:	2304      	movs	r3, #4
 80007c2:	461a      	mov	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	3301      	adds	r3, #1
 80007c8:	fb03 f302 	mul.w	r3, r3, r2
 80007cc:	3303      	adds	r3, #3
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	78fa      	ldrb	r2, [r7, #3]
 80007d4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUMBER_OF_LEDS; i++)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3301      	adds	r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	2302      	movs	r3, #2
 80007de:	461a      	mov	r2, r3
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4293      	cmp	r3, r2
 80007e4:	dbc8      	blt.n	8000778 <WriteToLedBuf+0x20>
	}
}
 80007e6:	bf00      	nop
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_SPI1_Init+0x74>)
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <MX_SPI1_Init+0x78>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_SPI1_Init+0x74>)
 8000800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_SPI1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_SPI1_Init+0x74>)
 800080e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000812:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_SPI1_Init+0x74>)
 8000816:	2202      	movs	r2, #2
 8000818:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_SPI1_Init+0x74>)
 800081c:	2201      	movs	r2, #1
 800081e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_SPI1_Init+0x74>)
 8000822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000826:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_SPI1_Init+0x74>)
 800082a:	2230      	movs	r2, #48	; 0x30
 800082c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_SPI1_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_SPI1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_SPI1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_SPI1_Init+0x74>)
 8000842:	2207      	movs	r2, #7
 8000844:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_SPI1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_SPI1_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_SPI1_Init+0x74>)
 8000854:	f001 ff94 	bl	8002780 <HAL_SPI_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800085e:	f7ff ff42 	bl	80006e6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000028 	.word	0x20000028
 800086c:	40013000 	.word	0x40013000

08000870 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a17      	ldr	r2, [pc, #92]	; (80008ec <HAL_SPI_MspInit+0x7c>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d128      	bne.n	80008e4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <HAL_SPI_MspInit+0x80>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000896:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <HAL_SPI_MspInit+0x80>)
 8000898:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800089c:	6613      	str	r3, [r2, #96]	; 0x60
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <HAL_SPI_MspInit+0x80>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <HAL_SPI_MspInit+0x80>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <HAL_SPI_MspInit+0x80>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <HAL_SPI_MspInit+0x80>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008c2:	23e0      	movs	r3, #224	; 0xe0
 80008c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008d2:	2305      	movs	r3, #5
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e0:	f000 fa80 	bl	8000de4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	; 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40013000 	.word	0x40013000
 80008f0:	40021000 	.word	0x40021000

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_MspInit+0x44>)
 80008fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <HAL_MspInit+0x44>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6613      	str	r3, [r2, #96]	; 0x60
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_MspInit+0x44>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_MspInit+0x44>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <HAL_MspInit+0x44>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091c:	6593      	str	r3, [r2, #88]	; 0x58
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_MspInit+0x44>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <NMI_Handler+0x4>

08000942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <HardFault_Handler+0x4>

08000948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <MemManage_Handler+0x4>

0800094e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <BusFault_Handler+0x4>

08000954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <UsageFault_Handler+0x4>

0800095a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000988:	f000 f926 	bl	8000bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}

08000990 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <SystemInit+0x20>)
 8000996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <SystemInit+0x20>)
 800099c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009ba:	4a15      	ldr	r2, [pc, #84]	; (8000a10 <MX_USART2_UART_Init+0x5c>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_USART2_UART_Init+0x58>)
 80009f8:	f002 fa38 	bl	8002e6c <HAL_UART_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a02:	f7ff fe70 	bl	80006e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000008c 	.word	0x2000008c
 8000a10:	40004400 	.word	0x40004400

08000a14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b0ac      	sub	sp, #176	; 0xb0
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2288      	movs	r2, #136	; 0x88
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f002 fec5 	bl	80037c4 <memset>
  if(uartHandle->Instance==USART2)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a21      	ldr	r2, [pc, #132]	; (8000ac4 <HAL_UART_MspInit+0xb0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d13b      	bne.n	8000abc <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 f9d9 	bl	8001e08 <HAL_RCCEx_PeriphCLKConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a5c:	f7ff fe43 	bl	80006e6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <HAL_UART_MspInit+0xb4>)
 8000a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a64:	4a18      	ldr	r2, [pc, #96]	; (8000ac8 <HAL_UART_MspInit+0xb4>)
 8000a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <HAL_UART_MspInit+0xb4>)
 8000a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <HAL_UART_MspInit+0xb4>)
 8000a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7c:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <HAL_UART_MspInit+0xb4>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_UART_MspInit+0xb4>)
 8000a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a90:	230c      	movs	r3, #12
 8000a92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab8:	f000 f994 	bl	8000de4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000abc:	bf00      	nop
 8000abe:	37b0      	adds	r7, #176	; 0xb0
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	40021000 	.word	0x40021000

08000acc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ad0:	f7ff ff5e 	bl	8000990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad4:	480c      	ldr	r0, [pc, #48]	; (8000b08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ad6:	490d      	ldr	r1, [pc, #52]	; (8000b0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <LoopForever+0xe>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000adc:	e002      	b.n	8000ae4 <LoopCopyDataInit>

08000ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae2:	3304      	adds	r3, #4

08000ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae8:	d3f9      	bcc.n	8000ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aec:	4c0a      	ldr	r4, [pc, #40]	; (8000b18 <LoopForever+0x16>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af0:	e001      	b.n	8000af6 <LoopFillZerobss>

08000af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af4:	3204      	adds	r2, #4

08000af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af8:	d3fb      	bcc.n	8000af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000afa:	f002 fe3f 	bl	800377c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000afe:	f7ff fd45 	bl	800058c <main>

08000b02 <LoopForever>:

LoopForever:
    b LoopForever
 8000b02:	e7fe      	b.n	8000b02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b10:	08003844 	.word	0x08003844
  ldr r2, =_sbss
 8000b14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b18:	20000114 	.word	0x20000114

08000b1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b1c:	e7fe      	b.n	8000b1c <ADC1_2_IRQHandler>
	...

08000b20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <HAL_Init+0x3c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <HAL_Init+0x3c>)
 8000b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b36:	2003      	movs	r0, #3
 8000b38:	f000 f920 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f000 f80f 	bl	8000b60 <HAL_InitTick>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	e001      	b.n	8000b52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b4e:	f7ff fed1 	bl	80008f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b52:	79fb      	ldrb	r3, [r7, #7]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40022000 	.word	0x40022000

08000b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <HAL_InitTick+0x6c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d023      	beq.n	8000bbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_InitTick+0x70>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <HAL_InitTick+0x6c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f91d 	bl	8000dca <HAL_SYSTICK_Config>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d10f      	bne.n	8000bb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d809      	bhi.n	8000bb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba4:	f000 f8f5 	bl	8000d92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_InitTick+0x74>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	e007      	b.n	8000bc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	73fb      	strb	r3, [r7, #15]
 8000bb4:	e004      	b.n	8000bc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	e001      	b.n	8000bc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000004 	.word	0x20000004

08000bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x20>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x24>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <HAL_IncTick+0x24>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000110 	.word	0x20000110

08000c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <HAL_GetTick+0x14>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000110 	.word	0x20000110

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d48:	d301      	bcc.n	8000d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00f      	b.n	8000d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <SysTick_Config+0x40>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d56:	210f      	movs	r1, #15
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d5c:	f7ff ff8e 	bl	8000c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <SysTick_Config+0x40>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SysTick_Config+0x40>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff47 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000da4:	f7ff ff5c 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000da8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff ff8e 	bl	8000cd0 <NVIC_EncodePriority>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff5d 	bl	8000c7c <__NVIC_SetPriority>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffb0 	bl	8000d38 <SysTick_Config>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df2:	e17f      	b.n	80010f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 8171 	beq.w	80010ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d005      	beq.n	8000e24 <HAL_GPIO_Init+0x40>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d130      	bne.n	8000e86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	f003 0201 	and.w	r2, r3, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d118      	bne.n	8000ec4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	08db      	lsrs	r3, r3, #3
 8000eae:	f003 0201 	and.w	r2, r3, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d017      	beq.n	8000f00 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d123      	bne.n	8000f54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	08da      	lsrs	r2, r3, #3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3208      	adds	r2, #8
 8000f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	220f      	movs	r2, #15
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	691a      	ldr	r2, [r3, #16]
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	08da      	lsrs	r2, r3, #3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3208      	adds	r2, #8
 8000f4e:	6939      	ldr	r1, [r7, #16]
 8000f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0203 	and.w	r2, r3, #3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 80ac 	beq.w	80010ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	4b5f      	ldr	r3, [pc, #380]	; (8001114 <HAL_GPIO_Init+0x330>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9a:	4a5e      	ldr	r2, [pc, #376]	; (8001114 <HAL_GPIO_Init+0x330>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa2:	4b5c      	ldr	r3, [pc, #368]	; (8001114 <HAL_GPIO_Init+0x330>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fae:	4a5a      	ldr	r2, [pc, #360]	; (8001118 <HAL_GPIO_Init+0x334>)
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	220f      	movs	r2, #15
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fd8:	d025      	beq.n	8001026 <HAL_GPIO_Init+0x242>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4f      	ldr	r2, [pc, #316]	; (800111c <HAL_GPIO_Init+0x338>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d01f      	beq.n	8001022 <HAL_GPIO_Init+0x23e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4e      	ldr	r2, [pc, #312]	; (8001120 <HAL_GPIO_Init+0x33c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d019      	beq.n	800101e <HAL_GPIO_Init+0x23a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4d      	ldr	r2, [pc, #308]	; (8001124 <HAL_GPIO_Init+0x340>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d013      	beq.n	800101a <HAL_GPIO_Init+0x236>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4c      	ldr	r2, [pc, #304]	; (8001128 <HAL_GPIO_Init+0x344>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d00d      	beq.n	8001016 <HAL_GPIO_Init+0x232>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4b      	ldr	r2, [pc, #300]	; (800112c <HAL_GPIO_Init+0x348>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d007      	beq.n	8001012 <HAL_GPIO_Init+0x22e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4a      	ldr	r2, [pc, #296]	; (8001130 <HAL_GPIO_Init+0x34c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d101      	bne.n	800100e <HAL_GPIO_Init+0x22a>
 800100a:	2306      	movs	r3, #6
 800100c:	e00c      	b.n	8001028 <HAL_GPIO_Init+0x244>
 800100e:	2307      	movs	r3, #7
 8001010:	e00a      	b.n	8001028 <HAL_GPIO_Init+0x244>
 8001012:	2305      	movs	r3, #5
 8001014:	e008      	b.n	8001028 <HAL_GPIO_Init+0x244>
 8001016:	2304      	movs	r3, #4
 8001018:	e006      	b.n	8001028 <HAL_GPIO_Init+0x244>
 800101a:	2303      	movs	r3, #3
 800101c:	e004      	b.n	8001028 <HAL_GPIO_Init+0x244>
 800101e:	2302      	movs	r3, #2
 8001020:	e002      	b.n	8001028 <HAL_GPIO_Init+0x244>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <HAL_GPIO_Init+0x244>
 8001026:	2300      	movs	r3, #0
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	f002 0203 	and.w	r2, r2, #3
 800102e:	0092      	lsls	r2, r2, #2
 8001030:	4093      	lsls	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001038:	4937      	ldr	r1, [pc, #220]	; (8001118 <HAL_GPIO_Init+0x334>)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	089b      	lsrs	r3, r3, #2
 800103e:	3302      	adds	r3, #2
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001046:	4b3b      	ldr	r3, [pc, #236]	; (8001134 <HAL_GPIO_Init+0x350>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800106a:	4a32      	ldr	r2, [pc, #200]	; (8001134 <HAL_GPIO_Init+0x350>)
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001070:	4b30      	ldr	r3, [pc, #192]	; (8001134 <HAL_GPIO_Init+0x350>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001094:	4a27      	ldr	r2, [pc, #156]	; (8001134 <HAL_GPIO_Init+0x350>)
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800109a:	4b26      	ldr	r3, [pc, #152]	; (8001134 <HAL_GPIO_Init+0x350>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010be:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <HAL_GPIO_Init+0x350>)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_GPIO_Init+0x350>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010e8:	4a12      	ldr	r2, [pc, #72]	; (8001134 <HAL_GPIO_Init+0x350>)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa22 f303 	lsr.w	r3, r2, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f47f ae78 	bne.w	8000df4 <HAL_GPIO_Init+0x10>
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	40010000 	.word	0x40010000
 800111c:	48000400 	.word	0x48000400
 8001120:	48000800 	.word	0x48000800
 8001124:	48000c00 	.word	0x48000c00
 8001128:	48001000 	.word	0x48001000
 800112c:	48001400 	.word	0x48001400
 8001130:	48001800 	.word	0x48001800
 8001134:	40010400 	.word	0x40010400

08001138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	807b      	strh	r3, [r7, #2]
 8001144:	4613      	mov	r3, r2
 8001146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001148:	787b      	ldrb	r3, [r7, #1]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800114e:	887a      	ldrh	r2, [r7, #2]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001154:	e002      	b.n	800115c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001156:	887a      	ldrh	r2, [r7, #2]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <HAL_PWREx_GetVoltageRange+0x18>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40007000 	.word	0x40007000

08001184 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001192:	d130      	bne.n	80011f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800119c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011a0:	d038      	beq.n	8001214 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011aa:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2232      	movs	r2, #50	; 0x32
 80011b8:	fb02 f303 	mul.w	r3, r2, r3
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011be:	fba2 2303 	umull	r2, r3, r2, r3
 80011c2:	0c9b      	lsrs	r3, r3, #18
 80011c4:	3301      	adds	r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c8:	e002      	b.n	80011d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011dc:	d102      	bne.n	80011e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f2      	bne.n	80011ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f0:	d110      	bne.n	8001214 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e00f      	b.n	8001216 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001202:	d007      	beq.n	8001214 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800120c:	4a05      	ldr	r2, [pc, #20]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001212:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40007000 	.word	0x40007000
 8001228:	20000000 	.word	0x20000000
 800122c:	431bde83 	.word	0x431bde83

08001230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e3d4      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001242:	4ba1      	ldr	r3, [pc, #644]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 030c 	and.w	r3, r3, #12
 800124a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800124c:	4b9e      	ldr	r3, [pc, #632]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80e4 	beq.w	800142c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <HAL_RCC_OscConfig+0x4a>
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b0c      	cmp	r3, #12
 800126e:	f040 808b 	bne.w	8001388 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	2b01      	cmp	r3, #1
 8001276:	f040 8087 	bne.w	8001388 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800127a:	4b93      	ldr	r3, [pc, #588]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <HAL_RCC_OscConfig+0x62>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e3ac      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a1a      	ldr	r2, [r3, #32]
 8001296:	4b8c      	ldr	r3, [pc, #560]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d004      	beq.n	80012ac <HAL_RCC_OscConfig+0x7c>
 80012a2:	4b89      	ldr	r3, [pc, #548]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012aa:	e005      	b.n	80012b8 <HAL_RCC_OscConfig+0x88>
 80012ac:	4b86      	ldr	r3, [pc, #536]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80012ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d223      	bcs.n	8001304 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fd41 	bl	8001d48 <RCC_SetFlashLatencyFromMSIRange>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e38d      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d0:	4b7d      	ldr	r3, [pc, #500]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a7c      	ldr	r2, [pc, #496]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80012d6:	f043 0308 	orr.w	r3, r3, #8
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b7a      	ldr	r3, [pc, #488]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	4977      	ldr	r1, [pc, #476]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ee:	4b76      	ldr	r3, [pc, #472]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	4972      	ldr	r1, [pc, #456]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	604b      	str	r3, [r1, #4]
 8001302:	e025      	b.n	8001350 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001304:	4b70      	ldr	r3, [pc, #448]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a6f      	ldr	r2, [pc, #444]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 800130a:	f043 0308 	orr.w	r3, r3, #8
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b6d      	ldr	r3, [pc, #436]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	496a      	ldr	r1, [pc, #424]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 800131e:	4313      	orrs	r3, r2
 8001320:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001322:	4b69      	ldr	r3, [pc, #420]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	4965      	ldr	r1, [pc, #404]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001332:	4313      	orrs	r3, r2
 8001334:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d109      	bne.n	8001350 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fd01 	bl	8001d48 <RCC_SetFlashLatencyFromMSIRange>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e34d      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001350:	f000 fc36 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8001354:	4602      	mov	r2, r0
 8001356:	4b5c      	ldr	r3, [pc, #368]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	f003 030f 	and.w	r3, r3, #15
 8001360:	495a      	ldr	r1, [pc, #360]	; (80014cc <HAL_RCC_OscConfig+0x29c>)
 8001362:	5ccb      	ldrb	r3, [r1, r3]
 8001364:	f003 031f 	and.w	r3, r3, #31
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	4a58      	ldr	r2, [pc, #352]	; (80014d0 <HAL_RCC_OscConfig+0x2a0>)
 800136e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001370:	4b58      	ldr	r3, [pc, #352]	; (80014d4 <HAL_RCC_OscConfig+0x2a4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fbf3 	bl	8000b60 <HAL_InitTick>
 800137a:	4603      	mov	r3, r0
 800137c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d052      	beq.n	800142a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	e331      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d032      	beq.n	80013f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001390:	4b4d      	ldr	r3, [pc, #308]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a4c      	ldr	r2, [pc, #304]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800139c:	f7ff fc30 	bl	8000c00 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013a4:	f7ff fc2c 	bl	8000c00 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e31a      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b6:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a40      	ldr	r2, [pc, #256]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4b3e      	ldr	r3, [pc, #248]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	493b      	ldr	r1, [pc, #236]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e0:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	4936      	ldr	r1, [pc, #216]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
 80013f4:	e01a      	b.n	800142c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013f6:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a33      	ldr	r2, [pc, #204]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001402:	f7ff fbfd 	bl	8000c00 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800140a:	f7ff fbf9 	bl	8000c00 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e2e7      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800141c:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f0      	bne.n	800140a <HAL_RCC_OscConfig+0x1da>
 8001428:	e000      	b.n	800142c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800142a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d074      	beq.n	8001522 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b08      	cmp	r3, #8
 800143c:	d005      	beq.n	800144a <HAL_RCC_OscConfig+0x21a>
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b0c      	cmp	r3, #12
 8001442:	d10e      	bne.n	8001462 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2b03      	cmp	r3, #3
 8001448:	d10b      	bne.n	8001462 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144a:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d064      	beq.n	8001520 <HAL_RCC_OscConfig+0x2f0>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d160      	bne.n	8001520 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e2c4      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146a:	d106      	bne.n	800147a <HAL_RCC_OscConfig+0x24a>
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a15      	ldr	r2, [pc, #84]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	e01d      	b.n	80014b6 <HAL_RCC_OscConfig+0x286>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001482:	d10c      	bne.n	800149e <HAL_RCC_OscConfig+0x26e>
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 800148a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 8001496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	e00b      	b.n	80014b6 <HAL_RCC_OscConfig+0x286>
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a09      	ldr	r2, [pc, #36]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80014a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <HAL_RCC_OscConfig+0x298>)
 80014b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d01c      	beq.n	80014f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014be:	f7ff fb9f 	bl	8000c00 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c4:	e011      	b.n	80014ea <HAL_RCC_OscConfig+0x2ba>
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	080037ec 	.word	0x080037ec
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fb92 	bl	8000c00 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	; 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e280      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ea:	4baf      	ldr	r3, [pc, #700]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x2a8>
 80014f6:	e014      	b.n	8001522 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb82 	bl	8000c00 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fb7e 	bl	8000c00 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e26c      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001512:	4ba5      	ldr	r3, [pc, #660]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0x2d0>
 800151e:	e000      	b.n	8001522 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d060      	beq.n	80015f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2b04      	cmp	r3, #4
 8001532:	d005      	beq.n	8001540 <HAL_RCC_OscConfig+0x310>
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	2b0c      	cmp	r3, #12
 8001538:	d119      	bne.n	800156e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d116      	bne.n	800156e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001540:	4b99      	ldr	r3, [pc, #612]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_RCC_OscConfig+0x328>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e249      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001558:	4b93      	ldr	r3, [pc, #588]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	061b      	lsls	r3, r3, #24
 8001566:	4990      	ldr	r1, [pc, #576]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800156c:	e040      	b.n	80015f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d023      	beq.n	80015be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001576:	4b8c      	ldr	r3, [pc, #560]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a8b      	ldr	r2, [pc, #556]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001582:	f7ff fb3d 	bl	8000c00 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158a:	f7ff fb39 	bl	8000c00 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e227      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800159c:	4b82      	ldr	r3, [pc, #520]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a8:	4b7f      	ldr	r3, [pc, #508]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	061b      	lsls	r3, r3, #24
 80015b6:	497c      	ldr	r1, [pc, #496]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
 80015bc:	e018      	b.n	80015f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015be:	4b7a      	ldr	r3, [pc, #488]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a79      	ldr	r2, [pc, #484]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 80015c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ca:	f7ff fb19 	bl	8000c00 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d2:	f7ff fb15 	bl	8000c00 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e203      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e4:	4b70      	ldr	r3, [pc, #448]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d03c      	beq.n	8001676 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d01c      	beq.n	800163e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001604:	4b68      	ldr	r3, [pc, #416]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160a:	4a67      	ldr	r2, [pc, #412]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001614:	f7ff faf4 	bl	8000c00 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161c:	f7ff faf0 	bl	8000c00 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e1de      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162e:	4b5e      	ldr	r3, [pc, #376]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0ef      	beq.n	800161c <HAL_RCC_OscConfig+0x3ec>
 800163c:	e01b      	b.n	8001676 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163e:	4b5a      	ldr	r3, [pc, #360]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001644:	4a58      	ldr	r2, [pc, #352]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001646:	f023 0301 	bic.w	r3, r3, #1
 800164a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164e:	f7ff fad7 	bl	8000c00 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001656:	f7ff fad3 	bl	8000c00 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e1c1      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001668:	4b4f      	ldr	r3, [pc, #316]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800166a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1ef      	bne.n	8001656 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 80a6 	beq.w	80017d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001688:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10d      	bne.n	80016b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001694:	4b44      	ldr	r3, [pc, #272]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	4a43      	ldr	r2, [pc, #268]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800169a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169e:	6593      	str	r3, [r2, #88]	; 0x58
 80016a0:	4b41      	ldr	r3, [pc, #260]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 80016a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ac:	2301      	movs	r3, #1
 80016ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b0:	4b3e      	ldr	r3, [pc, #248]	; (80017ac <HAL_RCC_OscConfig+0x57c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d118      	bne.n	80016ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016bc:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <HAL_RCC_OscConfig+0x57c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a3a      	ldr	r2, [pc, #232]	; (80017ac <HAL_RCC_OscConfig+0x57c>)
 80016c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c8:	f7ff fa9a 	bl	8000c00 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d0:	f7ff fa96 	bl	8000c00 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e184      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e2:	4b32      	ldr	r3, [pc, #200]	; (80017ac <HAL_RCC_OscConfig+0x57c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d108      	bne.n	8001708 <HAL_RCC_OscConfig+0x4d8>
 80016f6:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 80016f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fc:	4a2a      	ldr	r2, [pc, #168]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001706:	e024      	b.n	8001752 <HAL_RCC_OscConfig+0x522>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b05      	cmp	r3, #5
 800170e:	d110      	bne.n	8001732 <HAL_RCC_OscConfig+0x502>
 8001710:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001716:	4a24      	ldr	r2, [pc, #144]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001720:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001726:	4a20      	ldr	r2, [pc, #128]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001730:	e00f      	b.n	8001752 <HAL_RCC_OscConfig+0x522>
 8001732:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001738:	4a1b      	ldr	r2, [pc, #108]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 8001744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001748:	4a17      	ldr	r2, [pc, #92]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800174a:	f023 0304 	bic.w	r3, r3, #4
 800174e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d016      	beq.n	8001788 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175a:	f7ff fa51 	bl	8000c00 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001760:	e00a      	b.n	8001778 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001762:	f7ff fa4d 	bl	8000c00 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e139      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_RCC_OscConfig+0x578>)
 800177a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0ed      	beq.n	8001762 <HAL_RCC_OscConfig+0x532>
 8001786:	e01a      	b.n	80017be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001788:	f7ff fa3a 	bl	8000c00 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800178e:	e00f      	b.n	80017b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001790:	f7ff fa36 	bl	8000c00 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	; 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d906      	bls.n	80017b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e122      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017b0:	4b90      	ldr	r3, [pc, #576]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80017b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1e8      	bne.n	8001790 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017be:	7ffb      	ldrb	r3, [r7, #31]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d105      	bne.n	80017d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c4:	4b8b      	ldr	r3, [pc, #556]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80017c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c8:	4a8a      	ldr	r2, [pc, #552]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80017ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 8108 	beq.w	80019ea <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	2b02      	cmp	r3, #2
 80017e0:	f040 80d0 	bne.w	8001984 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017e4:	4b83      	ldr	r3, [pc, #524]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 0203 	and.w	r2, r3, #3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d130      	bne.n	800185a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	3b01      	subs	r3, #1
 8001804:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d127      	bne.n	800185a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001814:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d11f      	bne.n	800185a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001824:	2a07      	cmp	r2, #7
 8001826:	bf14      	ite	ne
 8001828:	2201      	movne	r2, #1
 800182a:	2200      	moveq	r2, #0
 800182c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800182e:	4293      	cmp	r3, r2
 8001830:	d113      	bne.n	800185a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183c:	085b      	lsrs	r3, r3, #1
 800183e:	3b01      	subs	r3, #1
 8001840:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d109      	bne.n	800185a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	085b      	lsrs	r3, r3, #1
 8001852:	3b01      	subs	r3, #1
 8001854:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001856:	429a      	cmp	r2, r3
 8001858:	d06e      	beq.n	8001938 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	2b0c      	cmp	r3, #12
 800185e:	d069      	beq.n	8001934 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001860:	4b64      	ldr	r3, [pc, #400]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d105      	bne.n	8001878 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800186c:	4b61      	ldr	r3, [pc, #388]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0b7      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800187c:	4b5d      	ldr	r3, [pc, #372]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a5c      	ldr	r2, [pc, #368]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001886:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001888:	f7ff f9ba 	bl	8000c00 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff f9b6 	bl	8000c00 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e0a4      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a2:	4b54      	ldr	r3, [pc, #336]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ae:	4b51      	ldr	r3, [pc, #324]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	4b51      	ldr	r3, [pc, #324]	; (80019f8 <HAL_RCC_OscConfig+0x7c8>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018be:	3a01      	subs	r2, #1
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	4311      	orrs	r1, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018c8:	0212      	lsls	r2, r2, #8
 80018ca:	4311      	orrs	r1, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018d0:	0852      	lsrs	r2, r2, #1
 80018d2:	3a01      	subs	r2, #1
 80018d4:	0552      	lsls	r2, r2, #21
 80018d6:	4311      	orrs	r1, r2
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018dc:	0852      	lsrs	r2, r2, #1
 80018de:	3a01      	subs	r2, #1
 80018e0:	0652      	lsls	r2, r2, #25
 80018e2:	4311      	orrs	r1, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018e8:	0912      	lsrs	r2, r2, #4
 80018ea:	0452      	lsls	r2, r2, #17
 80018ec:	430a      	orrs	r2, r1
 80018ee:	4941      	ldr	r1, [pc, #260]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018f4:	4b3f      	ldr	r3, [pc, #252]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a3e      	ldr	r2, [pc, #248]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80018fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001900:	4b3c      	ldr	r3, [pc, #240]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4a3b      	ldr	r2, [pc, #236]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800190a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800190c:	f7ff f978 	bl	8000c00 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff f974 	bl	8000c00 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e062      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001926:	4b33      	ldr	r3, [pc, #204]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001932:	e05a      	b.n	80019ea <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e059      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001938:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d152      	bne.n	80019ea <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001944:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a2a      	ldr	r2, [pc, #168]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 800194a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800194e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001950:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4a27      	ldr	r2, [pc, #156]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800195a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800195c:	f7ff f950 	bl	8000c00 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001964:	f7ff f94c 	bl	8000c00 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e03a      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001976:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0x734>
 8001982:	e032      	b.n	80019ea <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d02d      	beq.n	80019e6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198a:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a19      	ldr	r2, [pc, #100]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001990:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001994:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d105      	bne.n	80019ae <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80019a8:	f023 0303 	bic.w	r3, r3, #3
 80019ac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	4a10      	ldr	r2, [pc, #64]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80019b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80019b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019be:	f7ff f91f 	bl	8000c00 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff f91b 	bl	8000c00 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e009      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_RCC_OscConfig+0x7c4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f0      	bne.n	80019c6 <HAL_RCC_OscConfig+0x796>
 80019e4:	e001      	b.n	80019ea <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000
 80019f8:	f99d808c 	.word	0xf99d808c

080019fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0c8      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a10:	4b66      	ldr	r3, [pc, #408]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d910      	bls.n	8001a40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	4b63      	ldr	r3, [pc, #396]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 0207 	bic.w	r2, r3, #7
 8001a26:	4961      	ldr	r1, [pc, #388]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	4b5f      	ldr	r3, [pc, #380]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0b0      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d04c      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d107      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a54:	4b56      	ldr	r3, [pc, #344]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d121      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e09e      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d107      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a6c:	4b50      	ldr	r3, [pc, #320]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d115      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e092      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a84:	4b4a      	ldr	r3, [pc, #296]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d109      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e086      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a94:	4b46      	ldr	r3, [pc, #280]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e07e      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aa4:	4b42      	ldr	r3, [pc, #264]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f023 0203 	bic.w	r2, r3, #3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	493f      	ldr	r1, [pc, #252]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ab6:	f7ff f8a3 	bl	8000c00 <HAL_GetTick>
 8001aba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abe:	f7ff f89f 	bl	8000c00 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e066      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad4:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 020c 	and.w	r2, r3, #12
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d1eb      	bne.n	8001abe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d008      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af2:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	492c      	ldr	r1, [pc, #176]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b04:	4b29      	ldr	r3, [pc, #164]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d210      	bcs.n	8001b34 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 0207 	bic.w	r2, r3, #7
 8001b1a:	4924      	ldr	r1, [pc, #144]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b22:	4b22      	ldr	r3, [pc, #136]	; (8001bac <HAL_RCC_ClockConfig+0x1b0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e036      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d008      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	4918      	ldr	r1, [pc, #96]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d009      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4910      	ldr	r1, [pc, #64]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b72:	f000 f825 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8001b76:	4602      	mov	r2, r0
 8001b78:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	091b      	lsrs	r3, r3, #4
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	5ccb      	ldrb	r3, [r1, r3]
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe ffe2 	bl	8000b60 <HAL_InitTick>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ba0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40022000 	.word	0x40022000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	080037ec 	.word	0x080037ec
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	; 0x24
 8001bc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bce:	4b3e      	ldr	r3, [pc, #248]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bd8:	4b3b      	ldr	r3, [pc, #236]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	d121      	bne.n	8001c32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d11e      	bne.n	8001c32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bf4:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d107      	bne.n	8001c10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c00:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	e005      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c10:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c1c:	4a2b      	ldr	r2, [pc, #172]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10d      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d102      	bne.n	8001c3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	e004      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c44:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d134      	bne.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d003      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d003      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0xac>
 8001c64:	e005      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c68:	617b      	str	r3, [r7, #20]
      break;
 8001c6a:	e005      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c6e:	617b      	str	r3, [r7, #20]
      break;
 8001c70:	e002      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	617b      	str	r3, [r7, #20]
      break;
 8001c76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	3301      	adds	r3, #1
 8001c84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	fb02 f203 	mul.w	r2, r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	0e5b      	lsrs	r3, r3, #25
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	3301      	adds	r3, #1
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cb8:	69bb      	ldr	r3, [r7, #24]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	08003804 	.word	0x08003804
 8001cd0:	00f42400 	.word	0x00f42400
 8001cd4:	007a1200 	.word	0x007a1200

08001cd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_RCC_GetHCLKFreq+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000000 	.word	0x20000000

08001cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cf4:	f7ff fff0 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	0a1b      	lsrs	r3, r3, #8
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	4904      	ldr	r1, [pc, #16]	; (8001d18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d06:	5ccb      	ldrb	r3, [r1, r3]
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40021000 	.word	0x40021000
 8001d18:	080037fc 	.word	0x080037fc

08001d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d20:	f7ff ffda 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	0adb      	lsrs	r3, r3, #11
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	4904      	ldr	r1, [pc, #16]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d32:	5ccb      	ldrb	r3, [r1, r3]
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000
 8001d44:	080037fc 	.word	0x080037fc

08001d48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d50:	2300      	movs	r3, #0
 8001d52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d54:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d60:	f7ff fa02 	bl	8001168 <HAL_PWREx_GetVoltageRange>
 8001d64:	6178      	str	r0, [r7, #20]
 8001d66:	e014      	b.n	8001d92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d68:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6c:	4a24      	ldr	r2, [pc, #144]	; (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d72:	6593      	str	r3, [r2, #88]	; 0x58
 8001d74:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d80:	f7ff f9f2 	bl	8001168 <HAL_PWREx_GetVoltageRange>
 8001d84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d86:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d98:	d10b      	bne.n	8001db2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b80      	cmp	r3, #128	; 0x80
 8001d9e:	d919      	bls.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2ba0      	cmp	r3, #160	; 0xa0
 8001da4:	d902      	bls.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001da6:	2302      	movs	r3, #2
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	e013      	b.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dac:	2301      	movs	r3, #1
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	e010      	b.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b80      	cmp	r3, #128	; 0x80
 8001db6:	d902      	bls.n	8001dbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001db8:	2303      	movs	r3, #3
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	e00a      	b.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b80      	cmp	r3, #128	; 0x80
 8001dc2:	d102      	bne.n	8001dca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	e004      	b.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b70      	cmp	r3, #112	; 0x70
 8001dce:	d101      	bne.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f023 0207 	bic.w	r2, r3, #7
 8001ddc:	4909      	ldr	r1, [pc, #36]	; (8001e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d001      	beq.n	8001df6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40022000 	.word	0x40022000

08001e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e10:	2300      	movs	r3, #0
 8001e12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e14:	2300      	movs	r3, #0
 8001e16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d041      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e2c:	d02a      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e32:	d824      	bhi.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e38:	d008      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e3e:	d81e      	bhi.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00a      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e48:	d010      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e4a:	e018      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e4c:	4b86      	ldr	r3, [pc, #536]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	4a85      	ldr	r2, [pc, #532]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e58:	e015      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 fabb 	bl	80023dc <RCCEx_PLLSAI1_Config>
 8001e66:	4603      	mov	r3, r0
 8001e68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e6a:	e00c      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3320      	adds	r3, #32
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 fba6 	bl	80025c4 <RCCEx_PLLSAI2_Config>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e7c:	e003      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	74fb      	strb	r3, [r7, #19]
      break;
 8001e82:	e000      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e86:	7cfb      	ldrb	r3, [r7, #19]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10b      	bne.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e8c:	4b76      	ldr	r3, [pc, #472]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e9a:	4973      	ldr	r1, [pc, #460]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ea2:	e001      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ea4:	7cfb      	ldrb	r3, [r7, #19]
 8001ea6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d041      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001eb8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ebc:	d02a      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ebe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ec2:	d824      	bhi.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ec4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ec8:	d008      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001eca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ece:	d81e      	bhi.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00a      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed8:	d010      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001eda:	e018      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001edc:	4b62      	ldr	r3, [pc, #392]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	4a61      	ldr	r2, [pc, #388]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ee8:	e015      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3304      	adds	r3, #4
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 fa73 	bl	80023dc <RCCEx_PLLSAI1_Config>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001efa:	e00c      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3320      	adds	r3, #32
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fb5e 	bl	80025c4 <RCCEx_PLLSAI2_Config>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f0c:	e003      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	74fb      	strb	r3, [r7, #19]
      break;
 8001f12:	e000      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f16:	7cfb      	ldrb	r3, [r7, #19]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10b      	bne.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f1c:	4b52      	ldr	r3, [pc, #328]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f22:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f2a:	494f      	ldr	r1, [pc, #316]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f32:	e001      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f34:	7cfb      	ldrb	r3, [r7, #19]
 8001f36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80a0 	beq.w	8002086 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f4a:	4b47      	ldr	r3, [pc, #284]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00d      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f60:	4b41      	ldr	r3, [pc, #260]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	4a40      	ldr	r2, [pc, #256]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f6c:	4b3e      	ldr	r3, [pc, #248]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f7c:	4b3b      	ldr	r3, [pc, #236]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a3a      	ldr	r2, [pc, #232]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f88:	f7fe fe3a 	bl	8000c00 <HAL_GetTick>
 8001f8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f8e:	e009      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f90:	f7fe fe36 	bl	8000c00 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d902      	bls.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	74fb      	strb	r3, [r7, #19]
        break;
 8001fa2:	e005      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fa4:	4b31      	ldr	r3, [pc, #196]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0ef      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001fb0:	7cfb      	ldrb	r3, [r7, #19]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d15c      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fb6:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fc0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01f      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d019      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fd4:	4b24      	ldr	r3, [pc, #144]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fe0:	4b21      	ldr	r3, [pc, #132]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe6:	4a20      	ldr	r2, [pc, #128]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff6:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002000:	4a19      	ldr	r2, [pc, #100]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d016      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002012:	f7fe fdf5 	bl	8000c00 <HAL_GetTick>
 8002016:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002018:	e00b      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201a:	f7fe fdf1 	bl	8000c00 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	f241 3288 	movw	r2, #5000	; 0x1388
 8002028:	4293      	cmp	r3, r2
 800202a:	d902      	bls.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	74fb      	strb	r3, [r7, #19]
            break;
 8002030:	e006      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0ec      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002040:	7cfb      	ldrb	r3, [r7, #19]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10c      	bne.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002046:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002056:	4904      	ldr	r1, [pc, #16]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800205e:	e009      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	74bb      	strb	r3, [r7, #18]
 8002064:	e006      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002070:	7cfb      	ldrb	r3, [r7, #19]
 8002072:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002074:	7c7b      	ldrb	r3, [r7, #17]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d105      	bne.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207a:	4b9e      	ldr	r3, [pc, #632]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	4a9d      	ldr	r2, [pc, #628]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002084:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002092:	4b98      	ldr	r3, [pc, #608]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002098:	f023 0203 	bic.w	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a0:	4994      	ldr	r1, [pc, #592]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00a      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020b4:	4b8f      	ldr	r3, [pc, #572]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ba:	f023 020c 	bic.w	r2, r3, #12
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c2:	498c      	ldr	r1, [pc, #560]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00a      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020d6:	4b87      	ldr	r3, [pc, #540]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	4983      	ldr	r1, [pc, #524]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00a      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020f8:	4b7e      	ldr	r3, [pc, #504]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	497b      	ldr	r1, [pc, #492]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800211a:	4b76      	ldr	r3, [pc, #472]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002128:	4972      	ldr	r1, [pc, #456]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0320 	and.w	r3, r3, #32
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00a      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800213c:	4b6d      	ldr	r3, [pc, #436]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	496a      	ldr	r1, [pc, #424]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00a      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800215e:	4b65      	ldr	r3, [pc, #404]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002164:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	4961      	ldr	r1, [pc, #388]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002180:	4b5c      	ldr	r3, [pc, #368]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218e:	4959      	ldr	r1, [pc, #356]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021a2:	4b54      	ldr	r3, [pc, #336]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b0:	4950      	ldr	r1, [pc, #320]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021c4:	4b4b      	ldr	r3, [pc, #300]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d2:	4948      	ldr	r1, [pc, #288]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021e6:	4b43      	ldr	r3, [pc, #268]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f4:	493f      	ldr	r1, [pc, #252]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d028      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002208:	4b3a      	ldr	r3, [pc, #232]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002216:	4937      	ldr	r1, [pc, #220]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002222:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002226:	d106      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002228:	4b32      	ldr	r3, [pc, #200]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4a31      	ldr	r2, [pc, #196]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002232:	60d3      	str	r3, [r2, #12]
 8002234:	e011      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800223a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800223e:	d10c      	bne.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3304      	adds	r3, #4
 8002244:	2101      	movs	r1, #1
 8002246:	4618      	mov	r0, r3
 8002248:	f000 f8c8 	bl	80023dc <RCCEx_PLLSAI1_Config>
 800224c:	4603      	mov	r3, r0
 800224e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002250:	7cfb      	ldrb	r3, [r7, #19]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002256:	7cfb      	ldrb	r3, [r7, #19]
 8002258:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d028      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002266:	4b23      	ldr	r3, [pc, #140]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002274:	491f      	ldr	r1, [pc, #124]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002284:	d106      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002286:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	4a1a      	ldr	r2, [pc, #104]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002290:	60d3      	str	r3, [r2, #12]
 8002292:	e011      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800229c:	d10c      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3304      	adds	r3, #4
 80022a2:	2101      	movs	r1, #1
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 f899 	bl	80023dc <RCCEx_PLLSAI1_Config>
 80022aa:	4603      	mov	r3, r0
 80022ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022b4:	7cfb      	ldrb	r3, [r7, #19]
 80022b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d02b      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d2:	4908      	ldr	r1, [pc, #32]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022e2:	d109      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e4:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4a02      	ldr	r2, [pc, #8]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ee:	60d3      	str	r3, [r2, #12]
 80022f0:	e014      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002300:	d10c      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3304      	adds	r3, #4
 8002306:	2101      	movs	r1, #1
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f867 	bl	80023dc <RCCEx_PLLSAI1_Config>
 800230e:	4603      	mov	r3, r0
 8002310:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002312:	7cfb      	ldrb	r3, [r7, #19]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002318:	7cfb      	ldrb	r3, [r7, #19]
 800231a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d02f      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002328:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002336:	4928      	ldr	r1, [pc, #160]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002346:	d10d      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3304      	adds	r3, #4
 800234c:	2102      	movs	r1, #2
 800234e:	4618      	mov	r0, r3
 8002350:	f000 f844 	bl	80023dc <RCCEx_PLLSAI1_Config>
 8002354:	4603      	mov	r3, r0
 8002356:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d014      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800235e:	7cfb      	ldrb	r3, [r7, #19]
 8002360:	74bb      	strb	r3, [r7, #18]
 8002362:	e011      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800236c:	d10c      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3320      	adds	r3, #32
 8002372:	2102      	movs	r1, #2
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f925 	bl	80025c4 <RCCEx_PLLSAI2_Config>
 800237a:	4603      	mov	r3, r0
 800237c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800237e:	7cfb      	ldrb	r3, [r7, #19]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002394:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023a2:	490d      	ldr	r1, [pc, #52]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00b      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023c6:	4904      	ldr	r1, [pc, #16]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000

080023dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023ea:	4b75      	ldr	r3, [pc, #468]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d018      	beq.n	8002428 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023f6:	4b72      	ldr	r3, [pc, #456]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f003 0203 	and.w	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d10d      	bne.n	8002422 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
       ||
 800240a:	2b00      	cmp	r3, #0
 800240c:	d009      	beq.n	8002422 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800240e:	4b6c      	ldr	r3, [pc, #432]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	091b      	lsrs	r3, r3, #4
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
       ||
 800241e:	429a      	cmp	r2, r3
 8002420:	d047      	beq.n	80024b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
 8002426:	e044      	b.n	80024b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d018      	beq.n	8002462 <RCCEx_PLLSAI1_Config+0x86>
 8002430:	2b03      	cmp	r3, #3
 8002432:	d825      	bhi.n	8002480 <RCCEx_PLLSAI1_Config+0xa4>
 8002434:	2b01      	cmp	r3, #1
 8002436:	d002      	beq.n	800243e <RCCEx_PLLSAI1_Config+0x62>
 8002438:	2b02      	cmp	r3, #2
 800243a:	d009      	beq.n	8002450 <RCCEx_PLLSAI1_Config+0x74>
 800243c:	e020      	b.n	8002480 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800243e:	4b60      	ldr	r3, [pc, #384]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d11d      	bne.n	8002486 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800244e:	e01a      	b.n	8002486 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002450:	4b5b      	ldr	r3, [pc, #364]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002458:	2b00      	cmp	r3, #0
 800245a:	d116      	bne.n	800248a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002460:	e013      	b.n	800248a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002462:	4b57      	ldr	r3, [pc, #348]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10f      	bne.n	800248e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800246e:	4b54      	ldr	r3, [pc, #336]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800247e:	e006      	b.n	800248e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
      break;
 8002484:	e004      	b.n	8002490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002486:	bf00      	nop
 8002488:	e002      	b.n	8002490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800248a:	bf00      	nop
 800248c:	e000      	b.n	8002490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800248e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10d      	bne.n	80024b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002496:	4b4a      	ldr	r3, [pc, #296]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6819      	ldr	r1, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	430b      	orrs	r3, r1
 80024ac:	4944      	ldr	r1, [pc, #272]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d17d      	bne.n	80025b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024b8:	4b41      	ldr	r3, [pc, #260]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a40      	ldr	r2, [pc, #256]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c4:	f7fe fb9c 	bl	8000c00 <HAL_GetTick>
 80024c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024ca:	e009      	b.n	80024e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024cc:	f7fe fb98 	bl	8000c00 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d902      	bls.n	80024e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	73fb      	strb	r3, [r7, #15]
        break;
 80024de:	e005      	b.n	80024ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024e0:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1ef      	bne.n	80024cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d160      	bne.n	80025b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d111      	bne.n	800251c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024f8:	4b31      	ldr	r3, [pc, #196]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6892      	ldr	r2, [r2, #8]
 8002508:	0211      	lsls	r1, r2, #8
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68d2      	ldr	r2, [r2, #12]
 800250e:	0912      	lsrs	r2, r2, #4
 8002510:	0452      	lsls	r2, r2, #17
 8002512:	430a      	orrs	r2, r1
 8002514:	492a      	ldr	r1, [pc, #168]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002516:	4313      	orrs	r3, r2
 8002518:	610b      	str	r3, [r1, #16]
 800251a:	e027      	b.n	800256c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d112      	bne.n	8002548 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002522:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800252a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6892      	ldr	r2, [r2, #8]
 8002532:	0211      	lsls	r1, r2, #8
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6912      	ldr	r2, [r2, #16]
 8002538:	0852      	lsrs	r2, r2, #1
 800253a:	3a01      	subs	r2, #1
 800253c:	0552      	lsls	r2, r2, #21
 800253e:	430a      	orrs	r2, r1
 8002540:	491f      	ldr	r1, [pc, #124]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002542:	4313      	orrs	r3, r2
 8002544:	610b      	str	r3, [r1, #16]
 8002546:	e011      	b.n	800256c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002548:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002550:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6892      	ldr	r2, [r2, #8]
 8002558:	0211      	lsls	r1, r2, #8
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6952      	ldr	r2, [r2, #20]
 800255e:	0852      	lsrs	r2, r2, #1
 8002560:	3a01      	subs	r2, #1
 8002562:	0652      	lsls	r2, r2, #25
 8002564:	430a      	orrs	r2, r1
 8002566:	4916      	ldr	r1, [pc, #88]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002568:	4313      	orrs	r3, r2
 800256a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a13      	ldr	r2, [pc, #76]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002572:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002576:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002578:	f7fe fb42 	bl	8000c00 <HAL_GetTick>
 800257c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800257e:	e009      	b.n	8002594 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002580:	f7fe fb3e 	bl	8000c00 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d902      	bls.n	8002594 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	73fb      	strb	r3, [r7, #15]
          break;
 8002592:	e005      	b.n	80025a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ef      	beq.n	8002580 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	4904      	ldr	r1, [pc, #16]	; (80025c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000

080025c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025d2:	4b6a      	ldr	r3, [pc, #424]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d018      	beq.n	8002610 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025de:	4b67      	ldr	r3, [pc, #412]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f003 0203 	and.w	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d10d      	bne.n	800260a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
       ||
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025f6:	4b61      	ldr	r3, [pc, #388]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	091b      	lsrs	r3, r3, #4
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
       ||
 8002606:	429a      	cmp	r2, r3
 8002608:	d047      	beq.n	800269a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
 800260e:	e044      	b.n	800269a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b03      	cmp	r3, #3
 8002616:	d018      	beq.n	800264a <RCCEx_PLLSAI2_Config+0x86>
 8002618:	2b03      	cmp	r3, #3
 800261a:	d825      	bhi.n	8002668 <RCCEx_PLLSAI2_Config+0xa4>
 800261c:	2b01      	cmp	r3, #1
 800261e:	d002      	beq.n	8002626 <RCCEx_PLLSAI2_Config+0x62>
 8002620:	2b02      	cmp	r3, #2
 8002622:	d009      	beq.n	8002638 <RCCEx_PLLSAI2_Config+0x74>
 8002624:	e020      	b.n	8002668 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002626:	4b55      	ldr	r3, [pc, #340]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d11d      	bne.n	800266e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002636:	e01a      	b.n	800266e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002638:	4b50      	ldr	r3, [pc, #320]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002640:	2b00      	cmp	r3, #0
 8002642:	d116      	bne.n	8002672 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002648:	e013      	b.n	8002672 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800264a:	4b4c      	ldr	r3, [pc, #304]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10f      	bne.n	8002676 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002656:	4b49      	ldr	r3, [pc, #292]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002666:	e006      	b.n	8002676 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
      break;
 800266c:	e004      	b.n	8002678 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800266e:	bf00      	nop
 8002670:	e002      	b.n	8002678 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002672:	bf00      	nop
 8002674:	e000      	b.n	8002678 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002676:	bf00      	nop
    }

    if(status == HAL_OK)
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10d      	bne.n	800269a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800267e:	4b3f      	ldr	r3, [pc, #252]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	430b      	orrs	r3, r1
 8002694:	4939      	ldr	r1, [pc, #228]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002696:	4313      	orrs	r3, r2
 8002698:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d167      	bne.n	8002770 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026a0:	4b36      	ldr	r3, [pc, #216]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a35      	ldr	r2, [pc, #212]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ac:	f7fe faa8 	bl	8000c00 <HAL_GetTick>
 80026b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026b2:	e009      	b.n	80026c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026b4:	f7fe faa4 	bl	8000c00 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d902      	bls.n	80026c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	73fb      	strb	r3, [r7, #15]
        break;
 80026c6:	e005      	b.n	80026d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026c8:	4b2c      	ldr	r3, [pc, #176]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1ef      	bne.n	80026b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d14a      	bne.n	8002770 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d111      	bne.n	8002704 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026e0:	4b26      	ldr	r3, [pc, #152]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6892      	ldr	r2, [r2, #8]
 80026f0:	0211      	lsls	r1, r2, #8
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68d2      	ldr	r2, [r2, #12]
 80026f6:	0912      	lsrs	r2, r2, #4
 80026f8:	0452      	lsls	r2, r2, #17
 80026fa:	430a      	orrs	r2, r1
 80026fc:	491f      	ldr	r1, [pc, #124]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	614b      	str	r3, [r1, #20]
 8002702:	e011      	b.n	8002728 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002704:	4b1d      	ldr	r3, [pc, #116]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800270c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6892      	ldr	r2, [r2, #8]
 8002714:	0211      	lsls	r1, r2, #8
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6912      	ldr	r2, [r2, #16]
 800271a:	0852      	lsrs	r2, r2, #1
 800271c:	3a01      	subs	r2, #1
 800271e:	0652      	lsls	r2, r2, #25
 8002720:	430a      	orrs	r2, r1
 8002722:	4916      	ldr	r1, [pc, #88]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002724:	4313      	orrs	r3, r2
 8002726:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002728:	4b14      	ldr	r3, [pc, #80]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a13      	ldr	r2, [pc, #76]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 800272e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002732:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7fe fa64 	bl	8000c00 <HAL_GetTick>
 8002738:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800273a:	e009      	b.n	8002750 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800273c:	f7fe fa60 	bl	8000c00 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d902      	bls.n	8002750 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	73fb      	strb	r3, [r7, #15]
          break;
 800274e:	e005      	b.n	800275c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ef      	beq.n	800273c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	4904      	ldr	r1, [pc, #16]	; (800277c <RCCEx_PLLSAI2_Config+0x1b8>)
 800276c:	4313      	orrs	r3, r2
 800276e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002770:	7bfb      	ldrb	r3, [r7, #15]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000

08002780 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e095      	b.n	80028be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	2b00      	cmp	r3, #0
 8002798:	d108      	bne.n	80027ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027a2:	d009      	beq.n	80027b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
 80027aa:	e005      	b.n	80027b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe f84c 	bl	8000870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027f8:	d902      	bls.n	8002800 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	e002      	b.n	8002806 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002804:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800280e:	d007      	beq.n	8002820 <HAL_SPI_Init+0xa0>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002818:	d002      	beq.n	8002820 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002862:	ea42 0103 	orr.w	r1, r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	0c1b      	lsrs	r3, r3, #16
 800287c:	f003 0204 	and.w	r2, r3, #4
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800289c:	ea42 0103 	orr.w	r1, r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b088      	sub	sp, #32
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	603b      	str	r3, [r7, #0]
 80028d2:	4613      	mov	r3, r2
 80028d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_SPI_Transmit+0x22>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e158      	b.n	8002b9a <HAL_SPI_Transmit+0x2d4>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028f0:	f7fe f986 	bl	8000c00 <HAL_GetTick>
 80028f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b01      	cmp	r3, #1
 8002904:	d002      	beq.n	800290c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002906:	2302      	movs	r3, #2
 8002908:	77fb      	strb	r3, [r7, #31]
    goto error;
 800290a:	e13d      	b.n	8002b88 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <HAL_SPI_Transmit+0x52>
 8002912:	88fb      	ldrh	r3, [r7, #6]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d102      	bne.n	800291e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800291c:	e134      	b.n	8002b88 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2203      	movs	r2, #3
 8002922:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	88fa      	ldrh	r2, [r7, #6]
 8002936:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	88fa      	ldrh	r2, [r7, #6]
 800293c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002968:	d10f      	bne.n	800298a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002978:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002988:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002994:	2b40      	cmp	r3, #64	; 0x40
 8002996:	d007      	beq.n	80029a8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029b0:	d94b      	bls.n	8002a4a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <HAL_SPI_Transmit+0xfa>
 80029ba:	8afb      	ldrh	r3, [r7, #22]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d13e      	bne.n	8002a3e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c4:	881a      	ldrh	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d0:	1c9a      	adds	r2, r3, #2
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029e4:	e02b      	b.n	8002a3e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d112      	bne.n	8002a1a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f8:	881a      	ldrh	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a04:	1c9a      	adds	r2, r3, #2
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a18:	e011      	b.n	8002a3e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a1a:	f7fe f8f1 	bl	8000c00 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d803      	bhi.n	8002a32 <HAL_SPI_Transmit+0x16c>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a30:	d102      	bne.n	8002a38 <HAL_SPI_Transmit+0x172>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d102      	bne.n	8002a3e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a3c:	e0a4      	b.n	8002b88 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1ce      	bne.n	80029e6 <HAL_SPI_Transmit+0x120>
 8002a48:	e07c      	b.n	8002b44 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <HAL_SPI_Transmit+0x192>
 8002a52:	8afb      	ldrh	r3, [r7, #22]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d170      	bne.n	8002b3a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d912      	bls.n	8002a88 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	881a      	ldrh	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a72:	1c9a      	adds	r2, r3, #2
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3b02      	subs	r3, #2
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a86:	e058      	b.n	8002b3a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	330c      	adds	r3, #12
 8002a92:	7812      	ldrb	r2, [r2, #0]
 8002a94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002aae:	e044      	b.n	8002b3a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d12b      	bne.n	8002b16 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d912      	bls.n	8002aee <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002acc:	881a      	ldrh	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	1c9a      	adds	r2, r3, #2
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b02      	subs	r3, #2
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002aec:	e025      	b.n	8002b3a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	330c      	adds	r3, #12
 8002af8:	7812      	ldrb	r2, [r2, #0]
 8002afa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b14:	e011      	b.n	8002b3a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b16:	f7fe f873 	bl	8000c00 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d803      	bhi.n	8002b2e <HAL_SPI_Transmit+0x268>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b2c:	d102      	bne.n	8002b34 <HAL_SPI_Transmit+0x26e>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d102      	bne.n	8002b3a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b38:	e026      	b.n	8002b88 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1b5      	bne.n	8002ab0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	6839      	ldr	r1, [r7, #0]
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f949 	bl	8002de0 <SPI_EndRxTxTransaction>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10a      	bne.n	8002b78 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	77fb      	strb	r3, [r7, #31]
 8002b84:	e000      	b.n	8002b88 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002b86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b98:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3720      	adds	r7, #32
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bb4:	f7fe f824 	bl	8000c00 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bc4:	f7fe f81c 	bl	8000c00 <HAL_GetTick>
 8002bc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bca:	4b39      	ldr	r3, [pc, #228]	; (8002cb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	015b      	lsls	r3, r3, #5
 8002bd0:	0d1b      	lsrs	r3, r3, #20
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	fb02 f303 	mul.w	r3, r2, r3
 8002bd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bda:	e054      	b.n	8002c86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002be2:	d050      	beq.n	8002c86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002be4:	f7fe f80c 	bl	8000c00 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d902      	bls.n	8002bfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d13d      	bne.n	8002c76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c12:	d111      	bne.n	8002c38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c1c:	d004      	beq.n	8002c28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c26:	d107      	bne.n	8002c38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c40:	d10f      	bne.n	8002c62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e017      	b.n	8002ca6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	bf0c      	ite	eq
 8002c96:	2301      	moveq	r3, #1
 8002c98:	2300      	movne	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d19b      	bne.n	8002bdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3720      	adds	r7, #32
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000000 	.word	0x20000000

08002cb4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08a      	sub	sp, #40	; 0x28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002cc6:	f7fd ff9b 	bl	8000c00 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002cd6:	f7fd ff93 	bl	8000c00 <HAL_GetTick>
 8002cda:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002ce4:	4b3d      	ldr	r3, [pc, #244]	; (8002ddc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00da      	lsls	r2, r3, #3
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	0d1b      	lsrs	r3, r3, #20
 8002cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf6:	fb02 f303 	mul.w	r3, r2, r3
 8002cfa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002cfc:	e060      	b.n	8002dc0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d04:	d107      	bne.n	8002d16 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d104      	bne.n	8002d16 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d1c:	d050      	beq.n	8002dc0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d1e:	f7fd ff6f 	bl	8000c00 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d902      	bls.n	8002d34 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d13d      	bne.n	8002db0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d4c:	d111      	bne.n	8002d72 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d56:	d004      	beq.n	8002d62 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d60:	d107      	bne.n	8002d72 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7a:	d10f      	bne.n	8002d9c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e010      	b.n	8002dd2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d196      	bne.n	8002cfe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3728      	adds	r7, #40	; 0x28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000000 	.word	0x20000000

08002de0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff ff5b 	bl	8002cb4 <SPI_WaitFifoStateUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e08:	f043 0220 	orr.w	r2, r3, #32
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e027      	b.n	8002e64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2180      	movs	r1, #128	; 0x80
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f7ff fec0 	bl	8002ba4 <SPI_WaitFlagStateUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e2e:	f043 0220 	orr.w	r2, r3, #32
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e014      	b.n	8002e64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f7ff ff34 	bl	8002cb4 <SPI_WaitFifoStateUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d007      	beq.n	8002e62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e56:	f043 0220 	orr.w	r2, r3, #32
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e000      	b.n	8002e64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e040      	b.n	8002f00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fd fdc0 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2224      	movs	r2, #36	; 0x24
 8002e98:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f82c 	bl	8002f08 <UART_SetConfig>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e022      	b.n	8002f00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 faaa 	bl	800341c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ed6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ee6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fb31 	bl	8003560 <UART_CheckIdleState>
 8002efe:	4603      	mov	r3, r0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f08:	b5b0      	push	{r4, r5, r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	4bad      	ldr	r3, [pc, #692]	; (80031e8 <UART_SetConfig+0x2e0>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	69f9      	ldr	r1, [r7, #28]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4aa2      	ldr	r2, [pc, #648]	; (80031ec <UART_SetConfig+0x2e4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d004      	beq.n	8002f70 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a99      	ldr	r2, [pc, #612]	; (80031f0 <UART_SetConfig+0x2e8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d121      	bne.n	8002fd2 <UART_SetConfig+0xca>
 8002f8e:	4b99      	ldr	r3, [pc, #612]	; (80031f4 <UART_SetConfig+0x2ec>)
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d817      	bhi.n	8002fcc <UART_SetConfig+0xc4>
 8002f9c:	a201      	add	r2, pc, #4	; (adr r2, 8002fa4 <UART_SetConfig+0x9c>)
 8002f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa2:	bf00      	nop
 8002fa4:	08002fb5 	.word	0x08002fb5
 8002fa8:	08002fc1 	.word	0x08002fc1
 8002fac:	08002fbb 	.word	0x08002fbb
 8002fb0:	08002fc7 	.word	0x08002fc7
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	76fb      	strb	r3, [r7, #27]
 8002fb8:	e0e7      	b.n	800318a <UART_SetConfig+0x282>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	76fb      	strb	r3, [r7, #27]
 8002fbe:	e0e4      	b.n	800318a <UART_SetConfig+0x282>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	76fb      	strb	r3, [r7, #27]
 8002fc4:	e0e1      	b.n	800318a <UART_SetConfig+0x282>
 8002fc6:	2308      	movs	r3, #8
 8002fc8:	76fb      	strb	r3, [r7, #27]
 8002fca:	e0de      	b.n	800318a <UART_SetConfig+0x282>
 8002fcc:	2310      	movs	r3, #16
 8002fce:	76fb      	strb	r3, [r7, #27]
 8002fd0:	e0db      	b.n	800318a <UART_SetConfig+0x282>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a88      	ldr	r2, [pc, #544]	; (80031f8 <UART_SetConfig+0x2f0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d132      	bne.n	8003042 <UART_SetConfig+0x13a>
 8002fdc:	4b85      	ldr	r3, [pc, #532]	; (80031f4 <UART_SetConfig+0x2ec>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b0c      	cmp	r3, #12
 8002fe8:	d828      	bhi.n	800303c <UART_SetConfig+0x134>
 8002fea:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <UART_SetConfig+0xe8>)
 8002fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff0:	08003025 	.word	0x08003025
 8002ff4:	0800303d 	.word	0x0800303d
 8002ff8:	0800303d 	.word	0x0800303d
 8002ffc:	0800303d 	.word	0x0800303d
 8003000:	08003031 	.word	0x08003031
 8003004:	0800303d 	.word	0x0800303d
 8003008:	0800303d 	.word	0x0800303d
 800300c:	0800303d 	.word	0x0800303d
 8003010:	0800302b 	.word	0x0800302b
 8003014:	0800303d 	.word	0x0800303d
 8003018:	0800303d 	.word	0x0800303d
 800301c:	0800303d 	.word	0x0800303d
 8003020:	08003037 	.word	0x08003037
 8003024:	2300      	movs	r3, #0
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e0af      	b.n	800318a <UART_SetConfig+0x282>
 800302a:	2302      	movs	r3, #2
 800302c:	76fb      	strb	r3, [r7, #27]
 800302e:	e0ac      	b.n	800318a <UART_SetConfig+0x282>
 8003030:	2304      	movs	r3, #4
 8003032:	76fb      	strb	r3, [r7, #27]
 8003034:	e0a9      	b.n	800318a <UART_SetConfig+0x282>
 8003036:	2308      	movs	r3, #8
 8003038:	76fb      	strb	r3, [r7, #27]
 800303a:	e0a6      	b.n	800318a <UART_SetConfig+0x282>
 800303c:	2310      	movs	r3, #16
 800303e:	76fb      	strb	r3, [r7, #27]
 8003040:	e0a3      	b.n	800318a <UART_SetConfig+0x282>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a6d      	ldr	r2, [pc, #436]	; (80031fc <UART_SetConfig+0x2f4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d120      	bne.n	800308e <UART_SetConfig+0x186>
 800304c:	4b69      	ldr	r3, [pc, #420]	; (80031f4 <UART_SetConfig+0x2ec>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003052:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003056:	2b30      	cmp	r3, #48	; 0x30
 8003058:	d013      	beq.n	8003082 <UART_SetConfig+0x17a>
 800305a:	2b30      	cmp	r3, #48	; 0x30
 800305c:	d814      	bhi.n	8003088 <UART_SetConfig+0x180>
 800305e:	2b20      	cmp	r3, #32
 8003060:	d009      	beq.n	8003076 <UART_SetConfig+0x16e>
 8003062:	2b20      	cmp	r3, #32
 8003064:	d810      	bhi.n	8003088 <UART_SetConfig+0x180>
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <UART_SetConfig+0x168>
 800306a:	2b10      	cmp	r3, #16
 800306c:	d006      	beq.n	800307c <UART_SetConfig+0x174>
 800306e:	e00b      	b.n	8003088 <UART_SetConfig+0x180>
 8003070:	2300      	movs	r3, #0
 8003072:	76fb      	strb	r3, [r7, #27]
 8003074:	e089      	b.n	800318a <UART_SetConfig+0x282>
 8003076:	2302      	movs	r3, #2
 8003078:	76fb      	strb	r3, [r7, #27]
 800307a:	e086      	b.n	800318a <UART_SetConfig+0x282>
 800307c:	2304      	movs	r3, #4
 800307e:	76fb      	strb	r3, [r7, #27]
 8003080:	e083      	b.n	800318a <UART_SetConfig+0x282>
 8003082:	2308      	movs	r3, #8
 8003084:	76fb      	strb	r3, [r7, #27]
 8003086:	e080      	b.n	800318a <UART_SetConfig+0x282>
 8003088:	2310      	movs	r3, #16
 800308a:	76fb      	strb	r3, [r7, #27]
 800308c:	e07d      	b.n	800318a <UART_SetConfig+0x282>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a5b      	ldr	r2, [pc, #364]	; (8003200 <UART_SetConfig+0x2f8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d120      	bne.n	80030da <UART_SetConfig+0x1d2>
 8003098:	4b56      	ldr	r3, [pc, #344]	; (80031f4 <UART_SetConfig+0x2ec>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030a2:	2bc0      	cmp	r3, #192	; 0xc0
 80030a4:	d013      	beq.n	80030ce <UART_SetConfig+0x1c6>
 80030a6:	2bc0      	cmp	r3, #192	; 0xc0
 80030a8:	d814      	bhi.n	80030d4 <UART_SetConfig+0x1cc>
 80030aa:	2b80      	cmp	r3, #128	; 0x80
 80030ac:	d009      	beq.n	80030c2 <UART_SetConfig+0x1ba>
 80030ae:	2b80      	cmp	r3, #128	; 0x80
 80030b0:	d810      	bhi.n	80030d4 <UART_SetConfig+0x1cc>
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <UART_SetConfig+0x1b4>
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	d006      	beq.n	80030c8 <UART_SetConfig+0x1c0>
 80030ba:	e00b      	b.n	80030d4 <UART_SetConfig+0x1cc>
 80030bc:	2300      	movs	r3, #0
 80030be:	76fb      	strb	r3, [r7, #27]
 80030c0:	e063      	b.n	800318a <UART_SetConfig+0x282>
 80030c2:	2302      	movs	r3, #2
 80030c4:	76fb      	strb	r3, [r7, #27]
 80030c6:	e060      	b.n	800318a <UART_SetConfig+0x282>
 80030c8:	2304      	movs	r3, #4
 80030ca:	76fb      	strb	r3, [r7, #27]
 80030cc:	e05d      	b.n	800318a <UART_SetConfig+0x282>
 80030ce:	2308      	movs	r3, #8
 80030d0:	76fb      	strb	r3, [r7, #27]
 80030d2:	e05a      	b.n	800318a <UART_SetConfig+0x282>
 80030d4:	2310      	movs	r3, #16
 80030d6:	76fb      	strb	r3, [r7, #27]
 80030d8:	e057      	b.n	800318a <UART_SetConfig+0x282>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a49      	ldr	r2, [pc, #292]	; (8003204 <UART_SetConfig+0x2fc>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d125      	bne.n	8003130 <UART_SetConfig+0x228>
 80030e4:	4b43      	ldr	r3, [pc, #268]	; (80031f4 <UART_SetConfig+0x2ec>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030f2:	d017      	beq.n	8003124 <UART_SetConfig+0x21c>
 80030f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030f8:	d817      	bhi.n	800312a <UART_SetConfig+0x222>
 80030fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030fe:	d00b      	beq.n	8003118 <UART_SetConfig+0x210>
 8003100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003104:	d811      	bhi.n	800312a <UART_SetConfig+0x222>
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <UART_SetConfig+0x20a>
 800310a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800310e:	d006      	beq.n	800311e <UART_SetConfig+0x216>
 8003110:	e00b      	b.n	800312a <UART_SetConfig+0x222>
 8003112:	2300      	movs	r3, #0
 8003114:	76fb      	strb	r3, [r7, #27]
 8003116:	e038      	b.n	800318a <UART_SetConfig+0x282>
 8003118:	2302      	movs	r3, #2
 800311a:	76fb      	strb	r3, [r7, #27]
 800311c:	e035      	b.n	800318a <UART_SetConfig+0x282>
 800311e:	2304      	movs	r3, #4
 8003120:	76fb      	strb	r3, [r7, #27]
 8003122:	e032      	b.n	800318a <UART_SetConfig+0x282>
 8003124:	2308      	movs	r3, #8
 8003126:	76fb      	strb	r3, [r7, #27]
 8003128:	e02f      	b.n	800318a <UART_SetConfig+0x282>
 800312a:	2310      	movs	r3, #16
 800312c:	76fb      	strb	r3, [r7, #27]
 800312e:	e02c      	b.n	800318a <UART_SetConfig+0x282>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a2d      	ldr	r2, [pc, #180]	; (80031ec <UART_SetConfig+0x2e4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d125      	bne.n	8003186 <UART_SetConfig+0x27e>
 800313a:	4b2e      	ldr	r3, [pc, #184]	; (80031f4 <UART_SetConfig+0x2ec>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003144:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003148:	d017      	beq.n	800317a <UART_SetConfig+0x272>
 800314a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800314e:	d817      	bhi.n	8003180 <UART_SetConfig+0x278>
 8003150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003154:	d00b      	beq.n	800316e <UART_SetConfig+0x266>
 8003156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800315a:	d811      	bhi.n	8003180 <UART_SetConfig+0x278>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <UART_SetConfig+0x260>
 8003160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003164:	d006      	beq.n	8003174 <UART_SetConfig+0x26c>
 8003166:	e00b      	b.n	8003180 <UART_SetConfig+0x278>
 8003168:	2300      	movs	r3, #0
 800316a:	76fb      	strb	r3, [r7, #27]
 800316c:	e00d      	b.n	800318a <UART_SetConfig+0x282>
 800316e:	2302      	movs	r3, #2
 8003170:	76fb      	strb	r3, [r7, #27]
 8003172:	e00a      	b.n	800318a <UART_SetConfig+0x282>
 8003174:	2304      	movs	r3, #4
 8003176:	76fb      	strb	r3, [r7, #27]
 8003178:	e007      	b.n	800318a <UART_SetConfig+0x282>
 800317a:	2308      	movs	r3, #8
 800317c:	76fb      	strb	r3, [r7, #27]
 800317e:	e004      	b.n	800318a <UART_SetConfig+0x282>
 8003180:	2310      	movs	r3, #16
 8003182:	76fb      	strb	r3, [r7, #27]
 8003184:	e001      	b.n	800318a <UART_SetConfig+0x282>
 8003186:	2310      	movs	r3, #16
 8003188:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a17      	ldr	r2, [pc, #92]	; (80031ec <UART_SetConfig+0x2e4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	f040 8087 	bne.w	80032a4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003196:	7efb      	ldrb	r3, [r7, #27]
 8003198:	2b08      	cmp	r3, #8
 800319a:	d837      	bhi.n	800320c <UART_SetConfig+0x304>
 800319c:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <UART_SetConfig+0x29c>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	080031c9 	.word	0x080031c9
 80031a8:	0800320d 	.word	0x0800320d
 80031ac:	080031d1 	.word	0x080031d1
 80031b0:	0800320d 	.word	0x0800320d
 80031b4:	080031d7 	.word	0x080031d7
 80031b8:	0800320d 	.word	0x0800320d
 80031bc:	0800320d 	.word	0x0800320d
 80031c0:	0800320d 	.word	0x0800320d
 80031c4:	080031df 	.word	0x080031df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031c8:	f7fe fd92 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 80031cc:	6178      	str	r0, [r7, #20]
        break;
 80031ce:	e022      	b.n	8003216 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031d0:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <UART_SetConfig+0x300>)
 80031d2:	617b      	str	r3, [r7, #20]
        break;
 80031d4:	e01f      	b.n	8003216 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031d6:	f7fe fcf3 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 80031da:	6178      	str	r0, [r7, #20]
        break;
 80031dc:	e01b      	b.n	8003216 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031e2:	617b      	str	r3, [r7, #20]
        break;
 80031e4:	e017      	b.n	8003216 <UART_SetConfig+0x30e>
 80031e6:	bf00      	nop
 80031e8:	efff69f3 	.word	0xefff69f3
 80031ec:	40008000 	.word	0x40008000
 80031f0:	40013800 	.word	0x40013800
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40004400 	.word	0x40004400
 80031fc:	40004800 	.word	0x40004800
 8003200:	40004c00 	.word	0x40004c00
 8003204:	40005000 	.word	0x40005000
 8003208:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	76bb      	strb	r3, [r7, #26]
        break;
 8003214:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 80f1 	beq.w	8003400 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	429a      	cmp	r2, r3
 800322c:	d305      	bcc.n	800323a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	429a      	cmp	r2, r3
 8003238:	d902      	bls.n	8003240 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	76bb      	strb	r3, [r7, #26]
 800323e:	e0df      	b.n	8003400 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	4618      	mov	r0, r3
 8003244:	f04f 0100 	mov.w	r1, #0
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	020b      	lsls	r3, r1, #8
 8003252:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003256:	0202      	lsls	r2, r0, #8
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	6849      	ldr	r1, [r1, #4]
 800325c:	0849      	lsrs	r1, r1, #1
 800325e:	4608      	mov	r0, r1
 8003260:	f04f 0100 	mov.w	r1, #0
 8003264:	1814      	adds	r4, r2, r0
 8003266:	eb43 0501 	adc.w	r5, r3, r1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	461a      	mov	r2, r3
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	4620      	mov	r0, r4
 8003276:	4629      	mov	r1, r5
 8003278:	f7fc ffa6 	bl	80001c8 <__aeabi_uldivmod>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4613      	mov	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800328a:	d308      	bcc.n	800329e <UART_SetConfig+0x396>
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003292:	d204      	bcs.n	800329e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	60da      	str	r2, [r3, #12]
 800329c:	e0b0      	b.n	8003400 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	76bb      	strb	r3, [r7, #26]
 80032a2:	e0ad      	b.n	8003400 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ac:	d15b      	bne.n	8003366 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80032ae:	7efb      	ldrb	r3, [r7, #27]
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d828      	bhi.n	8003306 <UART_SetConfig+0x3fe>
 80032b4:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <UART_SetConfig+0x3b4>)
 80032b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ba:	bf00      	nop
 80032bc:	080032e1 	.word	0x080032e1
 80032c0:	080032e9 	.word	0x080032e9
 80032c4:	080032f1 	.word	0x080032f1
 80032c8:	08003307 	.word	0x08003307
 80032cc:	080032f7 	.word	0x080032f7
 80032d0:	08003307 	.word	0x08003307
 80032d4:	08003307 	.word	0x08003307
 80032d8:	08003307 	.word	0x08003307
 80032dc:	080032ff 	.word	0x080032ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e0:	f7fe fd06 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 80032e4:	6178      	str	r0, [r7, #20]
        break;
 80032e6:	e013      	b.n	8003310 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e8:	f7fe fd18 	bl	8001d1c <HAL_RCC_GetPCLK2Freq>
 80032ec:	6178      	str	r0, [r7, #20]
        break;
 80032ee:	e00f      	b.n	8003310 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f0:	4b49      	ldr	r3, [pc, #292]	; (8003418 <UART_SetConfig+0x510>)
 80032f2:	617b      	str	r3, [r7, #20]
        break;
 80032f4:	e00c      	b.n	8003310 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032f6:	f7fe fc63 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 80032fa:	6178      	str	r0, [r7, #20]
        break;
 80032fc:	e008      	b.n	8003310 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003302:	617b      	str	r3, [r7, #20]
        break;
 8003304:	e004      	b.n	8003310 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	76bb      	strb	r3, [r7, #26]
        break;
 800330e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d074      	beq.n	8003400 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	005a      	lsls	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	085b      	lsrs	r3, r3, #1
 8003320:	441a      	add	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	fbb2 f3f3 	udiv	r3, r2, r3
 800332a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	2b0f      	cmp	r3, #15
 8003330:	d916      	bls.n	8003360 <UART_SetConfig+0x458>
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003338:	d212      	bcs.n	8003360 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	b29b      	uxth	r3, r3
 800333e:	f023 030f 	bic.w	r3, r3, #15
 8003342:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	085b      	lsrs	r3, r3, #1
 8003348:	b29b      	uxth	r3, r3
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	b29a      	uxth	r2, r3
 8003350:	89fb      	ldrh	r3, [r7, #14]
 8003352:	4313      	orrs	r3, r2
 8003354:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	89fa      	ldrh	r2, [r7, #14]
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	e04f      	b.n	8003400 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	76bb      	strb	r3, [r7, #26]
 8003364:	e04c      	b.n	8003400 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003366:	7efb      	ldrb	r3, [r7, #27]
 8003368:	2b08      	cmp	r3, #8
 800336a:	d828      	bhi.n	80033be <UART_SetConfig+0x4b6>
 800336c:	a201      	add	r2, pc, #4	; (adr r2, 8003374 <UART_SetConfig+0x46c>)
 800336e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003372:	bf00      	nop
 8003374:	08003399 	.word	0x08003399
 8003378:	080033a1 	.word	0x080033a1
 800337c:	080033a9 	.word	0x080033a9
 8003380:	080033bf 	.word	0x080033bf
 8003384:	080033af 	.word	0x080033af
 8003388:	080033bf 	.word	0x080033bf
 800338c:	080033bf 	.word	0x080033bf
 8003390:	080033bf 	.word	0x080033bf
 8003394:	080033b7 	.word	0x080033b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003398:	f7fe fcaa 	bl	8001cf0 <HAL_RCC_GetPCLK1Freq>
 800339c:	6178      	str	r0, [r7, #20]
        break;
 800339e:	e013      	b.n	80033c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033a0:	f7fe fcbc 	bl	8001d1c <HAL_RCC_GetPCLK2Freq>
 80033a4:	6178      	str	r0, [r7, #20]
        break;
 80033a6:	e00f      	b.n	80033c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <UART_SetConfig+0x510>)
 80033aa:	617b      	str	r3, [r7, #20]
        break;
 80033ac:	e00c      	b.n	80033c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ae:	f7fe fc07 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 80033b2:	6178      	str	r0, [r7, #20]
        break;
 80033b4:	e008      	b.n	80033c8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ba:	617b      	str	r3, [r7, #20]
        break;
 80033bc:	e004      	b.n	80033c8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	76bb      	strb	r3, [r7, #26]
        break;
 80033c6:	bf00      	nop
    }

    if (pclk != 0U)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d018      	beq.n	8003400 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	085a      	lsrs	r2, r3, #1
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	441a      	add	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	2b0f      	cmp	r3, #15
 80033e6:	d909      	bls.n	80033fc <UART_SetConfig+0x4f4>
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ee:	d205      	bcs.n	80033fc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	e001      	b.n	8003400 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800340c:	7ebb      	ldrb	r3, [r7, #26]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3720      	adds	r7, #32
 8003412:	46bd      	mov	sp, r7
 8003414:	bdb0      	pop	{r4, r5, r7, pc}
 8003416:	bf00      	nop
 8003418:	00f42400 	.word	0x00f42400

0800341c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00a      	beq.n	8003446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	f003 0320 	and.w	r3, r3, #32
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01a      	beq.n	8003532 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800351a:	d10a      	bne.n	8003532 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	605a      	str	r2, [r3, #4]
  }
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af02      	add	r7, sp, #8
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003570:	f7fd fb46 	bl	8000c00 <HAL_GetTick>
 8003574:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b08      	cmp	r3, #8
 8003582:	d10e      	bne.n	80035a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f82d 	bl	80035f2 <UART_WaitOnFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e023      	b.n	80035ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d10e      	bne.n	80035ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f817 	bl	80035f2 <UART_WaitOnFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e00d      	b.n	80035ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b09c      	sub	sp, #112	; 0x70
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	603b      	str	r3, [r7, #0]
 80035fe:	4613      	mov	r3, r2
 8003600:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003602:	e0a5      	b.n	8003750 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800360a:	f000 80a1 	beq.w	8003750 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fd faf7 	bl	8000c00 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <UART_WaitOnFlagUntilTimeout+0x32>
 800361e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003620:	2b00      	cmp	r3, #0
 8003622:	d13e      	bne.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800362c:	e853 3f00 	ldrex	r3, [r3]
 8003630:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003634:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003638:	667b      	str	r3, [r7, #100]	; 0x64
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003642:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003644:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003646:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003648:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800364a:	e841 2300 	strex	r3, r2, [r1]
 800364e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1e6      	bne.n	8003624 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3308      	adds	r3, #8
 800365c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	663b      	str	r3, [r7, #96]	; 0x60
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3308      	adds	r3, #8
 8003674:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003676:	64ba      	str	r2, [r7, #72]	; 0x48
 8003678:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800367c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1e5      	bne.n	8003656 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e067      	b.n	8003772 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d04f      	beq.n	8003750 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036be:	d147      	bne.n	8003750 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036c8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	e853 3f00 	ldrex	r3, [r3]
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	461a      	mov	r2, r3
 80036e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e8:	637b      	str	r3, [r7, #52]	; 0x34
 80036ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036f0:	e841 2300 	strex	r3, r2, [r1]
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1e6      	bne.n	80036ca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3308      	adds	r3, #8
 8003702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	e853 3f00 	ldrex	r3, [r3]
 800370a:	613b      	str	r3, [r7, #16]
   return(result);
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f023 0301 	bic.w	r3, r3, #1
 8003712:	66bb      	str	r3, [r7, #104]	; 0x68
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3308      	adds	r3, #8
 800371a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800371c:	623a      	str	r2, [r7, #32]
 800371e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003720:	69f9      	ldr	r1, [r7, #28]
 8003722:	6a3a      	ldr	r2, [r7, #32]
 8003724:	e841 2300 	strex	r3, r2, [r1]
 8003728:	61bb      	str	r3, [r7, #24]
   return(result);
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1e5      	bne.n	80036fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2220      	movs	r2, #32
 800373a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e010      	b.n	8003772 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4013      	ands	r3, r2
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	429a      	cmp	r2, r3
 800375e:	bf0c      	ite	eq
 8003760:	2301      	moveq	r3, #1
 8003762:	2300      	movne	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	429a      	cmp	r2, r3
 800376c:	f43f af4a 	beq.w	8003604 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3770      	adds	r7, #112	; 0x70
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <__libc_init_array>:
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d0d      	ldr	r5, [pc, #52]	; (80037b4 <__libc_init_array+0x38>)
 8003780:	4c0d      	ldr	r4, [pc, #52]	; (80037b8 <__libc_init_array+0x3c>)
 8003782:	1b64      	subs	r4, r4, r5
 8003784:	10a4      	asrs	r4, r4, #2
 8003786:	2600      	movs	r6, #0
 8003788:	42a6      	cmp	r6, r4
 800378a:	d109      	bne.n	80037a0 <__libc_init_array+0x24>
 800378c:	4d0b      	ldr	r5, [pc, #44]	; (80037bc <__libc_init_array+0x40>)
 800378e:	4c0c      	ldr	r4, [pc, #48]	; (80037c0 <__libc_init_array+0x44>)
 8003790:	f000 f820 	bl	80037d4 <_init>
 8003794:	1b64      	subs	r4, r4, r5
 8003796:	10a4      	asrs	r4, r4, #2
 8003798:	2600      	movs	r6, #0
 800379a:	42a6      	cmp	r6, r4
 800379c:	d105      	bne.n	80037aa <__libc_init_array+0x2e>
 800379e:	bd70      	pop	{r4, r5, r6, pc}
 80037a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a4:	4798      	blx	r3
 80037a6:	3601      	adds	r6, #1
 80037a8:	e7ee      	b.n	8003788 <__libc_init_array+0xc>
 80037aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ae:	4798      	blx	r3
 80037b0:	3601      	adds	r6, #1
 80037b2:	e7f2      	b.n	800379a <__libc_init_array+0x1e>
 80037b4:	0800383c 	.word	0x0800383c
 80037b8:	0800383c 	.word	0x0800383c
 80037bc:	0800383c 	.word	0x0800383c
 80037c0:	08003840 	.word	0x08003840

080037c4 <memset>:
 80037c4:	4402      	add	r2, r0
 80037c6:	4603      	mov	r3, r0
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d100      	bne.n	80037ce <memset+0xa>
 80037cc:	4770      	bx	lr
 80037ce:	f803 1b01 	strb.w	r1, [r3], #1
 80037d2:	e7f9      	b.n	80037c8 <memset+0x4>

080037d4 <_init>:
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	bf00      	nop
 80037d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037da:	bc08      	pop	{r3}
 80037dc:	469e      	mov	lr, r3
 80037de:	4770      	bx	lr

080037e0 <_fini>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	bf00      	nop
 80037e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e6:	bc08      	pop	{r3}
 80037e8:	469e      	mov	lr, r3
 80037ea:	4770      	bx	lr
