
i2c_sonar_demo_stm32l4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005864  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080059f4  080059f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ba0  08005ba0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08005ba0  08005ba0  00015ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ba8  08005ba8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ba8  08005ba8  00015ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005bb0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000080  08005c30  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08005c30  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012929  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002492  00000000  00000000  000329d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00034e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  00035b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002775d  00000000  00000000  00036718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010253  00000000  00000000  0005de75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec469  00000000  00000000  0006e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015a531  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d5c  00000000  00000000  0015a584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059dc 	.word	0x080059dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080059dc 	.word	0x080059dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__gedf2>:
 800083c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000840:	e006      	b.n	8000850 <__cmpdf2+0x4>
 8000842:	bf00      	nop

08000844 <__ledf2>:
 8000844:	f04f 0c01 	mov.w	ip, #1
 8000848:	e002      	b.n	8000850 <__cmpdf2+0x4>
 800084a:	bf00      	nop

0800084c <__cmpdf2>:
 800084c:	f04f 0c01 	mov.w	ip, #1
 8000850:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800085c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000866:	d01b      	beq.n	80008a0 <__cmpdf2+0x54>
 8000868:	b001      	add	sp, #4
 800086a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800086e:	bf0c      	ite	eq
 8000870:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000874:	ea91 0f03 	teqne	r1, r3
 8000878:	bf02      	ittt	eq
 800087a:	ea90 0f02 	teqeq	r0, r2
 800087e:	2000      	moveq	r0, #0
 8000880:	4770      	bxeq	lr
 8000882:	f110 0f00 	cmn.w	r0, #0
 8000886:	ea91 0f03 	teq	r1, r3
 800088a:	bf58      	it	pl
 800088c:	4299      	cmppl	r1, r3
 800088e:	bf08      	it	eq
 8000890:	4290      	cmpeq	r0, r2
 8000892:	bf2c      	ite	cs
 8000894:	17d8      	asrcs	r0, r3, #31
 8000896:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800089a:	f040 0001 	orr.w	r0, r0, #1
 800089e:	4770      	bx	lr
 80008a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a8:	d102      	bne.n	80008b0 <__cmpdf2+0x64>
 80008aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ae:	d107      	bne.n	80008c0 <__cmpdf2+0x74>
 80008b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d1d6      	bne.n	8000868 <__cmpdf2+0x1c>
 80008ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008be:	d0d3      	beq.n	8000868 <__cmpdf2+0x1c>
 80008c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <__aeabi_cdrcmple>:
 80008c8:	4684      	mov	ip, r0
 80008ca:	4610      	mov	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	468c      	mov	ip, r1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4663      	mov	r3, ip
 80008d4:	e000      	b.n	80008d8 <__aeabi_cdcmpeq>
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdcmpeq>:
 80008d8:	b501      	push	{r0, lr}
 80008da:	f7ff ffb7 	bl	800084c <__cmpdf2>
 80008de:	2800      	cmp	r0, #0
 80008e0:	bf48      	it	mi
 80008e2:	f110 0f00 	cmnmi.w	r0, #0
 80008e6:	bd01      	pop	{r0, pc}

080008e8 <__aeabi_dcmpeq>:
 80008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ec:	f7ff fff4 	bl	80008d8 <__aeabi_cdcmpeq>
 80008f0:	bf0c      	ite	eq
 80008f2:	2001      	moveq	r0, #1
 80008f4:	2000      	movne	r0, #0
 80008f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008fa:	bf00      	nop

080008fc <__aeabi_dcmplt>:
 80008fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000900:	f7ff ffea 	bl	80008d8 <__aeabi_cdcmpeq>
 8000904:	bf34      	ite	cc
 8000906:	2001      	movcc	r0, #1
 8000908:	2000      	movcs	r0, #0
 800090a:	f85d fb08 	ldr.w	pc, [sp], #8
 800090e:	bf00      	nop

08000910 <__aeabi_dcmple>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff ffe0 	bl	80008d8 <__aeabi_cdcmpeq>
 8000918:	bf94      	ite	ls
 800091a:	2001      	movls	r0, #1
 800091c:	2000      	movhi	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmpge>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffce 	bl	80008c8 <__aeabi_cdrcmple>
 800092c:	bf94      	ite	ls
 800092e:	2001      	movls	r0, #1
 8000930:	2000      	movhi	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmpgt>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffc4 	bl	80008c8 <__aeabi_cdrcmple>
 8000940:	bf34      	ite	cc
 8000942:	2001      	movcc	r0, #1
 8000944:	2000      	movcs	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_d2uiz>:
 800094c:	004a      	lsls	r2, r1, #1
 800094e:	d211      	bcs.n	8000974 <__aeabi_d2uiz+0x28>
 8000950:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000954:	d211      	bcs.n	800097a <__aeabi_d2uiz+0x2e>
 8000956:	d50d      	bpl.n	8000974 <__aeabi_d2uiz+0x28>
 8000958:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800095c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000960:	d40e      	bmi.n	8000980 <__aeabi_d2uiz+0x34>
 8000962:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000966:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800096a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800096e:	fa23 f002 	lsr.w	r0, r3, r2
 8000972:	4770      	bx	lr
 8000974:	f04f 0000 	mov.w	r0, #0
 8000978:	4770      	bx	lr
 800097a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800097e:	d102      	bne.n	8000986 <__aeabi_d2uiz+0x3a>
 8000980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000984:	4770      	bx	lr
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	4770      	bx	lr

0800098c <__aeabi_uldivmod>:
 800098c:	b953      	cbnz	r3, 80009a4 <__aeabi_uldivmod+0x18>
 800098e:	b94a      	cbnz	r2, 80009a4 <__aeabi_uldivmod+0x18>
 8000990:	2900      	cmp	r1, #0
 8000992:	bf08      	it	eq
 8000994:	2800      	cmpeq	r0, #0
 8000996:	bf1c      	itt	ne
 8000998:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800099c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009a0:	f000 b96e 	b.w	8000c80 <__aeabi_idiv0>
 80009a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ac:	f000 f806 	bl	80009bc <__udivmoddi4>
 80009b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009b8:	b004      	add	sp, #16
 80009ba:	4770      	bx	lr

080009bc <__udivmoddi4>:
 80009bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009c0:	9d08      	ldr	r5, [sp, #32]
 80009c2:	4604      	mov	r4, r0
 80009c4:	468c      	mov	ip, r1
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f040 8083 	bne.w	8000ad2 <__udivmoddi4+0x116>
 80009cc:	428a      	cmp	r2, r1
 80009ce:	4617      	mov	r7, r2
 80009d0:	d947      	bls.n	8000a62 <__udivmoddi4+0xa6>
 80009d2:	fab2 f282 	clz	r2, r2
 80009d6:	b142      	cbz	r2, 80009ea <__udivmoddi4+0x2e>
 80009d8:	f1c2 0020 	rsb	r0, r2, #32
 80009dc:	fa24 f000 	lsr.w	r0, r4, r0
 80009e0:	4091      	lsls	r1, r2
 80009e2:	4097      	lsls	r7, r2
 80009e4:	ea40 0c01 	orr.w	ip, r0, r1
 80009e8:	4094      	lsls	r4, r2
 80009ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80009ee:	0c23      	lsrs	r3, r4, #16
 80009f0:	fbbc f6f8 	udiv	r6, ip, r8
 80009f4:	fa1f fe87 	uxth.w	lr, r7
 80009f8:	fb08 c116 	mls	r1, r8, r6, ip
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f10e 	mul.w	r1, r6, lr
 8000a04:	4299      	cmp	r1, r3
 8000a06:	d909      	bls.n	8000a1c <__udivmoddi4+0x60>
 8000a08:	18fb      	adds	r3, r7, r3
 8000a0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a0e:	f080 8119 	bcs.w	8000c44 <__udivmoddi4+0x288>
 8000a12:	4299      	cmp	r1, r3
 8000a14:	f240 8116 	bls.w	8000c44 <__udivmoddi4+0x288>
 8000a18:	3e02      	subs	r6, #2
 8000a1a:	443b      	add	r3, r7
 8000a1c:	1a5b      	subs	r3, r3, r1
 8000a1e:	b2a4      	uxth	r4, r4
 8000a20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a24:	fb08 3310 	mls	r3, r8, r0, r3
 8000a28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a30:	45a6      	cmp	lr, r4
 8000a32:	d909      	bls.n	8000a48 <__udivmoddi4+0x8c>
 8000a34:	193c      	adds	r4, r7, r4
 8000a36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a3a:	f080 8105 	bcs.w	8000c48 <__udivmoddi4+0x28c>
 8000a3e:	45a6      	cmp	lr, r4
 8000a40:	f240 8102 	bls.w	8000c48 <__udivmoddi4+0x28c>
 8000a44:	3802      	subs	r0, #2
 8000a46:	443c      	add	r4, r7
 8000a48:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a4c:	eba4 040e 	sub.w	r4, r4, lr
 8000a50:	2600      	movs	r6, #0
 8000a52:	b11d      	cbz	r5, 8000a5c <__udivmoddi4+0xa0>
 8000a54:	40d4      	lsrs	r4, r2
 8000a56:	2300      	movs	r3, #0
 8000a58:	e9c5 4300 	strd	r4, r3, [r5]
 8000a5c:	4631      	mov	r1, r6
 8000a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a62:	b902      	cbnz	r2, 8000a66 <__udivmoddi4+0xaa>
 8000a64:	deff      	udf	#255	; 0xff
 8000a66:	fab2 f282 	clz	r2, r2
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	d150      	bne.n	8000b10 <__udivmoddi4+0x154>
 8000a6e:	1bcb      	subs	r3, r1, r7
 8000a70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a74:	fa1f f887 	uxth.w	r8, r7
 8000a78:	2601      	movs	r6, #1
 8000a7a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a7e:	0c21      	lsrs	r1, r4, #16
 8000a80:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a88:	fb08 f30c 	mul.w	r3, r8, ip
 8000a8c:	428b      	cmp	r3, r1
 8000a8e:	d907      	bls.n	8000aa0 <__udivmoddi4+0xe4>
 8000a90:	1879      	adds	r1, r7, r1
 8000a92:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000a96:	d202      	bcs.n	8000a9e <__udivmoddi4+0xe2>
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	f200 80e9 	bhi.w	8000c70 <__udivmoddi4+0x2b4>
 8000a9e:	4684      	mov	ip, r0
 8000aa0:	1ac9      	subs	r1, r1, r3
 8000aa2:	b2a3      	uxth	r3, r4
 8000aa4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aa8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ab0:	fb08 f800 	mul.w	r8, r8, r0
 8000ab4:	45a0      	cmp	r8, r4
 8000ab6:	d907      	bls.n	8000ac8 <__udivmoddi4+0x10c>
 8000ab8:	193c      	adds	r4, r7, r4
 8000aba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000abe:	d202      	bcs.n	8000ac6 <__udivmoddi4+0x10a>
 8000ac0:	45a0      	cmp	r8, r4
 8000ac2:	f200 80d9 	bhi.w	8000c78 <__udivmoddi4+0x2bc>
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	eba4 0408 	sub.w	r4, r4, r8
 8000acc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ad0:	e7bf      	b.n	8000a52 <__udivmoddi4+0x96>
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	d909      	bls.n	8000aea <__udivmoddi4+0x12e>
 8000ad6:	2d00      	cmp	r5, #0
 8000ad8:	f000 80b1 	beq.w	8000c3e <__udivmoddi4+0x282>
 8000adc:	2600      	movs	r6, #0
 8000ade:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	4631      	mov	r1, r6
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	fab3 f683 	clz	r6, r3
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	d14a      	bne.n	8000b88 <__udivmoddi4+0x1cc>
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d302      	bcc.n	8000afc <__udivmoddi4+0x140>
 8000af6:	4282      	cmp	r2, r0
 8000af8:	f200 80b8 	bhi.w	8000c6c <__udivmoddi4+0x2b0>
 8000afc:	1a84      	subs	r4, r0, r2
 8000afe:	eb61 0103 	sbc.w	r1, r1, r3
 8000b02:	2001      	movs	r0, #1
 8000b04:	468c      	mov	ip, r1
 8000b06:	2d00      	cmp	r5, #0
 8000b08:	d0a8      	beq.n	8000a5c <__udivmoddi4+0xa0>
 8000b0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b0e:	e7a5      	b.n	8000a5c <__udivmoddi4+0xa0>
 8000b10:	f1c2 0320 	rsb	r3, r2, #32
 8000b14:	fa20 f603 	lsr.w	r6, r0, r3
 8000b18:	4097      	lsls	r7, r2
 8000b1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b22:	40d9      	lsrs	r1, r3
 8000b24:	4330      	orrs	r0, r6
 8000b26:	0c03      	lsrs	r3, r0, #16
 8000b28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b2c:	fa1f f887 	uxth.w	r8, r7
 8000b30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b38:	fb06 f108 	mul.w	r1, r6, r8
 8000b3c:	4299      	cmp	r1, r3
 8000b3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x19c>
 8000b44:	18fb      	adds	r3, r7, r3
 8000b46:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000b4a:	f080 808d 	bcs.w	8000c68 <__udivmoddi4+0x2ac>
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	f240 808a 	bls.w	8000c68 <__udivmoddi4+0x2ac>
 8000b54:	3e02      	subs	r6, #2
 8000b56:	443b      	add	r3, r7
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	b281      	uxth	r1, r0
 8000b5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b68:	fb00 f308 	mul.w	r3, r0, r8
 8000b6c:	428b      	cmp	r3, r1
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x1c4>
 8000b70:	1879      	adds	r1, r7, r1
 8000b72:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000b76:	d273      	bcs.n	8000c60 <__udivmoddi4+0x2a4>
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	d971      	bls.n	8000c60 <__udivmoddi4+0x2a4>
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	4439      	add	r1, r7
 8000b80:	1acb      	subs	r3, r1, r3
 8000b82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b86:	e778      	b.n	8000a7a <__udivmoddi4+0xbe>
 8000b88:	f1c6 0c20 	rsb	ip, r6, #32
 8000b8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000b90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000b94:	431c      	orrs	r4, r3
 8000b96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000b9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000b9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ba2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ba6:	431f      	orrs	r7, r3
 8000ba8:	0c3b      	lsrs	r3, r7, #16
 8000baa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bae:	fa1f f884 	uxth.w	r8, r4
 8000bb2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bb6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bba:	fb09 fa08 	mul.w	sl, r9, r8
 8000bbe:	458a      	cmp	sl, r1
 8000bc0:	fa02 f206 	lsl.w	r2, r2, r6
 8000bc4:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc8:	d908      	bls.n	8000bdc <__udivmoddi4+0x220>
 8000bca:	1861      	adds	r1, r4, r1
 8000bcc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bd0:	d248      	bcs.n	8000c64 <__udivmoddi4+0x2a8>
 8000bd2:	458a      	cmp	sl, r1
 8000bd4:	d946      	bls.n	8000c64 <__udivmoddi4+0x2a8>
 8000bd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bda:	4421      	add	r1, r4
 8000bdc:	eba1 010a 	sub.w	r1, r1, sl
 8000be0:	b2bf      	uxth	r7, r7
 8000be2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000bee:	fb00 f808 	mul.w	r8, r0, r8
 8000bf2:	45b8      	cmp	r8, r7
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x24a>
 8000bf6:	19e7      	adds	r7, r4, r7
 8000bf8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000bfc:	d22e      	bcs.n	8000c5c <__udivmoddi4+0x2a0>
 8000bfe:	45b8      	cmp	r8, r7
 8000c00:	d92c      	bls.n	8000c5c <__udivmoddi4+0x2a0>
 8000c02:	3802      	subs	r0, #2
 8000c04:	4427      	add	r7, r4
 8000c06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c0a:	eba7 0708 	sub.w	r7, r7, r8
 8000c0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c12:	454f      	cmp	r7, r9
 8000c14:	46c6      	mov	lr, r8
 8000c16:	4649      	mov	r1, r9
 8000c18:	d31a      	bcc.n	8000c50 <__udivmoddi4+0x294>
 8000c1a:	d017      	beq.n	8000c4c <__udivmoddi4+0x290>
 8000c1c:	b15d      	cbz	r5, 8000c36 <__udivmoddi4+0x27a>
 8000c1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000c22:	eb67 0701 	sbc.w	r7, r7, r1
 8000c26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c2a:	40f2      	lsrs	r2, r6
 8000c2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000c30:	40f7      	lsrs	r7, r6
 8000c32:	e9c5 2700 	strd	r2, r7, [r5]
 8000c36:	2600      	movs	r6, #0
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	462e      	mov	r6, r5
 8000c40:	4628      	mov	r0, r5
 8000c42:	e70b      	b.n	8000a5c <__udivmoddi4+0xa0>
 8000c44:	4606      	mov	r6, r0
 8000c46:	e6e9      	b.n	8000a1c <__udivmoddi4+0x60>
 8000c48:	4618      	mov	r0, r3
 8000c4a:	e6fd      	b.n	8000a48 <__udivmoddi4+0x8c>
 8000c4c:	4543      	cmp	r3, r8
 8000c4e:	d2e5      	bcs.n	8000c1c <__udivmoddi4+0x260>
 8000c50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c54:	eb69 0104 	sbc.w	r1, r9, r4
 8000c58:	3801      	subs	r0, #1
 8000c5a:	e7df      	b.n	8000c1c <__udivmoddi4+0x260>
 8000c5c:	4608      	mov	r0, r1
 8000c5e:	e7d2      	b.n	8000c06 <__udivmoddi4+0x24a>
 8000c60:	4660      	mov	r0, ip
 8000c62:	e78d      	b.n	8000b80 <__udivmoddi4+0x1c4>
 8000c64:	4681      	mov	r9, r0
 8000c66:	e7b9      	b.n	8000bdc <__udivmoddi4+0x220>
 8000c68:	4666      	mov	r6, ip
 8000c6a:	e775      	b.n	8000b58 <__udivmoddi4+0x19c>
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	e74a      	b.n	8000b06 <__udivmoddi4+0x14a>
 8000c70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c74:	4439      	add	r1, r7
 8000c76:	e713      	b.n	8000aa0 <__udivmoddi4+0xe4>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	443c      	add	r4, r7
 8000c7c:	e724      	b.n	8000ac8 <__udivmoddi4+0x10c>
 8000c7e:	bf00      	nop

08000c80 <__aeabi_idiv0>:
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop

08000c84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <MX_GPIO_Init+0xc4>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	4a2a      	ldr	r2, [pc, #168]	; (8000d48 <MX_GPIO_Init+0xc4>)
 8000ca0:	f043 0304 	orr.w	r3, r3, #4
 8000ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca6:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <MX_GPIO_Init+0xc4>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	f003 0304 	and.w	r3, r3, #4
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <MX_GPIO_Init+0xc4>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	4a24      	ldr	r2, [pc, #144]	; (8000d48 <MX_GPIO_Init+0xc4>)
 8000cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <MX_GPIO_Init+0xc4>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <MX_GPIO_Init+0xc4>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	4a1e      	ldr	r2, [pc, #120]	; (8000d48 <MX_GPIO_Init+0xc4>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <MX_GPIO_Init+0xc4>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_GPIO_Init+0xc4>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	4a18      	ldr	r2, [pc, #96]	; (8000d48 <MX_GPIO_Init+0xc4>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <MX_GPIO_Init+0xc4>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d02:	f000 ff9b 	bl	8001c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d0c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480b      	ldr	r0, [pc, #44]	; (8000d4c <MX_GPIO_Init+0xc8>)
 8000d1e:	f000 fde3 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d22:	2320      	movs	r3, #32
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3c:	f000 fdd4 	bl	80018e8 <HAL_GPIO_Init>

}
 8000d40:	bf00      	nop
 8000d42:	3728      	adds	r7, #40	; 0x28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	48000800 	.word	0x48000800

08000d50 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d56:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <MX_I2C1_Init+0x78>)
 8000d58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d5c:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <MX_I2C1_Init+0x7c>)
 8000d5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d8a:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d8c:	f000 ff6e 	bl	8001c6c <HAL_I2C_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d96:	f000 fa9b 	bl	80012d0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d9e:	f001 fd5f 	bl	8002860 <HAL_I2CEx_ConfigAnalogFilter>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000da8:	f000 fa92 	bl	80012d0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dac:	2100      	movs	r1, #0
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000db0:	f001 fda1 	bl	80028f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dba:	f000 fa89 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000a8 	.word	0x200000a8
 8000dc8:	40005400 	.word	0x40005400
 8000dcc:	10909cec 	.word	0x10909cec

08000dd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b0ac      	sub	sp, #176	; 0xb0
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2288      	movs	r2, #136	; 0x88
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f003 fe1f 	bl	8004a34 <memset>
  if(i2cHandle->Instance==I2C1)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <HAL_I2C_MspInit+0xb0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d13b      	bne.n	8000e78 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e00:	2340      	movs	r3, #64	; 0x40
 8000e02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f002 fc0f 	bl	8003630 <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e18:	f000 fa5a 	bl	80012d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_I2C_MspInit+0xb4>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e20:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <HAL_I2C_MspInit+0xb4>)
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_I2C_MspInit+0xb4>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3c:	2312      	movs	r3, #18
 8000e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480b      	ldr	r0, [pc, #44]	; (8000e88 <HAL_I2C_MspInit+0xb8>)
 8000e5c:	f000 fd44 	bl	80018e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_I2C_MspInit+0xb4>)
 8000e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <HAL_I2C_MspInit+0xb4>)
 8000e66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_I2C_MspInit+0xb4>)
 8000e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e78:	bf00      	nop
 8000e7a:	37b0      	adds	r7, #176	; 0xb0
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40005400 	.word	0x40005400
 8000e84:	40021000 	.word	0x40021000
 8000e88:	48000400 	.word	0x48000400

08000e8c <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int fd, char* ptr, int len)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea0:	68b9      	ldr	r1, [r7, #8]
 8000ea2:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <_write+0x28>)
 8000ea4:	f003 f8ce 	bl	8004044 <HAL_UART_Transmit>
	return len;
 8000ea8:	687b      	ldr	r3, [r7, #4]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000104 	.word	0x20000104

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ebe:	f000 fbb1 	bl	8001624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec2:	f000 f8ad 	bl	8001020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec6:	f7ff fedd 	bl	8000c84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eca:	f000 faf5 	bl	80014b8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ece:	f7ff ff3f 	bl	8000d50 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  if (HAL_I2C_IsDeviceReady(&hi2c1, SRF10_ADDR, 10, 5000) == HAL_OK)
 8000ed2:	23e0      	movs	r3, #224	; 0xe0
 8000ed4:	b299      	uxth	r1, r3
 8000ed6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000eda:	220a      	movs	r2, #10
 8000edc:	4845      	ldr	r0, [pc, #276]	; (8000ff4 <main+0x13c>)
 8000ede:	f001 f93f 	bl	8002160 <HAL_I2C_IsDeviceReady>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d116      	bne.n	8000f16 <main+0x5e>
  {
	  printf("%X Device is ready!\r\n", SRF10_ADDR);
 8000ee8:	23e0      	movs	r3, #224	; 0xe0
 8000eea:	4619      	mov	r1, r3
 8000eec:	4842      	ldr	r0, [pc, #264]	; (8000ff8 <main+0x140>)
 8000eee:	f003 fda9 	bl	8004a44 <iprintf>
	  Read_SRF10_Firmware_Revision(SRF10_ADDR);
 8000ef2:	23e0      	movs	r3, #224	; 0xe0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 f8e5 	bl	80010c4 <Read_SRF10_Firmware_Revision>
	  Initialize_SRF10(SRF10_ADDR, t_gain, t_range);
 8000efa:	20e0      	movs	r0, #224	; 0xe0
 8000efc:	4b3f      	ldr	r3, [pc, #252]	; (8000ffc <main+0x144>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4a3f      	ldr	r2, [pc, #252]	; (8001000 <main+0x148>)
 8000f02:	ed92 7b00 	vldr	d7, [r2]
 8000f06:	eeb0 0a47 	vmov.f32	s0, s14
 8000f0a:	eef0 0a67 	vmov.f32	s1, s15
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f000 f8f0 	bl	80010f4 <Initialize_SRF10>
 8000f14:	e001      	b.n	8000f1a <main+0x62>
  }
  else
  {
	  Error_Handler();
 8000f16:	f000 f9db 	bl	80012d0 <Error_Handler>
  }

  // Example of addressing another device on I2C bus
  if (HAL_I2C_IsDeviceReady(&hi2c1, SRF10_ADDR_2, 10, 5000) == HAL_OK)
 8000f1a:	23e6      	movs	r3, #230	; 0xe6
 8000f1c:	b299      	uxth	r1, r3
 8000f1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f22:	220a      	movs	r2, #10
 8000f24:	4833      	ldr	r0, [pc, #204]	; (8000ff4 <main+0x13c>)
 8000f26:	f001 f91b 	bl	8002160 <HAL_I2C_IsDeviceReady>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d116      	bne.n	8000f5e <main+0xa6>
    {
  	  printf("%X Device is ready!\r\n", SRF10_ADDR_2);
 8000f30:	23e6      	movs	r3, #230	; 0xe6
 8000f32:	4619      	mov	r1, r3
 8000f34:	4830      	ldr	r0, [pc, #192]	; (8000ff8 <main+0x140>)
 8000f36:	f003 fd85 	bl	8004a44 <iprintf>
  	  Read_SRF10_Firmware_Revision(SRF10_ADDR_2);
 8000f3a:	23e6      	movs	r3, #230	; 0xe6
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 f8c1 	bl	80010c4 <Read_SRF10_Firmware_Revision>
  	  Initialize_SRF10(SRF10_ADDR_2, t_gain, t_range);
 8000f42:	20e6      	movs	r0, #230	; 0xe6
 8000f44:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <main+0x144>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4a2d      	ldr	r2, [pc, #180]	; (8001000 <main+0x148>)
 8000f4a:	ed92 7b00 	vldr	d7, [r2]
 8000f4e:	eeb0 0a47 	vmov.f32	s0, s14
 8000f52:	eef0 0a67 	vmov.f32	s1, s15
 8000f56:	4619      	mov	r1, r3
 8000f58:	f000 f8cc 	bl	80010f4 <Initialize_SRF10>
 8000f5c:	e001      	b.n	8000f62 <main+0xaa>
    }
  else
  {
	  Error_Handler();
 8000f5e:	f000 f9b7 	bl	80012d0 <Error_Handler>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Setting up to get data in microseconds
	  if (SRF10_WriteRegister(SRF10_ADDR, COMMAND_REG, RANGE_MODE_CENTIMETER) != HAL_OK)
 8000f62:	23e0      	movs	r3, #224	; 0xe0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2251      	movs	r2, #81	; 0x51
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f98d 	bl	8001288 <SRF10_WriteRegister>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d004      	beq.n	8000f7e <main+0xc6>
	  {
		  printf("Retrieving data ERROR\r\n");
 8000f74:	4823      	ldr	r0, [pc, #140]	; (8001004 <main+0x14c>)
 8000f76:	f003 fdeb 	bl	8004b50 <puts>
		  Error_Handler();
 8000f7a:	f000 f9a9 	bl	80012d0 <Error_Handler>
	  }

	  // --- Reading sensor data ---
	  // Adding delay until register is finished reading
	  uint8_t command_register_value = 0xFF;
 8000f7e:	23ff      	movs	r3, #255	; 0xff
 8000f80:	71fb      	strb	r3, [r7, #7]
	  while (command_register_value == 0xFF)
 8000f82:	e005      	b.n	8000f90 <main+0xd8>
	  {
		  SRF10_ReadRegister(SRF10_ADDR, COMMAND_REG, &command_register_value);
 8000f84:	20e0      	movs	r0, #224	; 0xe0
 8000f86:	2100      	movs	r1, #0
 8000f88:	1dfb      	adds	r3, r7, #7
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f000 f94e 	bl	800122c <SRF10_ReadRegister>
	  while (command_register_value == 0xFF)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2bff      	cmp	r3, #255	; 0xff
 8000f94:	d0f6      	beq.n	8000f84 <main+0xcc>
	  }

	  // Reading from high and low byte registers
	  if (SRF10_ReadRegister(SRF10_ADDR, RANGE_HIGH_REG, &high_byte) != HAL_OK)
 8000f96:	23e0      	movs	r3, #224	; 0xe0
 8000f98:	2102      	movs	r1, #2
 8000f9a:	4a1b      	ldr	r2, [pc, #108]	; (8001008 <main+0x150>)
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 f945 	bl	800122c <SRF10_ReadRegister>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d004      	beq.n	8000fb2 <main+0xfa>
	  {
		  printf("High byte ERROR\r\n");
 8000fa8:	4818      	ldr	r0, [pc, #96]	; (800100c <main+0x154>)
 8000faa:	f003 fdd1 	bl	8004b50 <puts>
		  Error_Handler();
 8000fae:	f000 f98f 	bl	80012d0 <Error_Handler>
	  }
	  if (SRF10_ReadRegister(SRF10_ADDR, RANGE_LOW_REG, &low_byte) != HAL_OK)
 8000fb2:	23e0      	movs	r3, #224	; 0xe0
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	4a16      	ldr	r2, [pc, #88]	; (8001010 <main+0x158>)
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f937 	bl	800122c <SRF10_ReadRegister>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <main+0x116>
	  {
		  printf("Low byte ERROR\r\n");
 8000fc4:	4813      	ldr	r0, [pc, #76]	; (8001014 <main+0x15c>)
 8000fc6:	f003 fdc3 	bl	8004b50 <puts>
		  Error_Handler();
 8000fca:	f000 f981 	bl	80012d0 <Error_Handler>
	  }

	  distance_value = (((uint16_t)high_byte) << 8) + low_byte;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <main+0x150>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <main+0x158>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	4413      	add	r3, r2
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <main+0x160>)
 8000fe4:	801a      	strh	r2, [r3, #0]
	  printf("Range: %hu cm\r\n", distance_value);
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <main+0x160>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	4619      	mov	r1, r3
 8000fec:	480b      	ldr	r0, [pc, #44]	; (800101c <main+0x164>)
 8000fee:	f003 fd29 	bl	8004a44 <iprintf>
  {
 8000ff2:	e7b6      	b.n	8000f62 <main+0xaa>
 8000ff4:	200000a8 	.word	0x200000a8
 8000ff8:	080059f4 	.word	0x080059f4
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000008 	.word	0x20000008
 8001004:	08005a0c 	.word	0x08005a0c
 8001008:	200000fd 	.word	0x200000fd
 800100c:	08005a24 	.word	0x08005a24
 8001010:	200000f4 	.word	0x200000f4
 8001014:	08005a38 	.word	0x08005a38
 8001018:	20000100 	.word	0x20000100
 800101c:	08005a48 	.word	0x08005a48

08001020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b096      	sub	sp, #88	; 0x58
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	2244      	movs	r2, #68	; 0x44
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f003 fd00 	bl	8004a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001034:	463b      	mov	r3, r7
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001042:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001046:	f001 fcb1 	bl	80029ac <HAL_PWREx_ControlVoltageScaling>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001050:	f000 f93e 	bl	80012d0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001054:	2302      	movs	r3, #2
 8001056:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800105c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105e:	2310      	movs	r3, #16
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001062:	2302      	movs	r3, #2
 8001064:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001066:	2302      	movs	r3, #2
 8001068:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800106e:	230a      	movs	r3, #10
 8001070:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001072:	2307      	movs	r3, #7
 8001074:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001076:	2302      	movs	r3, #2
 8001078:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800107a:	2302      	movs	r3, #2
 800107c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4618      	mov	r0, r3
 8001084:	f001 fce8 	bl	8002a58 <HAL_RCC_OscConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800108e:	f000 f91f 	bl	80012d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001092:	230f      	movs	r3, #15
 8001094:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001096:	2303      	movs	r3, #3
 8001098:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010a6:	463b      	mov	r3, r7
 80010a8:	2104      	movs	r1, #4
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 f8ba 	bl	8003224 <HAL_RCC_ClockConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010b6:	f000 f90b 	bl	80012d0 <Error_Handler>
  }
}
 80010ba:	bf00      	nop
 80010bc:	3758      	adds	r7, #88	; 0x58
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <Read_SRF10_Firmware_Revision>:

/* USER CODE BEGIN 4 */

// Reads firmware register
void Read_SRF10_Firmware_Revision(uint8_t device_address)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[5];

	// Telling to read from firmware revision register
	SRF10_ReadRegister(device_address, FIRMWARE_REV_REG, buf);
 80010ce:	2100      	movs	r1, #0
 80010d0:	f107 0208 	add.w	r2, r7, #8
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f8a8 	bl	800122c <SRF10_ReadRegister>

	printf("%X sonar firmware revision: %d\r\n", device_address, buf[0]);
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	7a3a      	ldrb	r2, [r7, #8]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4803      	ldr	r0, [pc, #12]	; (80010f0 <Read_SRF10_Firmware_Revision+0x2c>)
 80010e4:	f003 fcae 	bl	8004a44 <iprintf>
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	08005a58 	.word	0x08005a58

080010f4 <Initialize_SRF10>:
 * Initializes sonar sensor at device address by initializing the
 * gains and maximum range.
 *
 */
void Initialize_SRF10(uint8_t device_address, uint8_t max_gain, double max_range)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	460a      	mov	r2, r1
 80010fe:	ed87 0b00 	vstr	d0, [r7]
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	4613      	mov	r3, r2
 8001106:	73bb      	strb	r3, [r7, #14]
	if (SRF10_Set_Gain(max_gain) != HAL_OK)
 8001108:	7bbb      	ldrb	r3, [r7, #14]
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f824 	bl	8001158 <SRF10_Set_Gain>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d004      	beq.n	8001120 <Initialize_SRF10+0x2c>
	{
		printf("Setting gain ERROR\r\n");
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <Initialize_SRF10+0x58>)
 8001118:	f003 fd1a 	bl	8004b50 <puts>
		Error_Handler();
 800111c:	f000 f8d8 	bl	80012d0 <Error_Handler>
	}
	if (SRF10_Set_Range(max_range) != HAL_OK)
 8001120:	ed97 0b00 	vldr	d0, [r7]
 8001124:	f000 f830 	bl	8001188 <SRF10_Set_Range>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d004      	beq.n	8001138 <Initialize_SRF10+0x44>
	{
		printf("Setting range ERROR\r\n");
 800112e:	4808      	ldr	r0, [pc, #32]	; (8001150 <Initialize_SRF10+0x5c>)
 8001130:	f003 fd0e 	bl	8004b50 <puts>
		Error_Handler();
 8001134:	f000 f8cc 	bl	80012d0 <Error_Handler>
	}
	printf("%X sonar initialized\r\n", device_address);
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <Initialize_SRF10+0x60>)
 800113e:	f003 fc81 	bl	8004a44 <iprintf>
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	08005a7c 	.word	0x08005a7c
 8001150:	08005a90 	.word	0x08005a90
 8001154:	08005aa8 	.word	0x08005aa8

08001158 <SRF10_Set_Gain>:
/*
 * Sets the gain of the SRF10 sonar sensor.
 *
 */
HAL_StatusTypeDef SRF10_Set_Gain(uint8_t max_gain)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	if (SRF10_WriteRegister(SRF10_ADDR, GAIN_REG, max_gain) != HAL_OK)
 8001162:	20e0      	movs	r0, #224	; 0xe0
 8001164:	2101      	movs	r1, #1
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	461a      	mov	r2, r3
 800116a:	f000 f88d 	bl	8001288 <SRF10_WriteRegister>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SRF10_Set_Gain+0x20>
	{
		return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <SRF10_Set_Gain+0x22>
	}
	return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	0000      	movs	r0, r0
 8001184:	0000      	movs	r0, r0
	...

08001188 <SRF10_Set_Range>:
/*
 * Sets the range of the SRF10 sonar sensor.
 *
 */
HAL_StatusTypeDef SRF10_Set_Range(double max_range)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	ed87 0b00 	vstr	d0, [r7]
	// Range limits
	if (max_range > 6.0 || max_range < 0.0)
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	4b24      	ldr	r3, [pc, #144]	; (8001228 <SRF10_Set_Range+0xa0>)
 8001198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800119c:	f7ff fbcc 	bl	8000938 <__aeabi_dcmpgt>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10a      	bne.n	80011bc <SRF10_Set_Range+0x34>
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	f04f 0300 	mov.w	r3, #0
 80011ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011b2:	f7ff fba3 	bl	80008fc <__aeabi_dcmplt>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <SRF10_Set_Range+0x3e>
	{
		max_range = 6.0;
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <SRF10_Set_Range+0xa0>)
 80011c2:	e9c7 2300 	strd	r2, r3, [r7]
	}

	uint8_t range_command = (uint8_t)((max_range - 0.043)*23.26);
 80011c6:	a314      	add	r3, pc, #80	; (adr r3, 8001218 <SRF10_Set_Range+0x90>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011d0:	f7ff f97c 	bl	80004cc <__aeabi_dsub>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	a310      	add	r3, pc, #64	; (adr r3, 8001220 <SRF10_Set_Range+0x98>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	f7ff f845 	bl	8000270 <__aeabi_dmul>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fbad 	bl	800094c <__aeabi_d2uiz>
 80011f2:	4603      	mov	r3, r0
 80011f4:	73fb      	strb	r3, [r7, #15]
	if (SRF10_WriteRegister(SRF10_ADDR, RANGE_REG, range_command) != HAL_OK)
 80011f6:	20e0      	movs	r0, #224	; 0xe0
 80011f8:	2102      	movs	r1, #2
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	461a      	mov	r2, r3
 80011fe:	f000 f843 	bl	8001288 <SRF10_WriteRegister>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SRF10_Set_Range+0x84>
	{
		return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <SRF10_Set_Range+0x86>
	}

	return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	9374bc6a 	.word	0x9374bc6a
 800121c:	3fa60418 	.word	0x3fa60418
 8001220:	5c28f5c3 	.word	0x5c28f5c3
 8001224:	4037428f 	.word	0x4037428f
 8001228:	40180000 	.word	0x40180000

0800122c <SRF10_ReadRegister>:
/*
 * Reads from the register of SRF10 using I2C
 *
 */
HAL_StatusTypeDef SRF10_ReadRegister(uint8_t device_address, uint8_t register_address, uint8_t* data_buffer_ptr)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af02      	add	r7, sp, #8
 8001232:	4603      	mov	r3, r0
 8001234:	603a      	str	r2, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
 8001238:	460b      	mov	r3, r1
 800123a:	71bb      	strb	r3, [r7, #6]
	if (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)device_address, &register_address, 1, I2C_TIMEOUT) != HAL_OK)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	b299      	uxth	r1, r3
 8001240:	f241 3388 	movw	r3, #5000	; 0x1388
 8001244:	1dba      	adds	r2, r7, #6
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2301      	movs	r3, #1
 800124a:	480e      	ldr	r0, [pc, #56]	; (8001284 <SRF10_ReadRegister+0x58>)
 800124c:	f000 fd9e 	bl	8001d8c <HAL_I2C_Master_Transmit>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SRF10_ReadRegister+0x2e>
	{
		return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SRF10_ReadRegister+0x4e>
	}

	if (HAL_I2C_Master_Receive(&hi2c1, (uint16_t)device_address, data_buffer_ptr, 1, I2C_TIMEOUT) != HAL_OK)
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	b299      	uxth	r1, r3
 800125e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2301      	movs	r3, #1
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	4806      	ldr	r0, [pc, #24]	; (8001284 <SRF10_ReadRegister+0x58>)
 800126a:	f000 fe83 	bl	8001f74 <HAL_I2C_Master_Receive>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SRF10_ReadRegister+0x4c>
	{
		return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e000      	b.n	800127a <SRF10_ReadRegister+0x4e>
	}

	return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200000a8 	.word	0x200000a8

08001288 <SRF10_WriteRegister>:
/*
 * Writes to the register of SRF10 using I2C
 *
 */
HAL_StatusTypeDef SRF10_WriteRegister(uint8_t device_address, uint8_t register_address, uint8_t value)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	460b      	mov	r3, r1
 8001294:	71bb      	strb	r3, [r7, #6]
 8001296:	4613      	mov	r3, r2
 8001298:	717b      	strb	r3, [r7, #5]
	uint8_t command_buffer[2];
	command_buffer[0] = register_address;
 800129a:	79bb      	ldrb	r3, [r7, #6]
 800129c:	733b      	strb	r3, [r7, #12]
	command_buffer[1] = value;
 800129e:	797b      	ldrb	r3, [r7, #5]
 80012a0:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)device_address, command_buffer, 2, I2C_TIMEOUT) != HAL_OK)
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	b299      	uxth	r1, r3
 80012a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80012aa:	f107 020c 	add.w	r2, r7, #12
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2302      	movs	r3, #2
 80012b2:	4806      	ldr	r0, [pc, #24]	; (80012cc <SRF10_WriteRegister+0x44>)
 80012b4:	f000 fd6a 	bl	8001d8c <HAL_I2C_Master_Transmit>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SRF10_WriteRegister+0x3a>
	{
		return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <SRF10_WriteRegister+0x3c>
	}

	return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200000a8 	.word	0x200000a8

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
//	  printf("ERROR!!!\r\n");
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	2120      	movs	r1, #32
 80012dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e0:	f000 fcac 	bl	8001c3c <HAL_GPIO_WritePin>
 80012e4:	e7f8      	b.n	80012d8 <Error_Handler+0x8>
	...

080012e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_MspInit+0x44>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_MspInit+0x44>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6613      	str	r3, [r2, #96]	; 0x60
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_MspInit+0x44>)
 80012fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_MspInit+0x44>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_MspInit+0x44>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	6593      	str	r3, [r2, #88]	; 0x58
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_MspInit+0x44>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <NMI_Handler+0x4>

08001336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133a:	e7fe      	b.n	800133a <HardFault_Handler+0x4>

0800133c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <MemManage_Handler+0x4>

08001342 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001346:	e7fe      	b.n	8001346 <BusFault_Handler+0x4>

08001348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <UsageFault_Handler+0x4>

0800134e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137c:	f000 f9ae 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}

08001384 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	e00a      	b.n	80013ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001396:	f3af 8000 	nop.w
 800139a:	4601      	mov	r1, r0
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	60ba      	str	r2, [r7, #8]
 80013a2:	b2ca      	uxtb	r2, r1
 80013a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	3301      	adds	r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	dbf0      	blt.n	8001396 <_read+0x12>
	}

return len;
 80013b4:	687b      	ldr	r3, [r7, #4]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <_close>:
	}
	return len;
}

int _close(int file)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
	return -1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e6:	605a      	str	r2, [r3, #4]
	return 0;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <_isatty>:

int _isatty(int file)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
	return 1;
 80013fe:	2301      	movs	r3, #1
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
	return 0;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001430:	4a14      	ldr	r2, [pc, #80]	; (8001484 <_sbrk+0x5c>)
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <_sbrk+0x60>)
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <_sbrk+0x64>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <_sbrk+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	429a      	cmp	r2, r3
 8001456:	d207      	bcs.n	8001468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001458:	f003 fac2 	bl	80049e0 <__errno>
 800145c:	4603      	mov	r3, r0
 800145e:	220c      	movs	r2, #12
 8001460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001466:	e009      	b.n	800147c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <_sbrk+0x64>)
 8001478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20018000 	.word	0x20018000
 8001488:	00000400 	.word	0x00000400
 800148c:	2000009c 	.word	0x2000009c
 8001490:	200001a0 	.word	0x200001a0

08001494 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <SystemInit+0x20>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <SystemInit+0x20>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014be:	4a15      	ldr	r2, [pc, #84]	; (8001514 <MX_USART2_UART_Init+0x5c>)
 80014c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014de:	220c      	movs	r2, #12
 80014e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_USART2_UART_Init+0x58>)
 80014fc:	f002 fd54 	bl	8003fa8 <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001506:	f7ff fee3 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000104 	.word	0x20000104
 8001514:	40004400 	.word	0x40004400

08001518 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b0ac      	sub	sp, #176	; 0xb0
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2288      	movs	r2, #136	; 0x88
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f003 fa7b 	bl	8004a34 <memset>
  if(uartHandle->Instance==USART2)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a21      	ldr	r2, [pc, #132]	; (80015c8 <HAL_UART_MspInit+0xb0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d13b      	bne.n	80015c0 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001548:	2302      	movs	r3, #2
 800154a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800154c:	2300      	movs	r3, #0
 800154e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4618      	mov	r0, r3
 8001556:	f002 f86b 	bl	8003630 <HAL_RCCEx_PeriphCLKConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001560:	f7ff feb6 	bl	80012d0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_UART_MspInit+0xb4>)
 8001566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001568:	4a18      	ldr	r2, [pc, #96]	; (80015cc <HAL_UART_MspInit+0xb4>)
 800156a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156e:	6593      	str	r3, [r2, #88]	; 0x58
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <HAL_UART_MspInit+0xb4>)
 8001572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <HAL_UART_MspInit+0xb4>)
 800157e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001580:	4a12      	ldr	r2, [pc, #72]	; (80015cc <HAL_UART_MspInit+0xb4>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_UART_MspInit+0xb4>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001594:	230c      	movs	r3, #12
 8001596:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ac:	2307      	movs	r3, #7
 80015ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015bc:	f000 f994 	bl	80018e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015c0:	bf00      	nop
 80015c2:	37b0      	adds	r7, #176	; 0xb0
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40004400 	.word	0x40004400
 80015cc:	40021000 	.word	0x40021000

080015d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001608 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015d4:	f7ff ff5e 	bl	8001494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <LoopForever+0x6>)
  ldr r1, =_edata
 80015da:	490d      	ldr	r1, [pc, #52]	; (8001610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <LoopForever+0xe>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e0:	e002      	b.n	80015e8 <LoopCopyDataInit>

080015e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e6:	3304      	adds	r3, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ec:	d3f9      	bcc.n	80015e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015f0:	4c0a      	ldr	r4, [pc, #40]	; (800161c <LoopForever+0x16>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f4:	e001      	b.n	80015fa <LoopFillZerobss>

080015f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f8:	3204      	adds	r2, #4

080015fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015fc:	d3fb      	bcc.n	80015f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015fe:	f003 f9f5 	bl	80049ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001602:	f7ff fc59 	bl	8000eb8 <main>

08001606 <LoopForever>:

LoopForever:
    b LoopForever
 8001606:	e7fe      	b.n	8001606 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001608:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800160c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001610:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001614:	08005bb0 	.word	0x08005bb0
  ldr r2, =_sbss
 8001618:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800161c:	2000019c 	.word	0x2000019c

08001620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <ADC1_2_IRQHandler>
	...

08001624 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_Init+0x3c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <HAL_Init+0x3c>)
 8001634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001638:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163a:	2003      	movs	r0, #3
 800163c:	f000 f920 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001640:	2000      	movs	r0, #0
 8001642:	f000 f80f 	bl	8001664 <HAL_InitTick>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	71fb      	strb	r3, [r7, #7]
 8001650:	e001      	b.n	8001656 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001652:	f7ff fe49 	bl	80012e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001656:	79fb      	ldrb	r3, [r7, #7]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40022000 	.word	0x40022000

08001664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_InitTick+0x6c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d023      	beq.n	80016c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <HAL_InitTick+0x70>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <HAL_InitTick+0x6c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001686:	fbb3 f3f1 	udiv	r3, r3, r1
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f91d 	bl	80018ce <HAL_SYSTICK_Config>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10f      	bne.n	80016ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b0f      	cmp	r3, #15
 800169e:	d809      	bhi.n	80016b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a0:	2200      	movs	r2, #0
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016a8:	f000 f8f5 	bl	8001896 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016ac:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <HAL_InitTick+0x74>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e007      	b.n	80016c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	e004      	b.n	80016c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	73fb      	strb	r3, [r7, #15]
 80016be:	e001      	b.n	80016c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000018 	.word	0x20000018
 80016d4:	20000010 	.word	0x20000010
 80016d8:	20000014 	.word	0x20000014

080016dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x20>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x24>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_IncTick+0x24>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000018 	.word	0x20000018
 8001700:	20000188 	.word	0x20000188

08001704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <HAL_GetTick+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000188 	.word	0x20000188

0800171c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <__NVIC_SetPriorityGrouping+0x44>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001738:	4013      	ands	r3, r2
 800173a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800174c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174e:	4a04      	ldr	r2, [pc, #16]	; (8001760 <__NVIC_SetPriorityGrouping+0x44>)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	60d3      	str	r3, [r2, #12]
}
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001768:	4b04      	ldr	r3, [pc, #16]	; (800177c <__NVIC_GetPriorityGrouping+0x18>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	f003 0307 	and.w	r3, r3, #7
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	db0a      	blt.n	80017aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	490c      	ldr	r1, [pc, #48]	; (80017cc <__NVIC_SetPriority+0x4c>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a8:	e00a      	b.n	80017c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4908      	ldr	r1, [pc, #32]	; (80017d0 <__NVIC_SetPriority+0x50>)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	3b04      	subs	r3, #4
 80017b8:	0112      	lsls	r2, r2, #4
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	440b      	add	r3, r1
 80017be:	761a      	strb	r2, [r3, #24]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000e100 	.word	0xe000e100
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f1c3 0307 	rsb	r3, r3, #7
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	bf28      	it	cs
 80017f2:	2304      	movcs	r3, #4
 80017f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3304      	adds	r3, #4
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d902      	bls.n	8001804 <NVIC_EncodePriority+0x30>
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3b03      	subs	r3, #3
 8001802:	e000      	b.n	8001806 <NVIC_EncodePriority+0x32>
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	401a      	ands	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800181c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa01 f303 	lsl.w	r3, r1, r3
 8001826:	43d9      	mvns	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	4313      	orrs	r3, r2
         );
}
 800182e:	4618      	mov	r0, r3
 8001830:	3724      	adds	r7, #36	; 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800184c:	d301      	bcc.n	8001852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2301      	movs	r3, #1
 8001850:	e00f      	b.n	8001872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001852:	4a0a      	ldr	r2, [pc, #40]	; (800187c <SysTick_Config+0x40>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185a:	210f      	movs	r1, #15
 800185c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001860:	f7ff ff8e 	bl	8001780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <SysTick_Config+0x40>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <SysTick_Config+0x40>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff47 	bl	800171c <__NVIC_SetPriorityGrouping>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018a8:	f7ff ff5c 	bl	8001764 <__NVIC_GetPriorityGrouping>
 80018ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68b9      	ldr	r1, [r7, #8]
 80018b2:	6978      	ldr	r0, [r7, #20]
 80018b4:	f7ff ff8e 	bl	80017d4 <NVIC_EncodePriority>
 80018b8:	4602      	mov	r2, r0
 80018ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff5d 	bl	8001780 <__NVIC_SetPriority>
}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffb0 	bl	800183c <SysTick_Config>
 80018dc:	4603      	mov	r3, r0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f6:	e17f      	b.n	8001bf8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2101      	movs	r1, #1
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	4013      	ands	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 8171 	beq.w	8001bf2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d005      	beq.n	8001928 <HAL_GPIO_Init+0x40>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d130      	bne.n	800198a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	2203      	movs	r2, #3
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800195e:	2201      	movs	r2, #1
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	091b      	lsrs	r3, r3, #4
 8001974:	f003 0201 	and.w	r2, r3, #1
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b03      	cmp	r3, #3
 8001994:	d118      	bne.n	80019c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800199c:	2201      	movs	r2, #1
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	f003 0201 	and.w	r2, r3, #1
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d017      	beq.n	8001a04 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d123      	bne.n	8001a58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	08da      	lsrs	r2, r3, #3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3208      	adds	r2, #8
 8001a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	220f      	movs	r2, #15
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	08da      	lsrs	r2, r3, #3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3208      	adds	r2, #8
 8001a52:	6939      	ldr	r1, [r7, #16]
 8001a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2203      	movs	r2, #3
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0203 	and.w	r2, r3, #3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80ac 	beq.w	8001bf2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	4b5f      	ldr	r3, [pc, #380]	; (8001c18 <HAL_GPIO_Init+0x330>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9e:	4a5e      	ldr	r2, [pc, #376]	; (8001c18 <HAL_GPIO_Init+0x330>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6613      	str	r3, [r2, #96]	; 0x60
 8001aa6:	4b5c      	ldr	r3, [pc, #368]	; (8001c18 <HAL_GPIO_Init+0x330>)
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ab2:	4a5a      	ldr	r2, [pc, #360]	; (8001c1c <HAL_GPIO_Init+0x334>)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	220f      	movs	r2, #15
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001adc:	d025      	beq.n	8001b2a <HAL_GPIO_Init+0x242>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a4f      	ldr	r2, [pc, #316]	; (8001c20 <HAL_GPIO_Init+0x338>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d01f      	beq.n	8001b26 <HAL_GPIO_Init+0x23e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4e      	ldr	r2, [pc, #312]	; (8001c24 <HAL_GPIO_Init+0x33c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d019      	beq.n	8001b22 <HAL_GPIO_Init+0x23a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a4d      	ldr	r2, [pc, #308]	; (8001c28 <HAL_GPIO_Init+0x340>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <HAL_GPIO_Init+0x236>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4c      	ldr	r2, [pc, #304]	; (8001c2c <HAL_GPIO_Init+0x344>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00d      	beq.n	8001b1a <HAL_GPIO_Init+0x232>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4b      	ldr	r2, [pc, #300]	; (8001c30 <HAL_GPIO_Init+0x348>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d007      	beq.n	8001b16 <HAL_GPIO_Init+0x22e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4a      	ldr	r2, [pc, #296]	; (8001c34 <HAL_GPIO_Init+0x34c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d101      	bne.n	8001b12 <HAL_GPIO_Init+0x22a>
 8001b0e:	2306      	movs	r3, #6
 8001b10:	e00c      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b12:	2307      	movs	r3, #7
 8001b14:	e00a      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b16:	2305      	movs	r3, #5
 8001b18:	e008      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e004      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e002      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_GPIO_Init+0x244>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	f002 0203 	and.w	r2, r2, #3
 8001b32:	0092      	lsls	r2, r2, #2
 8001b34:	4093      	lsls	r3, r2
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b3c:	4937      	ldr	r1, [pc, #220]	; (8001c1c <HAL_GPIO_Init+0x334>)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	3302      	adds	r3, #2
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b6e:	4a32      	ldr	r2, [pc, #200]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b74:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b98:	4a27      	ldr	r2, [pc, #156]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b9e:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bc2:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bec:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f47f ae78 	bne.w	80018f8 <HAL_GPIO_Init+0x10>
  }
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	371c      	adds	r7, #28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	48000400 	.word	0x48000400
 8001c24:	48000800 	.word	0x48000800
 8001c28:	48000c00 	.word	0x48000c00
 8001c2c:	48001000 	.word	0x48001000
 8001c30:	48001400 	.word	0x48001400
 8001c34:	48001800 	.word	0x48001800
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c4c:	787b      	ldrb	r3, [r7, #1]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e081      	b.n	8001d82 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d106      	bne.n	8001c98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff f89c 	bl	8000dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2224      	movs	r2, #36	; 0x24
 8001c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ccc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d107      	bne.n	8001ce6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	e006      	b.n	8001cf4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001cf2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d104      	bne.n	8001d06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691a      	ldr	r2, [r3, #16]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69d9      	ldr	r1, [r3, #28]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a1a      	ldr	r2, [r3, #32]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	461a      	mov	r2, r3
 8001d98:	460b      	mov	r3, r1
 8001d9a:	817b      	strh	r3, [r7, #10]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b20      	cmp	r3, #32
 8001daa:	f040 80da 	bne.w	8001f62 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_I2C_Master_Transmit+0x30>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e0d3      	b.n	8001f64 <HAL_I2C_Master_Transmit+0x1d8>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dc4:	f7ff fc9e 	bl	8001704 <HAL_GetTick>
 8001dc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2319      	movs	r3, #25
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 faed 	bl	80023b6 <I2C_WaitOnFlagUntilTimeout>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0be      	b.n	8001f64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2221      	movs	r2, #33	; 0x21
 8001dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2210      	movs	r2, #16
 8001df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	893a      	ldrh	r2, [r7, #8]
 8001e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	2bff      	cmp	r3, #255	; 0xff
 8001e16:	d90e      	bls.n	8001e36 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	22ff      	movs	r2, #255	; 0xff
 8001e1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	8979      	ldrh	r1, [r7, #10]
 8001e26:	4b51      	ldr	r3, [pc, #324]	; (8001f6c <HAL_I2C_Master_Transmit+0x1e0>)
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 fce4 	bl	80027fc <I2C_TransferConfig>
 8001e34:	e06c      	b.n	8001f10 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	8979      	ldrh	r1, [r7, #10]
 8001e48:	4b48      	ldr	r3, [pc, #288]	; (8001f6c <HAL_I2C_Master_Transmit+0x1e0>)
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 fcd3 	bl	80027fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e56:	e05b      	b.n	8001f10 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	6a39      	ldr	r1, [r7, #32]
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 faea 	bl	8002436 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e07b      	b.n	8001f64 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d034      	beq.n	8001f10 <HAL_I2C_Master_Transmit+0x184>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d130      	bne.n	8001f10 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2180      	movs	r1, #128	; 0x80
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f000 fa7c 	bl	80023b6 <I2C_WaitOnFlagUntilTimeout>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e04d      	b.n	8001f64 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	2bff      	cmp	r3, #255	; 0xff
 8001ed0:	d90e      	bls.n	8001ef0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	22ff      	movs	r2, #255	; 0xff
 8001ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	8979      	ldrh	r1, [r7, #10]
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 fc87 	bl	80027fc <I2C_TransferConfig>
 8001eee:	e00f      	b.n	8001f10 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	8979      	ldrh	r1, [r7, #10]
 8001f02:	2300      	movs	r3, #0
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 fc76 	bl	80027fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d19e      	bne.n	8001e58 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	6a39      	ldr	r1, [r7, #32]
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 fac9 	bl	80024b6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e01a      	b.n	8001f64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2220      	movs	r2, #32
 8001f34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6859      	ldr	r1, [r3, #4]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_I2C_Master_Transmit+0x1e4>)
 8001f42:	400b      	ands	r3, r1
 8001f44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e000      	b.n	8001f64 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001f62:	2302      	movs	r3, #2
  }
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	80002000 	.word	0x80002000
 8001f70:	fe00e800 	.word	0xfe00e800

08001f74 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	460b      	mov	r3, r1
 8001f82:	817b      	strh	r3, [r7, #10]
 8001f84:	4613      	mov	r3, r2
 8001f86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	f040 80db 	bne.w	800214c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_I2C_Master_Receive+0x30>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e0d4      	b.n	800214e <HAL_I2C_Master_Receive+0x1da>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fac:	f7ff fbaa 	bl	8001704 <HAL_GetTick>
 8001fb0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	2319      	movs	r3, #25
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f9f9 	bl	80023b6 <I2C_WaitOnFlagUntilTimeout>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e0bf      	b.n	800214e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2222      	movs	r2, #34	; 0x22
 8001fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2210      	movs	r2, #16
 8001fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	893a      	ldrh	r2, [r7, #8]
 8001fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	2bff      	cmp	r3, #255	; 0xff
 8001ffe:	d90e      	bls.n	800201e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	22ff      	movs	r2, #255	; 0xff
 8002004:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200a:	b2da      	uxtb	r2, r3
 800200c:	8979      	ldrh	r1, [r7, #10]
 800200e:	4b52      	ldr	r3, [pc, #328]	; (8002158 <HAL_I2C_Master_Receive+0x1e4>)
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 fbf0 	bl	80027fc <I2C_TransferConfig>
 800201c:	e06d      	b.n	80020fa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202c:	b2da      	uxtb	r2, r3
 800202e:	8979      	ldrh	r1, [r7, #10]
 8002030:	4b49      	ldr	r3, [pc, #292]	; (8002158 <HAL_I2C_Master_Receive+0x1e4>)
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 fbdf 	bl	80027fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800203e:	e05c      	b.n	80020fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	6a39      	ldr	r1, [r7, #32]
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 fa73 	bl	8002530 <I2C_WaitOnRXNEFlagUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e07c      	b.n	800214e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207c:	b29b      	uxth	r3, r3
 800207e:	3b01      	subs	r3, #1
 8002080:	b29a      	uxth	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208a:	b29b      	uxth	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d034      	beq.n	80020fa <HAL_I2C_Master_Receive+0x186>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	2b00      	cmp	r3, #0
 8002096:	d130      	bne.n	80020fa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	2200      	movs	r2, #0
 80020a0:	2180      	movs	r1, #128	; 0x80
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f987 	bl	80023b6 <I2C_WaitOnFlagUntilTimeout>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e04d      	b.n	800214e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2bff      	cmp	r3, #255	; 0xff
 80020ba:	d90e      	bls.n	80020da <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	22ff      	movs	r2, #255	; 0xff
 80020c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	8979      	ldrh	r1, [r7, #10]
 80020ca:	2300      	movs	r3, #0
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 fb92 	bl	80027fc <I2C_TransferConfig>
 80020d8:	e00f      	b.n	80020fa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	8979      	ldrh	r1, [r7, #10]
 80020ec:	2300      	movs	r3, #0
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 fb81 	bl	80027fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d19d      	bne.n	8002040 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	6a39      	ldr	r1, [r7, #32]
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 f9d4 	bl	80024b6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e01a      	b.n	800214e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2220      	movs	r2, #32
 800211e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6859      	ldr	r1, [r3, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <HAL_I2C_Master_Receive+0x1e8>)
 800212c:	400b      	ands	r3, r1
 800212e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	e000      	b.n	800214e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800214c:	2302      	movs	r3, #2
  }
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	80002400 	.word	0x80002400
 800215c:	fe00e800 	.word	0xfe00e800

08002160 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af02      	add	r7, sp, #8
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	460b      	mov	r3, r1
 800216e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b20      	cmp	r3, #32
 800217e:	f040 80f1 	bne.w	8002364 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800218c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002190:	d101      	bne.n	8002196 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002192:	2302      	movs	r3, #2
 8002194:	e0e7      	b.n	8002366 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_I2C_IsDeviceReady+0x44>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e0e0      	b.n	8002366 <HAL_I2C_IsDeviceReady+0x206>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2224      	movs	r2, #36	; 0x24
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d107      	bne.n	80021d2 <HAL_I2C_IsDeviceReady+0x72>
 80021c2:	897b      	ldrh	r3, [r7, #10]
 80021c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021d0:	e004      	b.n	80021dc <HAL_I2C_IsDeviceReady+0x7c>
 80021d2:	897b      	ldrh	r3, [r7, #10]
 80021d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021d8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80021e2:	f7ff fa8f 	bl	8001704 <HAL_GetTick>
 80021e6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	bf0c      	ite	eq
 80021f6:	2301      	moveq	r3, #1
 80021f8:	2300      	movne	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	2b10      	cmp	r3, #16
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002214:	e034      	b.n	8002280 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800221c:	d01a      	beq.n	8002254 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800221e:	f7ff fa71 	bl	8001704 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d302      	bcc.n	8002234 <HAL_I2C_IsDeviceReady+0xd4>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10f      	bne.n	8002254 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	f043 0220 	orr.w	r2, r3, #32
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e088      	b.n	8002366 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b20      	cmp	r3, #32
 8002260:	bf0c      	ite	eq
 8002262:	2301      	moveq	r3, #1
 8002264:	2300      	movne	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	2b10      	cmp	r3, #16
 8002276:	bf0c      	ite	eq
 8002278:	2301      	moveq	r3, #1
 800227a:	2300      	movne	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002280:	7ffb      	ldrb	r3, [r7, #31]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d102      	bne.n	800228c <HAL_I2C_IsDeviceReady+0x12c>
 8002286:	7fbb      	ldrb	r3, [r7, #30]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0c4      	beq.n	8002216 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b10      	cmp	r3, #16
 8002298:	d01a      	beq.n	80022d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2200      	movs	r2, #0
 80022a2:	2120      	movs	r1, #32
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f886 	bl	80023b6 <I2C_WaitOnFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e058      	b.n	8002366 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2220      	movs	r2, #32
 80022ba:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2220      	movs	r2, #32
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e04a      	b.n	8002366 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	2120      	movs	r1, #32
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f86b 	bl	80023b6 <I2C_WaitOnFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e03d      	b.n	8002366 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2210      	movs	r2, #16
 80022f0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2220      	movs	r2, #32
 80022f8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d118      	bne.n	8002334 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002310:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2200      	movs	r2, #0
 800231a:	2120      	movs	r1, #32
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 f84a 	bl	80023b6 <I2C_WaitOnFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e01c      	b.n	8002366 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2220      	movs	r2, #32
 8002332:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3301      	adds	r3, #1
 8002338:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	f63f af3b 	bhi.w	80021ba <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002364:	2302      	movs	r3, #2
  }
}
 8002366:	4618      	mov	r0, r3
 8002368:	3720      	adds	r7, #32
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b02      	cmp	r3, #2
 8002382:	d103      	bne.n	800238c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2200      	movs	r2, #0
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b01      	cmp	r3, #1
 8002398:	d007      	beq.n	80023aa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699a      	ldr	r2, [r3, #24]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0201 	orr.w	r2, r2, #1
 80023a8:	619a      	str	r2, [r3, #24]
  }
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	4613      	mov	r3, r2
 80023c4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023c6:	e022      	b.n	800240e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023ce:	d01e      	beq.n	800240e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d0:	f7ff f998 	bl	8001704 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d302      	bcc.n	80023e6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d113      	bne.n	800240e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	f043 0220 	orr.w	r2, r3, #32
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2220      	movs	r2, #32
 80023f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e00f      	b.n	800242e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699a      	ldr	r2, [r3, #24]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4013      	ands	r3, r2
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	429a      	cmp	r2, r3
 800241c:	bf0c      	ite	eq
 800241e:	2301      	moveq	r3, #1
 8002420:	2300      	movne	r3, #0
 8002422:	b2db      	uxtb	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	429a      	cmp	r2, r3
 800242a:	d0cd      	beq.n	80023c8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002442:	e02c      	b.n	800249e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	68b9      	ldr	r1, [r7, #8]
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 f8eb 	bl	8002624 <I2C_IsErrorOccurred>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e02a      	b.n	80024ae <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800245e:	d01e      	beq.n	800249e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002460:	f7ff f950 	bl	8001704 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	429a      	cmp	r2, r3
 800246e:	d302      	bcc.n	8002476 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d113      	bne.n	800249e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	f043 0220 	orr.w	r2, r3, #32
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e007      	b.n	80024ae <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d1cb      	bne.n	8002444 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024c2:	e028      	b.n	8002516 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f8ab 	bl	8002624 <I2C_IsErrorOccurred>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e026      	b.n	8002526 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d8:	f7ff f914 	bl	8001704 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d302      	bcc.n	80024ee <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d113      	bne.n	8002516 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	f043 0220 	orr.w	r2, r3, #32
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e007      	b.n	8002526 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b20      	cmp	r3, #32
 8002522:	d1cf      	bne.n	80024c4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800253c:	e064      	b.n	8002608 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f86e 	bl	8002624 <I2C_IsErrorOccurred>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e062      	b.n	8002618 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b20      	cmp	r3, #32
 800255e:	d138      	bne.n	80025d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b04      	cmp	r3, #4
 800256c:	d105      	bne.n	800257a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e04e      	b.n	8002618 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b10      	cmp	r3, #16
 8002586:	d107      	bne.n	8002598 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2210      	movs	r2, #16
 800258e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2204      	movs	r2, #4
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
 8002596:	e002      	b.n	800259e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2220      	movs	r2, #32
 80025a4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80025b2:	400b      	ands	r3, r1
 80025b4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e022      	b.n	8002618 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d2:	f7ff f897 	bl	8001704 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d302      	bcc.n	80025e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10f      	bne.n	8002608 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	f043 0220 	orr.w	r2, r3, #32
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e007      	b.n	8002618 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b04      	cmp	r3, #4
 8002614:	d193      	bne.n	800253e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	fe00e800 	.word	0xfe00e800

08002624 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	2b00      	cmp	r3, #0
 800264e:	d075      	beq.n	800273c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2210      	movs	r2, #16
 8002656:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002658:	e056      	b.n	8002708 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002660:	d052      	beq.n	8002708 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002662:	f7ff f84f 	bl	8001704 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	429a      	cmp	r2, r3
 8002670:	d302      	bcc.n	8002678 <I2C_IsErrorOccurred+0x54>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d147      	bne.n	8002708 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002682:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800268a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800269a:	d12e      	bne.n	80026fa <I2C_IsErrorOccurred+0xd6>
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026a2:	d02a      	beq.n	80026fa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80026a4:	7cfb      	ldrb	r3, [r7, #19]
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d027      	beq.n	80026fa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026b8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80026ba:	f7ff f823 	bl	8001704 <HAL_GetTick>
 80026be:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026c0:	e01b      	b.n	80026fa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026c2:	f7ff f81f 	bl	8001704 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b19      	cmp	r3, #25
 80026ce:	d914      	bls.n	80026fa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	f043 0220 	orr.w	r2, r3, #32
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b20      	cmp	r3, #32
 8002706:	d1dc      	bne.n	80026c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	2b20      	cmp	r3, #32
 8002714:	d003      	beq.n	800271e <I2C_IsErrorOccurred+0xfa>
 8002716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800271a:	2b00      	cmp	r3, #0
 800271c:	d09d      	beq.n	800265a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800271e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002722:	2b00      	cmp	r3, #0
 8002724:	d103      	bne.n	800272e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2220      	movs	r2, #32
 800272c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	f043 0304 	orr.w	r3, r3, #4
 8002734:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800275e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00b      	beq.n	8002788 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	f043 0308 	orr.w	r3, r3, #8
 8002776:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002780:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80027aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d01c      	beq.n	80027ec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f7ff fddb 	bl	800236e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6859      	ldr	r1, [r3, #4]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <I2C_IsErrorOccurred+0x1d4>)
 80027c4:	400b      	ands	r3, r1
 80027c6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80027ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3728      	adds	r7, #40	; 0x28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	fe00e800 	.word	0xfe00e800

080027fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	460b      	mov	r3, r1
 8002808:	817b      	strh	r3, [r7, #10]
 800280a:	4613      	mov	r3, r2
 800280c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800280e:	897b      	ldrh	r3, [r7, #10]
 8002810:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002814:	7a7b      	ldrb	r3, [r7, #9]
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800281c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	4313      	orrs	r3, r2
 8002826:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800282a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	0d5b      	lsrs	r3, r3, #21
 8002836:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <I2C_TransferConfig+0x60>)
 800283c:	430b      	orrs	r3, r1
 800283e:	43db      	mvns	r3, r3
 8002840:	ea02 0103 	and.w	r1, r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	430a      	orrs	r2, r1
 800284c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800284e:	bf00      	nop
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	03ff63ff 	.word	0x03ff63ff

08002860 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b20      	cmp	r3, #32
 8002874:	d138      	bne.n	80028e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002880:	2302      	movs	r3, #2
 8002882:	e032      	b.n	80028ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2224      	movs	r2, #36	; 0x24
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6819      	ldr	r1, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e000      	b.n	80028ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028e8:	2302      	movs	r3, #2
  }
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b085      	sub	sp, #20
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b20      	cmp	r3, #32
 800290a:	d139      	bne.n	8002980 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002916:	2302      	movs	r3, #2
 8002918:	e033      	b.n	8002982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2224      	movs	r2, #36	; 0x24
 8002926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0201 	bic.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002948:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	e000      	b.n	8002982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002980:	2302      	movs	r3, #2
  }
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002994:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40007000 	.word	0x40007000

080029ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ba:	d130      	bne.n	8002a1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029bc:	4b23      	ldr	r3, [pc, #140]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c8:	d038      	beq.n	8002a3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029d2:	4a1e      	ldr	r2, [pc, #120]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029da:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2232      	movs	r2, #50	; 0x32
 80029e0:	fb02 f303 	mul.w	r3, r2, r3
 80029e4:	4a1b      	ldr	r2, [pc, #108]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	0c9b      	lsrs	r3, r3, #18
 80029ec:	3301      	adds	r3, #1
 80029ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029f0:	e002      	b.n	80029f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	3b01      	subs	r3, #1
 80029f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a04:	d102      	bne.n	8002a0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f2      	bne.n	80029f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a18:	d110      	bne.n	8002a3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e00f      	b.n	8002a3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a2a:	d007      	beq.n	8002a3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a2c:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a34:	4a05      	ldr	r2, [pc, #20]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	20000010 	.word	0x20000010
 8002a54:	431bde83 	.word	0x431bde83

08002a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e3d4      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6a:	4ba1      	ldr	r3, [pc, #644]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a74:	4b9e      	ldr	r3, [pc, #632]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80e4 	beq.w	8002c54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d007      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x4a>
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2b0c      	cmp	r3, #12
 8002a96:	f040 808b 	bne.w	8002bb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	f040 8087 	bne.w	8002bb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aa2:	4b93      	ldr	r3, [pc, #588]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_RCC_OscConfig+0x62>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e3ac      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1a      	ldr	r2, [r3, #32]
 8002abe:	4b8c      	ldr	r3, [pc, #560]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d004      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x7c>
 8002aca:	4b89      	ldr	r3, [pc, #548]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad2:	e005      	b.n	8002ae0 <HAL_RCC_OscConfig+0x88>
 8002ad4:	4b86      	ldr	r3, [pc, #536]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ada:	091b      	lsrs	r3, r3, #4
 8002adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d223      	bcs.n	8002b2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fd41 	bl	8003570 <RCC_SetFlashLatencyFromMSIRange>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e38d      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002af8:	4b7d      	ldr	r3, [pc, #500]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a7c      	ldr	r2, [pc, #496]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002afe:	f043 0308 	orr.w	r3, r3, #8
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	4b7a      	ldr	r3, [pc, #488]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	4977      	ldr	r1, [pc, #476]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b16:	4b76      	ldr	r3, [pc, #472]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	4972      	ldr	r1, [pc, #456]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
 8002b2a:	e025      	b.n	8002b78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b2c:	4b70      	ldr	r3, [pc, #448]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a6f      	ldr	r2, [pc, #444]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002b32:	f043 0308 	orr.w	r3, r3, #8
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b6d      	ldr	r3, [pc, #436]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	496a      	ldr	r1, [pc, #424]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b4a:	4b69      	ldr	r3, [pc, #420]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	4965      	ldr	r1, [pc, #404]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d109      	bne.n	8002b78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 fd01 	bl	8003570 <RCC_SetFlashLatencyFromMSIRange>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e34d      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b78:	f000 fc36 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b5c      	ldr	r3, [pc, #368]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	495a      	ldr	r1, [pc, #360]	; (8002cf4 <HAL_RCC_OscConfig+0x29c>)
 8002b8a:	5ccb      	ldrb	r3, [r1, r3]
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
 8002b94:	4a58      	ldr	r2, [pc, #352]	; (8002cf8 <HAL_RCC_OscConfig+0x2a0>)
 8002b96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b98:	4b58      	ldr	r3, [pc, #352]	; (8002cfc <HAL_RCC_OscConfig+0x2a4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe fd61 	bl	8001664 <HAL_InitTick>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d052      	beq.n	8002c52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	e331      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d032      	beq.n	8002c1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bb8:	4b4d      	ldr	r3, [pc, #308]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a4c      	ldr	r2, [pc, #304]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bc4:	f7fe fd9e 	bl	8001704 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bcc:	f7fe fd9a 	bl	8001704 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e31a      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bde:	4b44      	ldr	r3, [pc, #272]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bea:	4b41      	ldr	r3, [pc, #260]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a40      	ldr	r2, [pc, #256]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002bf0:	f043 0308 	orr.w	r3, r3, #8
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4b3e      	ldr	r3, [pc, #248]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	493b      	ldr	r1, [pc, #236]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c08:	4b39      	ldr	r3, [pc, #228]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	4936      	ldr	r1, [pc, #216]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
 8002c1c:	e01a      	b.n	8002c54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c1e:	4b34      	ldr	r3, [pc, #208]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a33      	ldr	r2, [pc, #204]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c2a:	f7fe fd6b 	bl	8001704 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c32:	f7fe fd67 	bl	8001704 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e2e7      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c44:	4b2a      	ldr	r3, [pc, #168]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x1da>
 8002c50:	e000      	b.n	8002c54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d074      	beq.n	8002d4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d005      	beq.n	8002c72 <HAL_RCC_OscConfig+0x21a>
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	2b0c      	cmp	r3, #12
 8002c6a:	d10e      	bne.n	8002c8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d10b      	bne.n	8002c8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c72:	4b1f      	ldr	r3, [pc, #124]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d064      	beq.n	8002d48 <HAL_RCC_OscConfig+0x2f0>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d160      	bne.n	8002d48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e2c4      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x24a>
 8002c94:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a15      	ldr	r2, [pc, #84]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	e01d      	b.n	8002cde <HAL_RCC_OscConfig+0x286>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002caa:	d10c      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x26e>
 8002cac:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0f      	ldr	r2, [pc, #60]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002cb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0c      	ldr	r2, [pc, #48]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	e00b      	b.n	8002cde <HAL_RCC_OscConfig+0x286>
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a06      	ldr	r2, [pc, #24]	; (8002cf0 <HAL_RCC_OscConfig+0x298>)
 8002cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cdc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d01c      	beq.n	8002d20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce6:	f7fe fd0d 	bl	8001704 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cec:	e011      	b.n	8002d12 <HAL_RCC_OscConfig+0x2ba>
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	08005ac0 	.word	0x08005ac0
 8002cf8:	20000010 	.word	0x20000010
 8002cfc:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d00:	f7fe fd00 	bl	8001704 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e280      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d12:	4baf      	ldr	r3, [pc, #700]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0x2a8>
 8002d1e:	e014      	b.n	8002d4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe fcf0 	bl	8001704 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d28:	f7fe fcec 	bl	8001704 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	; 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e26c      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d3a:	4ba5      	ldr	r3, [pc, #660]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x2d0>
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d060      	beq.n	8002e18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_OscConfig+0x310>
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d119      	bne.n	8002d96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d116      	bne.n	8002d96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d68:	4b99      	ldr	r3, [pc, #612]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_OscConfig+0x328>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e249      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d80:	4b93      	ldr	r3, [pc, #588]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	4990      	ldr	r1, [pc, #576]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d94:	e040      	b.n	8002e18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d023      	beq.n	8002de6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d9e:	4b8c      	ldr	r3, [pc, #560]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a8b      	ldr	r2, [pc, #556]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fe fcab 	bl	8001704 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db2:	f7fe fca7 	bl	8001704 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e227      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc4:	4b82      	ldr	r3, [pc, #520]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd0:	4b7f      	ldr	r3, [pc, #508]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	061b      	lsls	r3, r3, #24
 8002dde:	497c      	ldr	r1, [pc, #496]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	604b      	str	r3, [r1, #4]
 8002de4:	e018      	b.n	8002e18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002de6:	4b7a      	ldr	r3, [pc, #488]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a79      	ldr	r2, [pc, #484]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df2:	f7fe fc87 	bl	8001704 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfa:	f7fe fc83 	bl	8001704 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e203      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e0c:	4b70      	ldr	r3, [pc, #448]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f0      	bne.n	8002dfa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d03c      	beq.n	8002e9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d01c      	beq.n	8002e66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2c:	4b68      	ldr	r3, [pc, #416]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e32:	4a67      	ldr	r2, [pc, #412]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7fe fc62 	bl	8001704 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e44:	f7fe fc5e 	bl	8001704 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e1de      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e56:	4b5e      	ldr	r3, [pc, #376]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0ef      	beq.n	8002e44 <HAL_RCC_OscConfig+0x3ec>
 8002e64:	e01b      	b.n	8002e9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e66:	4b5a      	ldr	r3, [pc, #360]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e6c:	4a58      	ldr	r2, [pc, #352]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002e6e:	f023 0301 	bic.w	r3, r3, #1
 8002e72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e76:	f7fe fc45 	bl	8001704 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e7e:	f7fe fc41 	bl	8001704 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e1c1      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e90:	4b4f      	ldr	r3, [pc, #316]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1ef      	bne.n	8002e7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80a6 	beq.w	8002ff8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eac:	2300      	movs	r3, #0
 8002eae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002eb0:	4b47      	ldr	r3, [pc, #284]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10d      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ebc:	4b44      	ldr	r3, [pc, #272]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec0:	4a43      	ldr	r2, [pc, #268]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec8:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed8:	4b3e      	ldr	r3, [pc, #248]	; (8002fd4 <HAL_RCC_OscConfig+0x57c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d118      	bne.n	8002f16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee4:	4b3b      	ldr	r3, [pc, #236]	; (8002fd4 <HAL_RCC_OscConfig+0x57c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a3a      	ldr	r2, [pc, #232]	; (8002fd4 <HAL_RCC_OscConfig+0x57c>)
 8002eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef0:	f7fe fc08 	bl	8001704 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef8:	f7fe fc04 	bl	8001704 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e184      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f0a:	4b32      	ldr	r3, [pc, #200]	; (8002fd4 <HAL_RCC_OscConfig+0x57c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d108      	bne.n	8002f30 <HAL_RCC_OscConfig+0x4d8>
 8002f1e:	4b2c      	ldr	r3, [pc, #176]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f24:	4a2a      	ldr	r2, [pc, #168]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f2e:	e024      	b.n	8002f7a <HAL_RCC_OscConfig+0x522>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	d110      	bne.n	8002f5a <HAL_RCC_OscConfig+0x502>
 8002f38:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	4a24      	ldr	r2, [pc, #144]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f48:	4b21      	ldr	r3, [pc, #132]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4e:	4a20      	ldr	r2, [pc, #128]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f58:	e00f      	b.n	8002f7a <HAL_RCC_OscConfig+0x522>
 8002f5a:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f60:	4a1b      	ldr	r2, [pc, #108]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002f62:	f023 0301 	bic.w	r3, r3, #1
 8002f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f6a:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f70:	4a17      	ldr	r2, [pc, #92]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002f72:	f023 0304 	bic.w	r3, r3, #4
 8002f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d016      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f82:	f7fe fbbf 	bl	8001704 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f88:	e00a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fe fbbb 	bl	8001704 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e139      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_RCC_OscConfig+0x578>)
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0ed      	beq.n	8002f8a <HAL_RCC_OscConfig+0x532>
 8002fae:	e01a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb0:	f7fe fba8 	bl	8001704 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fb6:	e00f      	b.n	8002fd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb8:	f7fe fba4 	bl	8001704 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d906      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e122      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fd8:	4b90      	ldr	r3, [pc, #576]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1e8      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fe6:	7ffb      	ldrb	r3, [r7, #31]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d105      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fec:	4b8b      	ldr	r3, [pc, #556]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	4a8a      	ldr	r2, [pc, #552]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 8002ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 8108 	beq.w	8003212 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	2b02      	cmp	r3, #2
 8003008:	f040 80d0 	bne.w	80031ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800300c:	4b83      	ldr	r3, [pc, #524]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f003 0203 	and.w	r2, r3, #3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	429a      	cmp	r2, r3
 800301e:	d130      	bne.n	8003082 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	3b01      	subs	r3, #1
 800302c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800302e:	429a      	cmp	r2, r3
 8003030:	d127      	bne.n	8003082 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d11f      	bne.n	8003082 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800304c:	2a07      	cmp	r2, #7
 800304e:	bf14      	ite	ne
 8003050:	2201      	movne	r2, #1
 8003052:	2200      	moveq	r2, #0
 8003054:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003056:	4293      	cmp	r3, r2
 8003058:	d113      	bne.n	8003082 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003064:	085b      	lsrs	r3, r3, #1
 8003066:	3b01      	subs	r3, #1
 8003068:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d109      	bne.n	8003082 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	085b      	lsrs	r3, r3, #1
 800307a:	3b01      	subs	r3, #1
 800307c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d06e      	beq.n	8003160 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b0c      	cmp	r3, #12
 8003086:	d069      	beq.n	800315c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003088:	4b64      	ldr	r3, [pc, #400]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d105      	bne.n	80030a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003094:	4b61      	ldr	r3, [pc, #388]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0b7      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030a4:	4b5d      	ldr	r3, [pc, #372]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a5c      	ldr	r2, [pc, #368]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 80030aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030b0:	f7fe fb28 	bl	8001704 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b8:	f7fe fb24 	bl	8001704 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e0a4      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ca:	4b54      	ldr	r3, [pc, #336]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d6:	4b51      	ldr	r3, [pc, #324]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	4b51      	ldr	r3, [pc, #324]	; (8003220 <HAL_RCC_OscConfig+0x7c8>)
 80030dc:	4013      	ands	r3, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030e6:	3a01      	subs	r2, #1
 80030e8:	0112      	lsls	r2, r2, #4
 80030ea:	4311      	orrs	r1, r2
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030f0:	0212      	lsls	r2, r2, #8
 80030f2:	4311      	orrs	r1, r2
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030f8:	0852      	lsrs	r2, r2, #1
 80030fa:	3a01      	subs	r2, #1
 80030fc:	0552      	lsls	r2, r2, #21
 80030fe:	4311      	orrs	r1, r2
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003104:	0852      	lsrs	r2, r2, #1
 8003106:	3a01      	subs	r2, #1
 8003108:	0652      	lsls	r2, r2, #25
 800310a:	4311      	orrs	r1, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003110:	0912      	lsrs	r2, r2, #4
 8003112:	0452      	lsls	r2, r2, #17
 8003114:	430a      	orrs	r2, r1
 8003116:	4941      	ldr	r1, [pc, #260]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 8003118:	4313      	orrs	r3, r2
 800311a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800311c:	4b3f      	ldr	r3, [pc, #252]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a3e      	ldr	r2, [pc, #248]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 8003122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003126:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003128:	4b3c      	ldr	r3, [pc, #240]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4a3b      	ldr	r2, [pc, #236]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 800312e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003132:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003134:	f7fe fae6 	bl	8001704 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313c:	f7fe fae2 	bl	8001704 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e062      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314e:	4b33      	ldr	r3, [pc, #204]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800315a:	e05a      	b.n	8003212 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e059      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003160:	4b2e      	ldr	r3, [pc, #184]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d152      	bne.n	8003212 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800316c:	4b2b      	ldr	r3, [pc, #172]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a2a      	ldr	r2, [pc, #168]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 8003172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003176:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003178:	4b28      	ldr	r3, [pc, #160]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4a27      	ldr	r2, [pc, #156]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 800317e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003182:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003184:	f7fe fabe 	bl	8001704 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318c:	f7fe faba 	bl	8001704 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e03a      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800319e:	4b1f      	ldr	r3, [pc, #124]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x734>
 80031aa:	e032      	b.n	8003212 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	d02d      	beq.n	800320e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b2:	4b1a      	ldr	r3, [pc, #104]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a19      	ldr	r2, [pc, #100]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 80031b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031bc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80031be:	4b17      	ldr	r3, [pc, #92]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d105      	bne.n	80031d6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	4a13      	ldr	r2, [pc, #76]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 80031d0:	f023 0303 	bic.w	r3, r3, #3
 80031d4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	4a10      	ldr	r2, [pc, #64]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 80031dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e6:	f7fe fa8d 	bl	8001704 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ee:	f7fe fa89 	bl	8001704 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e009      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_RCC_OscConfig+0x7c4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f0      	bne.n	80031ee <HAL_RCC_OscConfig+0x796>
 800320c:	e001      	b.n	8003212 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3720      	adds	r7, #32
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000
 8003220:	f99d808c 	.word	0xf99d808c

08003224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0c8      	b.n	80033ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003238:	4b66      	ldr	r3, [pc, #408]	; (80033d4 <HAL_RCC_ClockConfig+0x1b0>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d910      	bls.n	8003268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b63      	ldr	r3, [pc, #396]	; (80033d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 0207 	bic.w	r2, r3, #7
 800324e:	4961      	ldr	r1, [pc, #388]	; (80033d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003256:	4b5f      	ldr	r3, [pc, #380]	; (80033d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0b0      	b.n	80033ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d04c      	beq.n	800330e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b03      	cmp	r3, #3
 800327a:	d107      	bne.n	800328c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800327c:	4b56      	ldr	r3, [pc, #344]	; (80033d8 <HAL_RCC_ClockConfig+0x1b4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d121      	bne.n	80032cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e09e      	b.n	80033ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b02      	cmp	r3, #2
 8003292:	d107      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003294:	4b50      	ldr	r3, [pc, #320]	; (80033d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d115      	bne.n	80032cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e092      	b.n	80033ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d107      	bne.n	80032bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032ac:	4b4a      	ldr	r3, [pc, #296]	; (80033d8 <HAL_RCC_ClockConfig+0x1b4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d109      	bne.n	80032cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e086      	b.n	80033ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032bc:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <HAL_RCC_ClockConfig+0x1b4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e07e      	b.n	80033ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032cc:	4b42      	ldr	r3, [pc, #264]	; (80033d8 <HAL_RCC_ClockConfig+0x1b4>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f023 0203 	bic.w	r2, r3, #3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	493f      	ldr	r1, [pc, #252]	; (80033d8 <HAL_RCC_ClockConfig+0x1b4>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032de:	f7fe fa11 	bl	8001704 <HAL_GetTick>
 80032e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e6:	f7fe fa0d 	bl	8001704 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e066      	b.n	80033ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fc:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <HAL_RCC_ClockConfig+0x1b4>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 020c 	and.w	r2, r3, #12
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	429a      	cmp	r2, r3
 800330c:	d1eb      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800331a:	4b2f      	ldr	r3, [pc, #188]	; (80033d8 <HAL_RCC_ClockConfig+0x1b4>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	492c      	ldr	r1, [pc, #176]	; (80033d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003328:	4313      	orrs	r3, r2
 800332a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800332c:	4b29      	ldr	r3, [pc, #164]	; (80033d4 <HAL_RCC_ClockConfig+0x1b0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d210      	bcs.n	800335c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333a:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <HAL_RCC_ClockConfig+0x1b0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 0207 	bic.w	r2, r3, #7
 8003342:	4924      	ldr	r1, [pc, #144]	; (80033d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	4313      	orrs	r3, r2
 8003348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334a:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <HAL_RCC_ClockConfig+0x1b0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e036      	b.n	80033ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003368:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <HAL_RCC_ClockConfig+0x1b4>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4918      	ldr	r1, [pc, #96]	; (80033d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003386:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4910      	ldr	r1, [pc, #64]	; (80033d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800339a:	f000 f825 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 800339e:	4602      	mov	r2, r0
 80033a0:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <HAL_RCC_ClockConfig+0x1b4>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	490c      	ldr	r1, [pc, #48]	; (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 80033ac:	5ccb      	ldrb	r3, [r1, r3]
 80033ae:	f003 031f 	and.w	r3, r3, #31
 80033b2:	fa22 f303 	lsr.w	r3, r2, r3
 80033b6:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033ba:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fe f950 	bl	8001664 <HAL_InitTick>
 80033c4:	4603      	mov	r3, r0
 80033c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80033c8:	7afb      	ldrb	r3, [r7, #11]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40022000 	.word	0x40022000
 80033d8:	40021000 	.word	0x40021000
 80033dc:	08005ac0 	.word	0x08005ac0
 80033e0:	20000010 	.word	0x20000010
 80033e4:	20000014 	.word	0x20000014

080033e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b089      	sub	sp, #36	; 0x24
 80033ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	2300      	movs	r3, #0
 80033f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f6:	4b3e      	ldr	r3, [pc, #248]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003400:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x34>
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b0c      	cmp	r3, #12
 8003414:	d121      	bne.n	800345a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d11e      	bne.n	800345a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800341c:	4b34      	ldr	r3, [pc, #208]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d107      	bne.n	8003438 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003428:	4b31      	ldr	r3, [pc, #196]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800342a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	e005      	b.n	8003444 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003438:	4b2d      	ldr	r3, [pc, #180]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003444:	4a2b      	ldr	r2, [pc, #172]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10d      	bne.n	8003470 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003458:	e00a      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	2b04      	cmp	r3, #4
 800345e:	d102      	bne.n	8003466 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003460:	4b25      	ldr	r3, [pc, #148]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003462:	61bb      	str	r3, [r7, #24]
 8003464:	e004      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b08      	cmp	r3, #8
 800346a:	d101      	bne.n	8003470 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800346c:	4b23      	ldr	r3, [pc, #140]	; (80034fc <HAL_RCC_GetSysClockFreq+0x114>)
 800346e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	2b0c      	cmp	r3, #12
 8003474:	d134      	bne.n	80034e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003476:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d003      	beq.n	800348e <HAL_RCC_GetSysClockFreq+0xa6>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b03      	cmp	r3, #3
 800348a:	d003      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0xac>
 800348c:	e005      	b.n	800349a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003490:	617b      	str	r3, [r7, #20]
      break;
 8003492:	e005      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_RCC_GetSysClockFreq+0x114>)
 8003496:	617b      	str	r3, [r7, #20]
      break;
 8003498:	e002      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	617b      	str	r3, [r7, #20]
      break;
 800349e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034a0:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	3301      	adds	r3, #1
 80034ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	0a1b      	lsrs	r3, r3, #8
 80034b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	fb02 f203 	mul.w	r2, r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	0e5b      	lsrs	r3, r3, #25
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	3301      	adds	r3, #1
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	fbb2 f3f3 	udiv	r3, r2, r3
 80034de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034e0:	69bb      	ldr	r3, [r7, #24]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3724      	adds	r7, #36	; 0x24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	08005ad8 	.word	0x08005ad8
 80034f8:	00f42400 	.word	0x00f42400
 80034fc:	007a1200 	.word	0x007a1200

08003500 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <HAL_RCC_GetHCLKFreq+0x14>)
 8003506:	681b      	ldr	r3, [r3, #0]
}
 8003508:	4618      	mov	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	20000010 	.word	0x20000010

08003518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800351c:	f7ff fff0 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 8003520:	4602      	mov	r2, r0
 8003522:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	0a1b      	lsrs	r3, r3, #8
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	4904      	ldr	r1, [pc, #16]	; (8003540 <HAL_RCC_GetPCLK1Freq+0x28>)
 800352e:	5ccb      	ldrb	r3, [r1, r3]
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000
 8003540:	08005ad0 	.word	0x08005ad0

08003544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003548:	f7ff ffda 	bl	8003500 <HAL_RCC_GetHCLKFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	0adb      	lsrs	r3, r3, #11
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4904      	ldr	r1, [pc, #16]	; (800356c <HAL_RCC_GetPCLK2Freq+0x28>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000
 800356c:	08005ad0 	.word	0x08005ad0

08003570 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800357c:	4b2a      	ldr	r3, [pc, #168]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003588:	f7ff fa02 	bl	8002990 <HAL_PWREx_GetVoltageRange>
 800358c:	6178      	str	r0, [r7, #20]
 800358e:	e014      	b.n	80035ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003590:	4b25      	ldr	r3, [pc, #148]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003594:	4a24      	ldr	r2, [pc, #144]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359a:	6593      	str	r3, [r2, #88]	; 0x58
 800359c:	4b22      	ldr	r3, [pc, #136]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800359e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035a8:	f7ff f9f2 	bl	8002990 <HAL_PWREx_GetVoltageRange>
 80035ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035ae:	4b1e      	ldr	r3, [pc, #120]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b2:	4a1d      	ldr	r2, [pc, #116]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c0:	d10b      	bne.n	80035da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b80      	cmp	r3, #128	; 0x80
 80035c6:	d919      	bls.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2ba0      	cmp	r3, #160	; 0xa0
 80035cc:	d902      	bls.n	80035d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035ce:	2302      	movs	r3, #2
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	e013      	b.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035d4:	2301      	movs	r3, #1
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	e010      	b.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b80      	cmp	r3, #128	; 0x80
 80035de:	d902      	bls.n	80035e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035e0:	2303      	movs	r3, #3
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	e00a      	b.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b80      	cmp	r3, #128	; 0x80
 80035ea:	d102      	bne.n	80035f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035ec:	2302      	movs	r3, #2
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	e004      	b.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b70      	cmp	r3, #112	; 0x70
 80035f6:	d101      	bne.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035f8:	2301      	movs	r3, #1
 80035fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035fc:	4b0b      	ldr	r3, [pc, #44]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f023 0207 	bic.w	r2, r3, #7
 8003604:	4909      	ldr	r1, [pc, #36]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800360c:	4b07      	ldr	r3, [pc, #28]	; (800362c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	429a      	cmp	r2, r3
 8003618:	d001      	beq.n	800361e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40021000 	.word	0x40021000
 800362c:	40022000 	.word	0x40022000

08003630 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003638:	2300      	movs	r3, #0
 800363a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800363c:	2300      	movs	r3, #0
 800363e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003648:	2b00      	cmp	r3, #0
 800364a:	d041      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003650:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003654:	d02a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003656:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800365a:	d824      	bhi.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800365c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003660:	d008      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003662:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003666:	d81e      	bhi.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800366c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003670:	d010      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003672:	e018      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003674:	4b86      	ldr	r3, [pc, #536]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4a85      	ldr	r2, [pc, #532]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003680:	e015      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	2100      	movs	r1, #0
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fabb 	bl	8003c04 <RCCEx_PLLSAI1_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003692:	e00c      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3320      	adds	r3, #32
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fba6 	bl	8003dec <RCCEx_PLLSAI2_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036a4:	e003      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	74fb      	strb	r3, [r7, #19]
      break;
 80036aa:	e000      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80036ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ae:	7cfb      	ldrb	r3, [r7, #19]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036b4:	4b76      	ldr	r3, [pc, #472]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036c2:	4973      	ldr	r1, [pc, #460]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036ca:	e001      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d041      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036e4:	d02a      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036ea:	d824      	bhi.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036f0:	d008      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036f6:	d81e      	bhi.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003700:	d010      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003702:	e018      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003704:	4b62      	ldr	r3, [pc, #392]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a61      	ldr	r2, [pc, #388]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800370e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003710:	e015      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3304      	adds	r3, #4
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fa73 	bl	8003c04 <RCCEx_PLLSAI1_Config>
 800371e:	4603      	mov	r3, r0
 8003720:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003722:	e00c      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3320      	adds	r3, #32
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fb5e 	bl	8003dec <RCCEx_PLLSAI2_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003734:	e003      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	74fb      	strb	r3, [r7, #19]
      break;
 800373a:	e000      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800373c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800373e:	7cfb      	ldrb	r3, [r7, #19]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10b      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003744:	4b52      	ldr	r3, [pc, #328]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003752:	494f      	ldr	r1, [pc, #316]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800375a:	e001      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 80a0 	beq.w	80038ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800376e:	2300      	movs	r3, #0
 8003770:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003772:	4b47      	ldr	r3, [pc, #284]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003782:	2300      	movs	r3, #0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00d      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003788:	4b41      	ldr	r3, [pc, #260]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378c:	4a40      	ldr	r2, [pc, #256]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003792:	6593      	str	r3, [r2, #88]	; 0x58
 8003794:	4b3e      	ldr	r3, [pc, #248]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a0:	2301      	movs	r3, #1
 80037a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a4:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a3a      	ldr	r2, [pc, #232]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037b0:	f7fd ffa8 	bl	8001704 <HAL_GetTick>
 80037b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037b6:	e009      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b8:	f7fd ffa4 	bl	8001704 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d902      	bls.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	74fb      	strb	r3, [r7, #19]
        break;
 80037ca:	e005      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037cc:	4b31      	ldr	r3, [pc, #196]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0ef      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80037d8:	7cfb      	ldrb	r3, [r7, #19]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d15c      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037de:	4b2c      	ldr	r3, [pc, #176]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01f      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d019      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037fc:	4b24      	ldr	r3, [pc, #144]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003806:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003808:	4b21      	ldr	r3, [pc, #132]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380e:	4a20      	ldr	r2, [pc, #128]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003818:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	4a1c      	ldr	r2, [pc, #112]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003828:	4a19      	ldr	r2, [pc, #100]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d016      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383a:	f7fd ff63 	bl	8001704 <HAL_GetTick>
 800383e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003840:	e00b      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f7fd ff5f 	bl	8001704 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003850:	4293      	cmp	r3, r2
 8003852:	d902      	bls.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	74fb      	strb	r3, [r7, #19]
            break;
 8003858:	e006      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800385a:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0ec      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10c      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800386e:	4b08      	ldr	r3, [pc, #32]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003874:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800387e:	4904      	ldr	r1, [pc, #16]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003886:	e009      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003888:	7cfb      	ldrb	r3, [r7, #19]
 800388a:	74bb      	strb	r3, [r7, #18]
 800388c:	e006      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
 8003894:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003898:	7cfb      	ldrb	r3, [r7, #19]
 800389a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800389c:	7c7b      	ldrb	r3, [r7, #17]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d105      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a2:	4b9e      	ldr	r3, [pc, #632]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	4a9d      	ldr	r2, [pc, #628]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038ba:	4b98      	ldr	r3, [pc, #608]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	f023 0203 	bic.w	r2, r3, #3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	4994      	ldr	r1, [pc, #592]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038dc:	4b8f      	ldr	r3, [pc, #572]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f023 020c 	bic.w	r2, r3, #12
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	498c      	ldr	r1, [pc, #560]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038fe:	4b87      	ldr	r3, [pc, #540]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003904:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	4983      	ldr	r1, [pc, #524]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003920:	4b7e      	ldr	r3, [pc, #504]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	497b      	ldr	r1, [pc, #492]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003942:	4b76      	ldr	r3, [pc, #472]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003950:	4972      	ldr	r1, [pc, #456]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003964:	4b6d      	ldr	r3, [pc, #436]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003972:	496a      	ldr	r1, [pc, #424]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003986:	4b65      	ldr	r3, [pc, #404]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	4961      	ldr	r1, [pc, #388]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039a8:	4b5c      	ldr	r3, [pc, #368]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b6:	4959      	ldr	r1, [pc, #356]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ca:	4b54      	ldr	r3, [pc, #336]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d8:	4950      	ldr	r1, [pc, #320]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039ec:	4b4b      	ldr	r3, [pc, #300]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	4948      	ldr	r1, [pc, #288]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a0e:	4b43      	ldr	r3, [pc, #268]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	493f      	ldr	r1, [pc, #252]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d028      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a30:	4b3a      	ldr	r3, [pc, #232]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a3e:	4937      	ldr	r1, [pc, #220]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a4e:	d106      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a50:	4b32      	ldr	r3, [pc, #200]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a31      	ldr	r2, [pc, #196]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a5a:	60d3      	str	r3, [r2, #12]
 8003a5c:	e011      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a66:	d10c      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 f8c8 	bl	8003c04 <RCCEx_PLLSAI1_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a78:	7cfb      	ldrb	r3, [r7, #19]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a7e:	7cfb      	ldrb	r3, [r7, #19]
 8003a80:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d028      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a8e:	4b23      	ldr	r3, [pc, #140]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	491f      	ldr	r1, [pc, #124]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aac:	d106      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aae:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	4a1a      	ldr	r2, [pc, #104]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ab8:	60d3      	str	r3, [r2, #12]
 8003aba:	e011      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	2101      	movs	r1, #1
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 f899 	bl	8003c04 <RCCEx_PLLSAI1_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ad6:	7cfb      	ldrb	r3, [r7, #19]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003adc:	7cfb      	ldrb	r3, [r7, #19]
 8003ade:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d02b      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003aec:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afa:	4908      	ldr	r1, [pc, #32]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b0a:	d109      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b0c:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4a02      	ldr	r2, [pc, #8]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b16:	60d3      	str	r3, [r2, #12]
 8003b18:	e014      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b28:	d10c      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	2101      	movs	r1, #1
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 f867 	bl	8003c04 <RCCEx_PLLSAI1_Config>
 8003b36:	4603      	mov	r3, r0
 8003b38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b3a:	7cfb      	ldrb	r3, [r7, #19]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b40:	7cfb      	ldrb	r3, [r7, #19]
 8003b42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d02f      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b50:	4b2b      	ldr	r3, [pc, #172]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b5e:	4928      	ldr	r1, [pc, #160]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b6e:	d10d      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	2102      	movs	r1, #2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f844 	bl	8003c04 <RCCEx_PLLSAI1_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b80:	7cfb      	ldrb	r3, [r7, #19]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d014      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b86:	7cfb      	ldrb	r3, [r7, #19]
 8003b88:	74bb      	strb	r3, [r7, #18]
 8003b8a:	e011      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3320      	adds	r3, #32
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 f925 	bl	8003dec <RCCEx_PLLSAI2_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ba6:	7cfb      	ldrb	r3, [r7, #19]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bac:	7cfb      	ldrb	r3, [r7, #19]
 8003bae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003bbc:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bca:	490d      	ldr	r1, [pc, #52]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00b      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bee:	4904      	ldr	r1, [pc, #16]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bf6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40021000 	.word	0x40021000

08003c04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c12:	4b75      	ldr	r3, [pc, #468]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d018      	beq.n	8003c50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c1e:	4b72      	ldr	r3, [pc, #456]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0203 	and.w	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d10d      	bne.n	8003c4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
       ||
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d009      	beq.n	8003c4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c36:	4b6c      	ldr	r3, [pc, #432]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	091b      	lsrs	r3, r3, #4
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
       ||
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d047      	beq.n	8003cda <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
 8003c4e:	e044      	b.n	8003cda <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d018      	beq.n	8003c8a <RCCEx_PLLSAI1_Config+0x86>
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d825      	bhi.n	8003ca8 <RCCEx_PLLSAI1_Config+0xa4>
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d002      	beq.n	8003c66 <RCCEx_PLLSAI1_Config+0x62>
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d009      	beq.n	8003c78 <RCCEx_PLLSAI1_Config+0x74>
 8003c64:	e020      	b.n	8003ca8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c66:	4b60      	ldr	r3, [pc, #384]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d11d      	bne.n	8003cae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c76:	e01a      	b.n	8003cae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c78:	4b5b      	ldr	r3, [pc, #364]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d116      	bne.n	8003cb2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c88:	e013      	b.n	8003cb2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c8a:	4b57      	ldr	r3, [pc, #348]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10f      	bne.n	8003cb6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c96:	4b54      	ldr	r3, [pc, #336]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ca6:	e006      	b.n	8003cb6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
      break;
 8003cac:	e004      	b.n	8003cb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cae:	bf00      	nop
 8003cb0:	e002      	b.n	8003cb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cb2:	bf00      	nop
 8003cb4:	e000      	b.n	8003cb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10d      	bne.n	8003cda <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cbe:	4b4a      	ldr	r3, [pc, #296]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6819      	ldr	r1, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	4944      	ldr	r1, [pc, #272]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d17d      	bne.n	8003ddc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ce0:	4b41      	ldr	r3, [pc, #260]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a40      	ldr	r2, [pc, #256]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cec:	f7fd fd0a 	bl	8001704 <HAL_GetTick>
 8003cf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cf2:	e009      	b.n	8003d08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cf4:	f7fd fd06 	bl	8001704 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d902      	bls.n	8003d08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	73fb      	strb	r3, [r7, #15]
        break;
 8003d06:	e005      	b.n	8003d14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d08:	4b37      	ldr	r3, [pc, #220]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ef      	bne.n	8003cf4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d160      	bne.n	8003ddc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d111      	bne.n	8003d44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d20:	4b31      	ldr	r3, [pc, #196]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6892      	ldr	r2, [r2, #8]
 8003d30:	0211      	lsls	r1, r2, #8
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68d2      	ldr	r2, [r2, #12]
 8003d36:	0912      	lsrs	r2, r2, #4
 8003d38:	0452      	lsls	r2, r2, #17
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	492a      	ldr	r1, [pc, #168]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	610b      	str	r3, [r1, #16]
 8003d42:	e027      	b.n	8003d94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d112      	bne.n	8003d70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d4a:	4b27      	ldr	r3, [pc, #156]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6892      	ldr	r2, [r2, #8]
 8003d5a:	0211      	lsls	r1, r2, #8
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6912      	ldr	r2, [r2, #16]
 8003d60:	0852      	lsrs	r2, r2, #1
 8003d62:	3a01      	subs	r2, #1
 8003d64:	0552      	lsls	r2, r2, #21
 8003d66:	430a      	orrs	r2, r1
 8003d68:	491f      	ldr	r1, [pc, #124]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	610b      	str	r3, [r1, #16]
 8003d6e:	e011      	b.n	8003d94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d70:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6892      	ldr	r2, [r2, #8]
 8003d80:	0211      	lsls	r1, r2, #8
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6952      	ldr	r2, [r2, #20]
 8003d86:	0852      	lsrs	r2, r2, #1
 8003d88:	3a01      	subs	r2, #1
 8003d8a:	0652      	lsls	r2, r2, #25
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	4916      	ldr	r1, [pc, #88]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d94:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a13      	ldr	r2, [pc, #76]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da0:	f7fd fcb0 	bl	8001704 <HAL_GetTick>
 8003da4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003da6:	e009      	b.n	8003dbc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003da8:	f7fd fcac 	bl	8001704 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d902      	bls.n	8003dbc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	73fb      	strb	r3, [r7, #15]
          break;
 8003dba:	e005      	b.n	8003dc8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0ef      	beq.n	8003da8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	4904      	ldr	r1, [pc, #16]	; (8003de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40021000 	.word	0x40021000

08003dec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dfa:	4b6a      	ldr	r3, [pc, #424]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d018      	beq.n	8003e38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e06:	4b67      	ldr	r3, [pc, #412]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f003 0203 	and.w	r2, r3, #3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d10d      	bne.n	8003e32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
       ||
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e1e:	4b61      	ldr	r3, [pc, #388]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	091b      	lsrs	r3, r3, #4
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
       ||
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d047      	beq.n	8003ec2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	73fb      	strb	r3, [r7, #15]
 8003e36:	e044      	b.n	8003ec2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d018      	beq.n	8003e72 <RCCEx_PLLSAI2_Config+0x86>
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d825      	bhi.n	8003e90 <RCCEx_PLLSAI2_Config+0xa4>
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d002      	beq.n	8003e4e <RCCEx_PLLSAI2_Config+0x62>
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d009      	beq.n	8003e60 <RCCEx_PLLSAI2_Config+0x74>
 8003e4c:	e020      	b.n	8003e90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e4e:	4b55      	ldr	r3, [pc, #340]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d11d      	bne.n	8003e96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e5e:	e01a      	b.n	8003e96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e60:	4b50      	ldr	r3, [pc, #320]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d116      	bne.n	8003e9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e70:	e013      	b.n	8003e9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e72:	4b4c      	ldr	r3, [pc, #304]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e7e:	4b49      	ldr	r3, [pc, #292]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e8e:	e006      	b.n	8003e9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	73fb      	strb	r3, [r7, #15]
      break;
 8003e94:	e004      	b.n	8003ea0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e96:	bf00      	nop
 8003e98:	e002      	b.n	8003ea0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e000      	b.n	8003ea0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10d      	bne.n	8003ec2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ea6:	4b3f      	ldr	r3, [pc, #252]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6819      	ldr	r1, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	4939      	ldr	r1, [pc, #228]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d167      	bne.n	8003f98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ec8:	4b36      	ldr	r3, [pc, #216]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a35      	ldr	r2, [pc, #212]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed4:	f7fd fc16 	bl	8001704 <HAL_GetTick>
 8003ed8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003eda:	e009      	b.n	8003ef0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003edc:	f7fd fc12 	bl	8001704 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d902      	bls.n	8003ef0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	73fb      	strb	r3, [r7, #15]
        break;
 8003eee:	e005      	b.n	8003efc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ef0:	4b2c      	ldr	r3, [pc, #176]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1ef      	bne.n	8003edc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d14a      	bne.n	8003f98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d111      	bne.n	8003f2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f08:	4b26      	ldr	r3, [pc, #152]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6892      	ldr	r2, [r2, #8]
 8003f18:	0211      	lsls	r1, r2, #8
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68d2      	ldr	r2, [r2, #12]
 8003f1e:	0912      	lsrs	r2, r2, #4
 8003f20:	0452      	lsls	r2, r2, #17
 8003f22:	430a      	orrs	r2, r1
 8003f24:	491f      	ldr	r1, [pc, #124]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	614b      	str	r3, [r1, #20]
 8003f2a:	e011      	b.n	8003f50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f2c:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6892      	ldr	r2, [r2, #8]
 8003f3c:	0211      	lsls	r1, r2, #8
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6912      	ldr	r2, [r2, #16]
 8003f42:	0852      	lsrs	r2, r2, #1
 8003f44:	3a01      	subs	r2, #1
 8003f46:	0652      	lsls	r2, r2, #25
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	4916      	ldr	r1, [pc, #88]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f50:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a13      	ldr	r2, [pc, #76]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7fd fbd2 	bl	8001704 <HAL_GetTick>
 8003f60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f62:	e009      	b.n	8003f78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f64:	f7fd fbce 	bl	8001704 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d902      	bls.n	8003f78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	73fb      	strb	r3, [r7, #15]
          break;
 8003f76:	e005      	b.n	8003f84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0ef      	beq.n	8003f64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f8a:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	4904      	ldr	r1, [pc, #16]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000

08003fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e040      	b.n	800403c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fd faa4 	bl	8001518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2224      	movs	r2, #36	; 0x24
 8003fd4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f8c0 	bl	800416c <UART_SetConfig>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d101      	bne.n	8003ff6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e022      	b.n	800403c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fb3e 	bl	8004680 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004012:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004022:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fbc5 	bl	80047c4 <UART_CheckIdleState>
 800403a:	4603      	mov	r3, r0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	; 0x28
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	4613      	mov	r3, r2
 8004052:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004058:	2b20      	cmp	r3, #32
 800405a:	f040 8082 	bne.w	8004162 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <HAL_UART_Transmit+0x26>
 8004064:	88fb      	ldrh	r3, [r7, #6]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e07a      	b.n	8004164 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_UART_Transmit+0x38>
 8004078:	2302      	movs	r3, #2
 800407a:	e073      	b.n	8004164 <HAL_UART_Transmit+0x120>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2221      	movs	r2, #33	; 0x21
 8004090:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004092:	f7fd fb37 	bl	8001704 <HAL_GetTick>
 8004096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	88fa      	ldrh	r2, [r7, #6]
 800409c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	88fa      	ldrh	r2, [r7, #6]
 80040a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b0:	d108      	bne.n	80040c4 <HAL_UART_Transmit+0x80>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d104      	bne.n	80040c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	e003      	b.n	80040cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80040d4:	e02d      	b.n	8004132 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2200      	movs	r2, #0
 80040de:	2180      	movs	r1, #128	; 0x80
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fbb8 	bl	8004856 <UART_WaitOnFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e039      	b.n	8004164 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10b      	bne.n	800410e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	881a      	ldrh	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004102:	b292      	uxth	r2, r2
 8004104:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	3302      	adds	r3, #2
 800410a:	61bb      	str	r3, [r7, #24]
 800410c:	e008      	b.n	8004120 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	781a      	ldrb	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	b292      	uxth	r2, r2
 8004118:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3301      	adds	r3, #1
 800411e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1cb      	bne.n	80040d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2200      	movs	r2, #0
 8004146:	2140      	movs	r1, #64	; 0x40
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 fb84 	bl	8004856 <UART_WaitOnFlagUntilTimeout>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e005      	b.n	8004164 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004162:	2302      	movs	r3, #2
  }
}
 8004164:	4618      	mov	r0, r3
 8004166:	3720      	adds	r7, #32
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800416c:	b5b0      	push	{r4, r5, r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	4313      	orrs	r3, r2
 800418e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	4bad      	ldr	r3, [pc, #692]	; (800444c <UART_SetConfig+0x2e0>)
 8004198:	4013      	ands	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	69f9      	ldr	r1, [r7, #28]
 80041a0:	430b      	orrs	r3, r1
 80041a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4aa2      	ldr	r2, [pc, #648]	; (8004450 <UART_SetConfig+0x2e4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d004      	beq.n	80041d4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a99      	ldr	r2, [pc, #612]	; (8004454 <UART_SetConfig+0x2e8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d121      	bne.n	8004236 <UART_SetConfig+0xca>
 80041f2:	4b99      	ldr	r3, [pc, #612]	; (8004458 <UART_SetConfig+0x2ec>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d817      	bhi.n	8004230 <UART_SetConfig+0xc4>
 8004200:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <UART_SetConfig+0x9c>)
 8004202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004206:	bf00      	nop
 8004208:	08004219 	.word	0x08004219
 800420c:	08004225 	.word	0x08004225
 8004210:	0800421f 	.word	0x0800421f
 8004214:	0800422b 	.word	0x0800422b
 8004218:	2301      	movs	r3, #1
 800421a:	76fb      	strb	r3, [r7, #27]
 800421c:	e0e7      	b.n	80043ee <UART_SetConfig+0x282>
 800421e:	2302      	movs	r3, #2
 8004220:	76fb      	strb	r3, [r7, #27]
 8004222:	e0e4      	b.n	80043ee <UART_SetConfig+0x282>
 8004224:	2304      	movs	r3, #4
 8004226:	76fb      	strb	r3, [r7, #27]
 8004228:	e0e1      	b.n	80043ee <UART_SetConfig+0x282>
 800422a:	2308      	movs	r3, #8
 800422c:	76fb      	strb	r3, [r7, #27]
 800422e:	e0de      	b.n	80043ee <UART_SetConfig+0x282>
 8004230:	2310      	movs	r3, #16
 8004232:	76fb      	strb	r3, [r7, #27]
 8004234:	e0db      	b.n	80043ee <UART_SetConfig+0x282>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a88      	ldr	r2, [pc, #544]	; (800445c <UART_SetConfig+0x2f0>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d132      	bne.n	80042a6 <UART_SetConfig+0x13a>
 8004240:	4b85      	ldr	r3, [pc, #532]	; (8004458 <UART_SetConfig+0x2ec>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004246:	f003 030c 	and.w	r3, r3, #12
 800424a:	2b0c      	cmp	r3, #12
 800424c:	d828      	bhi.n	80042a0 <UART_SetConfig+0x134>
 800424e:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <UART_SetConfig+0xe8>)
 8004250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004254:	08004289 	.word	0x08004289
 8004258:	080042a1 	.word	0x080042a1
 800425c:	080042a1 	.word	0x080042a1
 8004260:	080042a1 	.word	0x080042a1
 8004264:	08004295 	.word	0x08004295
 8004268:	080042a1 	.word	0x080042a1
 800426c:	080042a1 	.word	0x080042a1
 8004270:	080042a1 	.word	0x080042a1
 8004274:	0800428f 	.word	0x0800428f
 8004278:	080042a1 	.word	0x080042a1
 800427c:	080042a1 	.word	0x080042a1
 8004280:	080042a1 	.word	0x080042a1
 8004284:	0800429b 	.word	0x0800429b
 8004288:	2300      	movs	r3, #0
 800428a:	76fb      	strb	r3, [r7, #27]
 800428c:	e0af      	b.n	80043ee <UART_SetConfig+0x282>
 800428e:	2302      	movs	r3, #2
 8004290:	76fb      	strb	r3, [r7, #27]
 8004292:	e0ac      	b.n	80043ee <UART_SetConfig+0x282>
 8004294:	2304      	movs	r3, #4
 8004296:	76fb      	strb	r3, [r7, #27]
 8004298:	e0a9      	b.n	80043ee <UART_SetConfig+0x282>
 800429a:	2308      	movs	r3, #8
 800429c:	76fb      	strb	r3, [r7, #27]
 800429e:	e0a6      	b.n	80043ee <UART_SetConfig+0x282>
 80042a0:	2310      	movs	r3, #16
 80042a2:	76fb      	strb	r3, [r7, #27]
 80042a4:	e0a3      	b.n	80043ee <UART_SetConfig+0x282>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a6d      	ldr	r2, [pc, #436]	; (8004460 <UART_SetConfig+0x2f4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d120      	bne.n	80042f2 <UART_SetConfig+0x186>
 80042b0:	4b69      	ldr	r3, [pc, #420]	; (8004458 <UART_SetConfig+0x2ec>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042ba:	2b30      	cmp	r3, #48	; 0x30
 80042bc:	d013      	beq.n	80042e6 <UART_SetConfig+0x17a>
 80042be:	2b30      	cmp	r3, #48	; 0x30
 80042c0:	d814      	bhi.n	80042ec <UART_SetConfig+0x180>
 80042c2:	2b20      	cmp	r3, #32
 80042c4:	d009      	beq.n	80042da <UART_SetConfig+0x16e>
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	d810      	bhi.n	80042ec <UART_SetConfig+0x180>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <UART_SetConfig+0x168>
 80042ce:	2b10      	cmp	r3, #16
 80042d0:	d006      	beq.n	80042e0 <UART_SetConfig+0x174>
 80042d2:	e00b      	b.n	80042ec <UART_SetConfig+0x180>
 80042d4:	2300      	movs	r3, #0
 80042d6:	76fb      	strb	r3, [r7, #27]
 80042d8:	e089      	b.n	80043ee <UART_SetConfig+0x282>
 80042da:	2302      	movs	r3, #2
 80042dc:	76fb      	strb	r3, [r7, #27]
 80042de:	e086      	b.n	80043ee <UART_SetConfig+0x282>
 80042e0:	2304      	movs	r3, #4
 80042e2:	76fb      	strb	r3, [r7, #27]
 80042e4:	e083      	b.n	80043ee <UART_SetConfig+0x282>
 80042e6:	2308      	movs	r3, #8
 80042e8:	76fb      	strb	r3, [r7, #27]
 80042ea:	e080      	b.n	80043ee <UART_SetConfig+0x282>
 80042ec:	2310      	movs	r3, #16
 80042ee:	76fb      	strb	r3, [r7, #27]
 80042f0:	e07d      	b.n	80043ee <UART_SetConfig+0x282>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a5b      	ldr	r2, [pc, #364]	; (8004464 <UART_SetConfig+0x2f8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d120      	bne.n	800433e <UART_SetConfig+0x1d2>
 80042fc:	4b56      	ldr	r3, [pc, #344]	; (8004458 <UART_SetConfig+0x2ec>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004302:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004306:	2bc0      	cmp	r3, #192	; 0xc0
 8004308:	d013      	beq.n	8004332 <UART_SetConfig+0x1c6>
 800430a:	2bc0      	cmp	r3, #192	; 0xc0
 800430c:	d814      	bhi.n	8004338 <UART_SetConfig+0x1cc>
 800430e:	2b80      	cmp	r3, #128	; 0x80
 8004310:	d009      	beq.n	8004326 <UART_SetConfig+0x1ba>
 8004312:	2b80      	cmp	r3, #128	; 0x80
 8004314:	d810      	bhi.n	8004338 <UART_SetConfig+0x1cc>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <UART_SetConfig+0x1b4>
 800431a:	2b40      	cmp	r3, #64	; 0x40
 800431c:	d006      	beq.n	800432c <UART_SetConfig+0x1c0>
 800431e:	e00b      	b.n	8004338 <UART_SetConfig+0x1cc>
 8004320:	2300      	movs	r3, #0
 8004322:	76fb      	strb	r3, [r7, #27]
 8004324:	e063      	b.n	80043ee <UART_SetConfig+0x282>
 8004326:	2302      	movs	r3, #2
 8004328:	76fb      	strb	r3, [r7, #27]
 800432a:	e060      	b.n	80043ee <UART_SetConfig+0x282>
 800432c:	2304      	movs	r3, #4
 800432e:	76fb      	strb	r3, [r7, #27]
 8004330:	e05d      	b.n	80043ee <UART_SetConfig+0x282>
 8004332:	2308      	movs	r3, #8
 8004334:	76fb      	strb	r3, [r7, #27]
 8004336:	e05a      	b.n	80043ee <UART_SetConfig+0x282>
 8004338:	2310      	movs	r3, #16
 800433a:	76fb      	strb	r3, [r7, #27]
 800433c:	e057      	b.n	80043ee <UART_SetConfig+0x282>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a49      	ldr	r2, [pc, #292]	; (8004468 <UART_SetConfig+0x2fc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d125      	bne.n	8004394 <UART_SetConfig+0x228>
 8004348:	4b43      	ldr	r3, [pc, #268]	; (8004458 <UART_SetConfig+0x2ec>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004356:	d017      	beq.n	8004388 <UART_SetConfig+0x21c>
 8004358:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800435c:	d817      	bhi.n	800438e <UART_SetConfig+0x222>
 800435e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004362:	d00b      	beq.n	800437c <UART_SetConfig+0x210>
 8004364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004368:	d811      	bhi.n	800438e <UART_SetConfig+0x222>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <UART_SetConfig+0x20a>
 800436e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004372:	d006      	beq.n	8004382 <UART_SetConfig+0x216>
 8004374:	e00b      	b.n	800438e <UART_SetConfig+0x222>
 8004376:	2300      	movs	r3, #0
 8004378:	76fb      	strb	r3, [r7, #27]
 800437a:	e038      	b.n	80043ee <UART_SetConfig+0x282>
 800437c:	2302      	movs	r3, #2
 800437e:	76fb      	strb	r3, [r7, #27]
 8004380:	e035      	b.n	80043ee <UART_SetConfig+0x282>
 8004382:	2304      	movs	r3, #4
 8004384:	76fb      	strb	r3, [r7, #27]
 8004386:	e032      	b.n	80043ee <UART_SetConfig+0x282>
 8004388:	2308      	movs	r3, #8
 800438a:	76fb      	strb	r3, [r7, #27]
 800438c:	e02f      	b.n	80043ee <UART_SetConfig+0x282>
 800438e:	2310      	movs	r3, #16
 8004390:	76fb      	strb	r3, [r7, #27]
 8004392:	e02c      	b.n	80043ee <UART_SetConfig+0x282>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a2d      	ldr	r2, [pc, #180]	; (8004450 <UART_SetConfig+0x2e4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d125      	bne.n	80043ea <UART_SetConfig+0x27e>
 800439e:	4b2e      	ldr	r3, [pc, #184]	; (8004458 <UART_SetConfig+0x2ec>)
 80043a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043ac:	d017      	beq.n	80043de <UART_SetConfig+0x272>
 80043ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043b2:	d817      	bhi.n	80043e4 <UART_SetConfig+0x278>
 80043b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b8:	d00b      	beq.n	80043d2 <UART_SetConfig+0x266>
 80043ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043be:	d811      	bhi.n	80043e4 <UART_SetConfig+0x278>
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <UART_SetConfig+0x260>
 80043c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c8:	d006      	beq.n	80043d8 <UART_SetConfig+0x26c>
 80043ca:	e00b      	b.n	80043e4 <UART_SetConfig+0x278>
 80043cc:	2300      	movs	r3, #0
 80043ce:	76fb      	strb	r3, [r7, #27]
 80043d0:	e00d      	b.n	80043ee <UART_SetConfig+0x282>
 80043d2:	2302      	movs	r3, #2
 80043d4:	76fb      	strb	r3, [r7, #27]
 80043d6:	e00a      	b.n	80043ee <UART_SetConfig+0x282>
 80043d8:	2304      	movs	r3, #4
 80043da:	76fb      	strb	r3, [r7, #27]
 80043dc:	e007      	b.n	80043ee <UART_SetConfig+0x282>
 80043de:	2308      	movs	r3, #8
 80043e0:	76fb      	strb	r3, [r7, #27]
 80043e2:	e004      	b.n	80043ee <UART_SetConfig+0x282>
 80043e4:	2310      	movs	r3, #16
 80043e6:	76fb      	strb	r3, [r7, #27]
 80043e8:	e001      	b.n	80043ee <UART_SetConfig+0x282>
 80043ea:	2310      	movs	r3, #16
 80043ec:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a17      	ldr	r2, [pc, #92]	; (8004450 <UART_SetConfig+0x2e4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	f040 8087 	bne.w	8004508 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043fa:	7efb      	ldrb	r3, [r7, #27]
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d837      	bhi.n	8004470 <UART_SetConfig+0x304>
 8004400:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <UART_SetConfig+0x29c>)
 8004402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004406:	bf00      	nop
 8004408:	0800442d 	.word	0x0800442d
 800440c:	08004471 	.word	0x08004471
 8004410:	08004435 	.word	0x08004435
 8004414:	08004471 	.word	0x08004471
 8004418:	0800443b 	.word	0x0800443b
 800441c:	08004471 	.word	0x08004471
 8004420:	08004471 	.word	0x08004471
 8004424:	08004471 	.word	0x08004471
 8004428:	08004443 	.word	0x08004443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800442c:	f7ff f874 	bl	8003518 <HAL_RCC_GetPCLK1Freq>
 8004430:	6178      	str	r0, [r7, #20]
        break;
 8004432:	e022      	b.n	800447a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004434:	4b0d      	ldr	r3, [pc, #52]	; (800446c <UART_SetConfig+0x300>)
 8004436:	617b      	str	r3, [r7, #20]
        break;
 8004438:	e01f      	b.n	800447a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800443a:	f7fe ffd5 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 800443e:	6178      	str	r0, [r7, #20]
        break;
 8004440:	e01b      	b.n	800447a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004446:	617b      	str	r3, [r7, #20]
        break;
 8004448:	e017      	b.n	800447a <UART_SetConfig+0x30e>
 800444a:	bf00      	nop
 800444c:	efff69f3 	.word	0xefff69f3
 8004450:	40008000 	.word	0x40008000
 8004454:	40013800 	.word	0x40013800
 8004458:	40021000 	.word	0x40021000
 800445c:	40004400 	.word	0x40004400
 8004460:	40004800 	.word	0x40004800
 8004464:	40004c00 	.word	0x40004c00
 8004468:	40005000 	.word	0x40005000
 800446c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	76bb      	strb	r3, [r7, #26]
        break;
 8004478:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80f1 	beq.w	8004664 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4413      	add	r3, r2
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	429a      	cmp	r2, r3
 8004490:	d305      	bcc.n	800449e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	429a      	cmp	r2, r3
 800449c:	d902      	bls.n	80044a4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	76bb      	strb	r3, [r7, #26]
 80044a2:	e0df      	b.n	8004664 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f04f 0100 	mov.w	r1, #0
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	020b      	lsls	r3, r1, #8
 80044b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80044ba:	0202      	lsls	r2, r0, #8
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	6849      	ldr	r1, [r1, #4]
 80044c0:	0849      	lsrs	r1, r1, #1
 80044c2:	4608      	mov	r0, r1
 80044c4:	f04f 0100 	mov.w	r1, #0
 80044c8:	1814      	adds	r4, r2, r0
 80044ca:	eb43 0501 	adc.w	r5, r3, r1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	461a      	mov	r2, r3
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	4620      	mov	r0, r4
 80044da:	4629      	mov	r1, r5
 80044dc:	f7fc fa56 	bl	800098c <__aeabi_uldivmod>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4613      	mov	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ee:	d308      	bcc.n	8004502 <UART_SetConfig+0x396>
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f6:	d204      	bcs.n	8004502 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	60da      	str	r2, [r3, #12]
 8004500:	e0b0      	b.n	8004664 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	76bb      	strb	r3, [r7, #26]
 8004506:	e0ad      	b.n	8004664 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004510:	d15b      	bne.n	80045ca <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004512:	7efb      	ldrb	r3, [r7, #27]
 8004514:	2b08      	cmp	r3, #8
 8004516:	d828      	bhi.n	800456a <UART_SetConfig+0x3fe>
 8004518:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <UART_SetConfig+0x3b4>)
 800451a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451e:	bf00      	nop
 8004520:	08004545 	.word	0x08004545
 8004524:	0800454d 	.word	0x0800454d
 8004528:	08004555 	.word	0x08004555
 800452c:	0800456b 	.word	0x0800456b
 8004530:	0800455b 	.word	0x0800455b
 8004534:	0800456b 	.word	0x0800456b
 8004538:	0800456b 	.word	0x0800456b
 800453c:	0800456b 	.word	0x0800456b
 8004540:	08004563 	.word	0x08004563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004544:	f7fe ffe8 	bl	8003518 <HAL_RCC_GetPCLK1Freq>
 8004548:	6178      	str	r0, [r7, #20]
        break;
 800454a:	e013      	b.n	8004574 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800454c:	f7fe fffa 	bl	8003544 <HAL_RCC_GetPCLK2Freq>
 8004550:	6178      	str	r0, [r7, #20]
        break;
 8004552:	e00f      	b.n	8004574 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004554:	4b49      	ldr	r3, [pc, #292]	; (800467c <UART_SetConfig+0x510>)
 8004556:	617b      	str	r3, [r7, #20]
        break;
 8004558:	e00c      	b.n	8004574 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800455a:	f7fe ff45 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 800455e:	6178      	str	r0, [r7, #20]
        break;
 8004560:	e008      	b.n	8004574 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004566:	617b      	str	r3, [r7, #20]
        break;
 8004568:	e004      	b.n	8004574 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	76bb      	strb	r3, [r7, #26]
        break;
 8004572:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d074      	beq.n	8004664 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	005a      	lsls	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	441a      	add	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	fbb2 f3f3 	udiv	r3, r2, r3
 800458e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	2b0f      	cmp	r3, #15
 8004594:	d916      	bls.n	80045c4 <UART_SetConfig+0x458>
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800459c:	d212      	bcs.n	80045c4 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f023 030f 	bic.w	r3, r3, #15
 80045a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	085b      	lsrs	r3, r3, #1
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	89fb      	ldrh	r3, [r7, #14]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	89fa      	ldrh	r2, [r7, #14]
 80045c0:	60da      	str	r2, [r3, #12]
 80045c2:	e04f      	b.n	8004664 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	76bb      	strb	r3, [r7, #26]
 80045c8:	e04c      	b.n	8004664 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045ca:	7efb      	ldrb	r3, [r7, #27]
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d828      	bhi.n	8004622 <UART_SetConfig+0x4b6>
 80045d0:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <UART_SetConfig+0x46c>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	080045fd 	.word	0x080045fd
 80045dc:	08004605 	.word	0x08004605
 80045e0:	0800460d 	.word	0x0800460d
 80045e4:	08004623 	.word	0x08004623
 80045e8:	08004613 	.word	0x08004613
 80045ec:	08004623 	.word	0x08004623
 80045f0:	08004623 	.word	0x08004623
 80045f4:	08004623 	.word	0x08004623
 80045f8:	0800461b 	.word	0x0800461b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045fc:	f7fe ff8c 	bl	8003518 <HAL_RCC_GetPCLK1Freq>
 8004600:	6178      	str	r0, [r7, #20]
        break;
 8004602:	e013      	b.n	800462c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004604:	f7fe ff9e 	bl	8003544 <HAL_RCC_GetPCLK2Freq>
 8004608:	6178      	str	r0, [r7, #20]
        break;
 800460a:	e00f      	b.n	800462c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800460c:	4b1b      	ldr	r3, [pc, #108]	; (800467c <UART_SetConfig+0x510>)
 800460e:	617b      	str	r3, [r7, #20]
        break;
 8004610:	e00c      	b.n	800462c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004612:	f7fe fee9 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 8004616:	6178      	str	r0, [r7, #20]
        break;
 8004618:	e008      	b.n	800462c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800461a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800461e:	617b      	str	r3, [r7, #20]
        break;
 8004620:	e004      	b.n	800462c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	76bb      	strb	r3, [r7, #26]
        break;
 800462a:	bf00      	nop
    }

    if (pclk != 0U)
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d018      	beq.n	8004664 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	085a      	lsrs	r2, r3, #1
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	441a      	add	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	fbb2 f3f3 	udiv	r3, r2, r3
 8004644:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b0f      	cmp	r3, #15
 800464a:	d909      	bls.n	8004660 <UART_SetConfig+0x4f4>
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004652:	d205      	bcs.n	8004660 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	b29a      	uxth	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60da      	str	r2, [r3, #12]
 800465e:	e001      	b.n	8004664 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004670:	7ebb      	ldrb	r3, [r7, #26]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3720      	adds	r7, #32
 8004676:	46bd      	mov	sp, r7
 8004678:	bdb0      	pop	{r4, r5, r7, pc}
 800467a:	bf00      	nop
 800467c:	00f42400 	.word	0x00f42400

08004680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00a      	beq.n	8004732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01a      	beq.n	8004796 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800477e:	d10a      	bne.n	8004796 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	605a      	str	r2, [r3, #4]
  }
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047d4:	f7fc ff96 	bl	8001704 <HAL_GetTick>
 80047d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d10e      	bne.n	8004806 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f82d 	bl	8004856 <UART_WaitOnFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e023      	b.n	800484e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b04      	cmp	r3, #4
 8004812:	d10e      	bne.n	8004832 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004814:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f817 	bl	8004856 <UART_WaitOnFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e00d      	b.n	800484e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b09c      	sub	sp, #112	; 0x70
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	603b      	str	r3, [r7, #0]
 8004862:	4613      	mov	r3, r2
 8004864:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004866:	e0a5      	b.n	80049b4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004868:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800486a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800486e:	f000 80a1 	beq.w	80049b4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004872:	f7fc ff47 	bl	8001704 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800487e:	429a      	cmp	r2, r3
 8004880:	d302      	bcc.n	8004888 <UART_WaitOnFlagUntilTimeout+0x32>
 8004882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004884:	2b00      	cmp	r3, #0
 8004886:	d13e      	bne.n	8004906 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004890:	e853 3f00 	ldrex	r3, [r3]
 8004894:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004898:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800489c:	667b      	str	r3, [r7, #100]	; 0x64
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048a8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048ae:	e841 2300 	strex	r3, r2, [r1]
 80048b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1e6      	bne.n	8004888 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3308      	adds	r3, #8
 80048c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c4:	e853 3f00 	ldrex	r3, [r3]
 80048c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048cc:	f023 0301 	bic.w	r3, r3, #1
 80048d0:	663b      	str	r3, [r7, #96]	; 0x60
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3308      	adds	r3, #8
 80048d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048da:	64ba      	str	r2, [r7, #72]	; 0x48
 80048dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048e2:	e841 2300 	strex	r3, r2, [r1]
 80048e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80048e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1e5      	bne.n	80048ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2220      	movs	r2, #32
 80048f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e067      	b.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d04f      	beq.n	80049b4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800491e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004922:	d147      	bne.n	80049b4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800492c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004942:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	461a      	mov	r2, r3
 800494a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800494c:	637b      	str	r3, [r7, #52]	; 0x34
 800494e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e6      	bne.n	800492e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3308      	adds	r3, #8
 8004966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	613b      	str	r3, [r7, #16]
   return(result);
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f023 0301 	bic.w	r3, r3, #1
 8004976:	66bb      	str	r3, [r7, #104]	; 0x68
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3308      	adds	r3, #8
 800497e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004980:	623a      	str	r2, [r7, #32]
 8004982:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	69f9      	ldr	r1, [r7, #28]
 8004986:	6a3a      	ldr	r2, [r7, #32]
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	61bb      	str	r3, [r7, #24]
   return(result);
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e5      	bne.n	8004960 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2220      	movs	r2, #32
 800499e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e010      	b.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69da      	ldr	r2, [r3, #28]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4013      	ands	r3, r2
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	461a      	mov	r2, r3
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	f43f af4a 	beq.w	8004868 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3770      	adds	r7, #112	; 0x70
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <__errno>:
 80049e0:	4b01      	ldr	r3, [pc, #4]	; (80049e8 <__errno+0x8>)
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	2000001c 	.word	0x2000001c

080049ec <__libc_init_array>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	4d0d      	ldr	r5, [pc, #52]	; (8004a24 <__libc_init_array+0x38>)
 80049f0:	4c0d      	ldr	r4, [pc, #52]	; (8004a28 <__libc_init_array+0x3c>)
 80049f2:	1b64      	subs	r4, r4, r5
 80049f4:	10a4      	asrs	r4, r4, #2
 80049f6:	2600      	movs	r6, #0
 80049f8:	42a6      	cmp	r6, r4
 80049fa:	d109      	bne.n	8004a10 <__libc_init_array+0x24>
 80049fc:	4d0b      	ldr	r5, [pc, #44]	; (8004a2c <__libc_init_array+0x40>)
 80049fe:	4c0c      	ldr	r4, [pc, #48]	; (8004a30 <__libc_init_array+0x44>)
 8004a00:	f000 ffec 	bl	80059dc <_init>
 8004a04:	1b64      	subs	r4, r4, r5
 8004a06:	10a4      	asrs	r4, r4, #2
 8004a08:	2600      	movs	r6, #0
 8004a0a:	42a6      	cmp	r6, r4
 8004a0c:	d105      	bne.n	8004a1a <__libc_init_array+0x2e>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a14:	4798      	blx	r3
 8004a16:	3601      	adds	r6, #1
 8004a18:	e7ee      	b.n	80049f8 <__libc_init_array+0xc>
 8004a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1e:	4798      	blx	r3
 8004a20:	3601      	adds	r6, #1
 8004a22:	e7f2      	b.n	8004a0a <__libc_init_array+0x1e>
 8004a24:	08005ba8 	.word	0x08005ba8
 8004a28:	08005ba8 	.word	0x08005ba8
 8004a2c:	08005ba8 	.word	0x08005ba8
 8004a30:	08005bac 	.word	0x08005bac

08004a34 <memset>:
 8004a34:	4402      	add	r2, r0
 8004a36:	4603      	mov	r3, r0
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d100      	bne.n	8004a3e <memset+0xa>
 8004a3c:	4770      	bx	lr
 8004a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a42:	e7f9      	b.n	8004a38 <memset+0x4>

08004a44 <iprintf>:
 8004a44:	b40f      	push	{r0, r1, r2, r3}
 8004a46:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <iprintf+0x2c>)
 8004a48:	b513      	push	{r0, r1, r4, lr}
 8004a4a:	681c      	ldr	r4, [r3, #0]
 8004a4c:	b124      	cbz	r4, 8004a58 <iprintf+0x14>
 8004a4e:	69a3      	ldr	r3, [r4, #24]
 8004a50:	b913      	cbnz	r3, 8004a58 <iprintf+0x14>
 8004a52:	4620      	mov	r0, r4
 8004a54:	f000 fa5e 	bl	8004f14 <__sinit>
 8004a58:	ab05      	add	r3, sp, #20
 8004a5a:	9a04      	ldr	r2, [sp, #16]
 8004a5c:	68a1      	ldr	r1, [r4, #8]
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	4620      	mov	r0, r4
 8004a62:	f000 fc2f 	bl	80052c4 <_vfiprintf_r>
 8004a66:	b002      	add	sp, #8
 8004a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a6c:	b004      	add	sp, #16
 8004a6e:	4770      	bx	lr
 8004a70:	2000001c 	.word	0x2000001c

08004a74 <_puts_r>:
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	460e      	mov	r6, r1
 8004a78:	4605      	mov	r5, r0
 8004a7a:	b118      	cbz	r0, 8004a84 <_puts_r+0x10>
 8004a7c:	6983      	ldr	r3, [r0, #24]
 8004a7e:	b90b      	cbnz	r3, 8004a84 <_puts_r+0x10>
 8004a80:	f000 fa48 	bl	8004f14 <__sinit>
 8004a84:	69ab      	ldr	r3, [r5, #24]
 8004a86:	68ac      	ldr	r4, [r5, #8]
 8004a88:	b913      	cbnz	r3, 8004a90 <_puts_r+0x1c>
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f000 fa42 	bl	8004f14 <__sinit>
 8004a90:	4b2c      	ldr	r3, [pc, #176]	; (8004b44 <_puts_r+0xd0>)
 8004a92:	429c      	cmp	r4, r3
 8004a94:	d120      	bne.n	8004ad8 <_puts_r+0x64>
 8004a96:	686c      	ldr	r4, [r5, #4]
 8004a98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a9a:	07db      	lsls	r3, r3, #31
 8004a9c:	d405      	bmi.n	8004aaa <_puts_r+0x36>
 8004a9e:	89a3      	ldrh	r3, [r4, #12]
 8004aa0:	0598      	lsls	r0, r3, #22
 8004aa2:	d402      	bmi.n	8004aaa <_puts_r+0x36>
 8004aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aa6:	f000 fad3 	bl	8005050 <__retarget_lock_acquire_recursive>
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	0719      	lsls	r1, r3, #28
 8004aae:	d51d      	bpl.n	8004aec <_puts_r+0x78>
 8004ab0:	6923      	ldr	r3, [r4, #16]
 8004ab2:	b1db      	cbz	r3, 8004aec <_puts_r+0x78>
 8004ab4:	3e01      	subs	r6, #1
 8004ab6:	68a3      	ldr	r3, [r4, #8]
 8004ab8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004abc:	3b01      	subs	r3, #1
 8004abe:	60a3      	str	r3, [r4, #8]
 8004ac0:	bb39      	cbnz	r1, 8004b12 <_puts_r+0x9e>
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	da38      	bge.n	8004b38 <_puts_r+0xc4>
 8004ac6:	4622      	mov	r2, r4
 8004ac8:	210a      	movs	r1, #10
 8004aca:	4628      	mov	r0, r5
 8004acc:	f000 f848 	bl	8004b60 <__swbuf_r>
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	d011      	beq.n	8004af8 <_puts_r+0x84>
 8004ad4:	250a      	movs	r5, #10
 8004ad6:	e011      	b.n	8004afc <_puts_r+0x88>
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <_puts_r+0xd4>)
 8004ada:	429c      	cmp	r4, r3
 8004adc:	d101      	bne.n	8004ae2 <_puts_r+0x6e>
 8004ade:	68ac      	ldr	r4, [r5, #8]
 8004ae0:	e7da      	b.n	8004a98 <_puts_r+0x24>
 8004ae2:	4b1a      	ldr	r3, [pc, #104]	; (8004b4c <_puts_r+0xd8>)
 8004ae4:	429c      	cmp	r4, r3
 8004ae6:	bf08      	it	eq
 8004ae8:	68ec      	ldreq	r4, [r5, #12]
 8004aea:	e7d5      	b.n	8004a98 <_puts_r+0x24>
 8004aec:	4621      	mov	r1, r4
 8004aee:	4628      	mov	r0, r5
 8004af0:	f000 f888 	bl	8004c04 <__swsetup_r>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	d0dd      	beq.n	8004ab4 <_puts_r+0x40>
 8004af8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004afc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004afe:	07da      	lsls	r2, r3, #31
 8004b00:	d405      	bmi.n	8004b0e <_puts_r+0x9a>
 8004b02:	89a3      	ldrh	r3, [r4, #12]
 8004b04:	059b      	lsls	r3, r3, #22
 8004b06:	d402      	bmi.n	8004b0e <_puts_r+0x9a>
 8004b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b0a:	f000 faa2 	bl	8005052 <__retarget_lock_release_recursive>
 8004b0e:	4628      	mov	r0, r5
 8004b10:	bd70      	pop	{r4, r5, r6, pc}
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	da04      	bge.n	8004b20 <_puts_r+0xac>
 8004b16:	69a2      	ldr	r2, [r4, #24]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	dc06      	bgt.n	8004b2a <_puts_r+0xb6>
 8004b1c:	290a      	cmp	r1, #10
 8004b1e:	d004      	beq.n	8004b2a <_puts_r+0xb6>
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	6022      	str	r2, [r4, #0]
 8004b26:	7019      	strb	r1, [r3, #0]
 8004b28:	e7c5      	b.n	8004ab6 <_puts_r+0x42>
 8004b2a:	4622      	mov	r2, r4
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	f000 f817 	bl	8004b60 <__swbuf_r>
 8004b32:	3001      	adds	r0, #1
 8004b34:	d1bf      	bne.n	8004ab6 <_puts_r+0x42>
 8004b36:	e7df      	b.n	8004af8 <_puts_r+0x84>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	250a      	movs	r5, #10
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	6022      	str	r2, [r4, #0]
 8004b40:	701d      	strb	r5, [r3, #0]
 8004b42:	e7db      	b.n	8004afc <_puts_r+0x88>
 8004b44:	08005b2c 	.word	0x08005b2c
 8004b48:	08005b4c 	.word	0x08005b4c
 8004b4c:	08005b0c 	.word	0x08005b0c

08004b50 <puts>:
 8004b50:	4b02      	ldr	r3, [pc, #8]	; (8004b5c <puts+0xc>)
 8004b52:	4601      	mov	r1, r0
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	f7ff bf8d 	b.w	8004a74 <_puts_r>
 8004b5a:	bf00      	nop
 8004b5c:	2000001c 	.word	0x2000001c

08004b60 <__swbuf_r>:
 8004b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b62:	460e      	mov	r6, r1
 8004b64:	4614      	mov	r4, r2
 8004b66:	4605      	mov	r5, r0
 8004b68:	b118      	cbz	r0, 8004b72 <__swbuf_r+0x12>
 8004b6a:	6983      	ldr	r3, [r0, #24]
 8004b6c:	b90b      	cbnz	r3, 8004b72 <__swbuf_r+0x12>
 8004b6e:	f000 f9d1 	bl	8004f14 <__sinit>
 8004b72:	4b21      	ldr	r3, [pc, #132]	; (8004bf8 <__swbuf_r+0x98>)
 8004b74:	429c      	cmp	r4, r3
 8004b76:	d12b      	bne.n	8004bd0 <__swbuf_r+0x70>
 8004b78:	686c      	ldr	r4, [r5, #4]
 8004b7a:	69a3      	ldr	r3, [r4, #24]
 8004b7c:	60a3      	str	r3, [r4, #8]
 8004b7e:	89a3      	ldrh	r3, [r4, #12]
 8004b80:	071a      	lsls	r2, r3, #28
 8004b82:	d52f      	bpl.n	8004be4 <__swbuf_r+0x84>
 8004b84:	6923      	ldr	r3, [r4, #16]
 8004b86:	b36b      	cbz	r3, 8004be4 <__swbuf_r+0x84>
 8004b88:	6923      	ldr	r3, [r4, #16]
 8004b8a:	6820      	ldr	r0, [r4, #0]
 8004b8c:	1ac0      	subs	r0, r0, r3
 8004b8e:	6963      	ldr	r3, [r4, #20]
 8004b90:	b2f6      	uxtb	r6, r6
 8004b92:	4283      	cmp	r3, r0
 8004b94:	4637      	mov	r7, r6
 8004b96:	dc04      	bgt.n	8004ba2 <__swbuf_r+0x42>
 8004b98:	4621      	mov	r1, r4
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	f000 f926 	bl	8004dec <_fflush_r>
 8004ba0:	bb30      	cbnz	r0, 8004bf0 <__swbuf_r+0x90>
 8004ba2:	68a3      	ldr	r3, [r4, #8]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	60a3      	str	r3, [r4, #8]
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	6022      	str	r2, [r4, #0]
 8004bae:	701e      	strb	r6, [r3, #0]
 8004bb0:	6963      	ldr	r3, [r4, #20]
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	4283      	cmp	r3, r0
 8004bb6:	d004      	beq.n	8004bc2 <__swbuf_r+0x62>
 8004bb8:	89a3      	ldrh	r3, [r4, #12]
 8004bba:	07db      	lsls	r3, r3, #31
 8004bbc:	d506      	bpl.n	8004bcc <__swbuf_r+0x6c>
 8004bbe:	2e0a      	cmp	r6, #10
 8004bc0:	d104      	bne.n	8004bcc <__swbuf_r+0x6c>
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	f000 f911 	bl	8004dec <_fflush_r>
 8004bca:	b988      	cbnz	r0, 8004bf0 <__swbuf_r+0x90>
 8004bcc:	4638      	mov	r0, r7
 8004bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bd0:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <__swbuf_r+0x9c>)
 8004bd2:	429c      	cmp	r4, r3
 8004bd4:	d101      	bne.n	8004bda <__swbuf_r+0x7a>
 8004bd6:	68ac      	ldr	r4, [r5, #8]
 8004bd8:	e7cf      	b.n	8004b7a <__swbuf_r+0x1a>
 8004bda:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <__swbuf_r+0xa0>)
 8004bdc:	429c      	cmp	r4, r3
 8004bde:	bf08      	it	eq
 8004be0:	68ec      	ldreq	r4, [r5, #12]
 8004be2:	e7ca      	b.n	8004b7a <__swbuf_r+0x1a>
 8004be4:	4621      	mov	r1, r4
 8004be6:	4628      	mov	r0, r5
 8004be8:	f000 f80c 	bl	8004c04 <__swsetup_r>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d0cb      	beq.n	8004b88 <__swbuf_r+0x28>
 8004bf0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004bf4:	e7ea      	b.n	8004bcc <__swbuf_r+0x6c>
 8004bf6:	bf00      	nop
 8004bf8:	08005b2c 	.word	0x08005b2c
 8004bfc:	08005b4c 	.word	0x08005b4c
 8004c00:	08005b0c 	.word	0x08005b0c

08004c04 <__swsetup_r>:
 8004c04:	4b32      	ldr	r3, [pc, #200]	; (8004cd0 <__swsetup_r+0xcc>)
 8004c06:	b570      	push	{r4, r5, r6, lr}
 8004c08:	681d      	ldr	r5, [r3, #0]
 8004c0a:	4606      	mov	r6, r0
 8004c0c:	460c      	mov	r4, r1
 8004c0e:	b125      	cbz	r5, 8004c1a <__swsetup_r+0x16>
 8004c10:	69ab      	ldr	r3, [r5, #24]
 8004c12:	b913      	cbnz	r3, 8004c1a <__swsetup_r+0x16>
 8004c14:	4628      	mov	r0, r5
 8004c16:	f000 f97d 	bl	8004f14 <__sinit>
 8004c1a:	4b2e      	ldr	r3, [pc, #184]	; (8004cd4 <__swsetup_r+0xd0>)
 8004c1c:	429c      	cmp	r4, r3
 8004c1e:	d10f      	bne.n	8004c40 <__swsetup_r+0x3c>
 8004c20:	686c      	ldr	r4, [r5, #4]
 8004c22:	89a3      	ldrh	r3, [r4, #12]
 8004c24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c28:	0719      	lsls	r1, r3, #28
 8004c2a:	d42c      	bmi.n	8004c86 <__swsetup_r+0x82>
 8004c2c:	06dd      	lsls	r5, r3, #27
 8004c2e:	d411      	bmi.n	8004c54 <__swsetup_r+0x50>
 8004c30:	2309      	movs	r3, #9
 8004c32:	6033      	str	r3, [r6, #0]
 8004c34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c38:	81a3      	strh	r3, [r4, #12]
 8004c3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c3e:	e03e      	b.n	8004cbe <__swsetup_r+0xba>
 8004c40:	4b25      	ldr	r3, [pc, #148]	; (8004cd8 <__swsetup_r+0xd4>)
 8004c42:	429c      	cmp	r4, r3
 8004c44:	d101      	bne.n	8004c4a <__swsetup_r+0x46>
 8004c46:	68ac      	ldr	r4, [r5, #8]
 8004c48:	e7eb      	b.n	8004c22 <__swsetup_r+0x1e>
 8004c4a:	4b24      	ldr	r3, [pc, #144]	; (8004cdc <__swsetup_r+0xd8>)
 8004c4c:	429c      	cmp	r4, r3
 8004c4e:	bf08      	it	eq
 8004c50:	68ec      	ldreq	r4, [r5, #12]
 8004c52:	e7e6      	b.n	8004c22 <__swsetup_r+0x1e>
 8004c54:	0758      	lsls	r0, r3, #29
 8004c56:	d512      	bpl.n	8004c7e <__swsetup_r+0x7a>
 8004c58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c5a:	b141      	cbz	r1, 8004c6e <__swsetup_r+0x6a>
 8004c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c60:	4299      	cmp	r1, r3
 8004c62:	d002      	beq.n	8004c6a <__swsetup_r+0x66>
 8004c64:	4630      	mov	r0, r6
 8004c66:	f000 fa59 	bl	800511c <_free_r>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	6363      	str	r3, [r4, #52]	; 0x34
 8004c6e:	89a3      	ldrh	r3, [r4, #12]
 8004c70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c74:	81a3      	strh	r3, [r4, #12]
 8004c76:	2300      	movs	r3, #0
 8004c78:	6063      	str	r3, [r4, #4]
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	89a3      	ldrh	r3, [r4, #12]
 8004c80:	f043 0308 	orr.w	r3, r3, #8
 8004c84:	81a3      	strh	r3, [r4, #12]
 8004c86:	6923      	ldr	r3, [r4, #16]
 8004c88:	b94b      	cbnz	r3, 8004c9e <__swsetup_r+0x9a>
 8004c8a:	89a3      	ldrh	r3, [r4, #12]
 8004c8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c94:	d003      	beq.n	8004c9e <__swsetup_r+0x9a>
 8004c96:	4621      	mov	r1, r4
 8004c98:	4630      	mov	r0, r6
 8004c9a:	f000 f9ff 	bl	800509c <__smakebuf_r>
 8004c9e:	89a0      	ldrh	r0, [r4, #12]
 8004ca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ca4:	f010 0301 	ands.w	r3, r0, #1
 8004ca8:	d00a      	beq.n	8004cc0 <__swsetup_r+0xbc>
 8004caa:	2300      	movs	r3, #0
 8004cac:	60a3      	str	r3, [r4, #8]
 8004cae:	6963      	ldr	r3, [r4, #20]
 8004cb0:	425b      	negs	r3, r3
 8004cb2:	61a3      	str	r3, [r4, #24]
 8004cb4:	6923      	ldr	r3, [r4, #16]
 8004cb6:	b943      	cbnz	r3, 8004cca <__swsetup_r+0xc6>
 8004cb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004cbc:	d1ba      	bne.n	8004c34 <__swsetup_r+0x30>
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}
 8004cc0:	0781      	lsls	r1, r0, #30
 8004cc2:	bf58      	it	pl
 8004cc4:	6963      	ldrpl	r3, [r4, #20]
 8004cc6:	60a3      	str	r3, [r4, #8]
 8004cc8:	e7f4      	b.n	8004cb4 <__swsetup_r+0xb0>
 8004cca:	2000      	movs	r0, #0
 8004ccc:	e7f7      	b.n	8004cbe <__swsetup_r+0xba>
 8004cce:	bf00      	nop
 8004cd0:	2000001c 	.word	0x2000001c
 8004cd4:	08005b2c 	.word	0x08005b2c
 8004cd8:	08005b4c 	.word	0x08005b4c
 8004cdc:	08005b0c 	.word	0x08005b0c

08004ce0 <__sflush_r>:
 8004ce0:	898a      	ldrh	r2, [r1, #12]
 8004ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce6:	4605      	mov	r5, r0
 8004ce8:	0710      	lsls	r0, r2, #28
 8004cea:	460c      	mov	r4, r1
 8004cec:	d458      	bmi.n	8004da0 <__sflush_r+0xc0>
 8004cee:	684b      	ldr	r3, [r1, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	dc05      	bgt.n	8004d00 <__sflush_r+0x20>
 8004cf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	dc02      	bgt.n	8004d00 <__sflush_r+0x20>
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d02:	2e00      	cmp	r6, #0
 8004d04:	d0f9      	beq.n	8004cfa <__sflush_r+0x1a>
 8004d06:	2300      	movs	r3, #0
 8004d08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d0c:	682f      	ldr	r7, [r5, #0]
 8004d0e:	602b      	str	r3, [r5, #0]
 8004d10:	d032      	beq.n	8004d78 <__sflush_r+0x98>
 8004d12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	075a      	lsls	r2, r3, #29
 8004d18:	d505      	bpl.n	8004d26 <__sflush_r+0x46>
 8004d1a:	6863      	ldr	r3, [r4, #4]
 8004d1c:	1ac0      	subs	r0, r0, r3
 8004d1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d20:	b10b      	cbz	r3, 8004d26 <__sflush_r+0x46>
 8004d22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d24:	1ac0      	subs	r0, r0, r3
 8004d26:	2300      	movs	r3, #0
 8004d28:	4602      	mov	r2, r0
 8004d2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d2c:	6a21      	ldr	r1, [r4, #32]
 8004d2e:	4628      	mov	r0, r5
 8004d30:	47b0      	blx	r6
 8004d32:	1c43      	adds	r3, r0, #1
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	d106      	bne.n	8004d46 <__sflush_r+0x66>
 8004d38:	6829      	ldr	r1, [r5, #0]
 8004d3a:	291d      	cmp	r1, #29
 8004d3c:	d82c      	bhi.n	8004d98 <__sflush_r+0xb8>
 8004d3e:	4a2a      	ldr	r2, [pc, #168]	; (8004de8 <__sflush_r+0x108>)
 8004d40:	40ca      	lsrs	r2, r1
 8004d42:	07d6      	lsls	r6, r2, #31
 8004d44:	d528      	bpl.n	8004d98 <__sflush_r+0xb8>
 8004d46:	2200      	movs	r2, #0
 8004d48:	6062      	str	r2, [r4, #4]
 8004d4a:	04d9      	lsls	r1, r3, #19
 8004d4c:	6922      	ldr	r2, [r4, #16]
 8004d4e:	6022      	str	r2, [r4, #0]
 8004d50:	d504      	bpl.n	8004d5c <__sflush_r+0x7c>
 8004d52:	1c42      	adds	r2, r0, #1
 8004d54:	d101      	bne.n	8004d5a <__sflush_r+0x7a>
 8004d56:	682b      	ldr	r3, [r5, #0]
 8004d58:	b903      	cbnz	r3, 8004d5c <__sflush_r+0x7c>
 8004d5a:	6560      	str	r0, [r4, #84]	; 0x54
 8004d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d5e:	602f      	str	r7, [r5, #0]
 8004d60:	2900      	cmp	r1, #0
 8004d62:	d0ca      	beq.n	8004cfa <__sflush_r+0x1a>
 8004d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d68:	4299      	cmp	r1, r3
 8004d6a:	d002      	beq.n	8004d72 <__sflush_r+0x92>
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	f000 f9d5 	bl	800511c <_free_r>
 8004d72:	2000      	movs	r0, #0
 8004d74:	6360      	str	r0, [r4, #52]	; 0x34
 8004d76:	e7c1      	b.n	8004cfc <__sflush_r+0x1c>
 8004d78:	6a21      	ldr	r1, [r4, #32]
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b0      	blx	r6
 8004d80:	1c41      	adds	r1, r0, #1
 8004d82:	d1c7      	bne.n	8004d14 <__sflush_r+0x34>
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0c4      	beq.n	8004d14 <__sflush_r+0x34>
 8004d8a:	2b1d      	cmp	r3, #29
 8004d8c:	d001      	beq.n	8004d92 <__sflush_r+0xb2>
 8004d8e:	2b16      	cmp	r3, #22
 8004d90:	d101      	bne.n	8004d96 <__sflush_r+0xb6>
 8004d92:	602f      	str	r7, [r5, #0]
 8004d94:	e7b1      	b.n	8004cfa <__sflush_r+0x1a>
 8004d96:	89a3      	ldrh	r3, [r4, #12]
 8004d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d9c:	81a3      	strh	r3, [r4, #12]
 8004d9e:	e7ad      	b.n	8004cfc <__sflush_r+0x1c>
 8004da0:	690f      	ldr	r7, [r1, #16]
 8004da2:	2f00      	cmp	r7, #0
 8004da4:	d0a9      	beq.n	8004cfa <__sflush_r+0x1a>
 8004da6:	0793      	lsls	r3, r2, #30
 8004da8:	680e      	ldr	r6, [r1, #0]
 8004daa:	bf08      	it	eq
 8004dac:	694b      	ldreq	r3, [r1, #20]
 8004dae:	600f      	str	r7, [r1, #0]
 8004db0:	bf18      	it	ne
 8004db2:	2300      	movne	r3, #0
 8004db4:	eba6 0807 	sub.w	r8, r6, r7
 8004db8:	608b      	str	r3, [r1, #8]
 8004dba:	f1b8 0f00 	cmp.w	r8, #0
 8004dbe:	dd9c      	ble.n	8004cfa <__sflush_r+0x1a>
 8004dc0:	6a21      	ldr	r1, [r4, #32]
 8004dc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004dc4:	4643      	mov	r3, r8
 8004dc6:	463a      	mov	r2, r7
 8004dc8:	4628      	mov	r0, r5
 8004dca:	47b0      	blx	r6
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	dc06      	bgt.n	8004dde <__sflush_r+0xfe>
 8004dd0:	89a3      	ldrh	r3, [r4, #12]
 8004dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dd6:	81a3      	strh	r3, [r4, #12]
 8004dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ddc:	e78e      	b.n	8004cfc <__sflush_r+0x1c>
 8004dde:	4407      	add	r7, r0
 8004de0:	eba8 0800 	sub.w	r8, r8, r0
 8004de4:	e7e9      	b.n	8004dba <__sflush_r+0xda>
 8004de6:	bf00      	nop
 8004de8:	20400001 	.word	0x20400001

08004dec <_fflush_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	690b      	ldr	r3, [r1, #16]
 8004df0:	4605      	mov	r5, r0
 8004df2:	460c      	mov	r4, r1
 8004df4:	b913      	cbnz	r3, 8004dfc <_fflush_r+0x10>
 8004df6:	2500      	movs	r5, #0
 8004df8:	4628      	mov	r0, r5
 8004dfa:	bd38      	pop	{r3, r4, r5, pc}
 8004dfc:	b118      	cbz	r0, 8004e06 <_fflush_r+0x1a>
 8004dfe:	6983      	ldr	r3, [r0, #24]
 8004e00:	b90b      	cbnz	r3, 8004e06 <_fflush_r+0x1a>
 8004e02:	f000 f887 	bl	8004f14 <__sinit>
 8004e06:	4b14      	ldr	r3, [pc, #80]	; (8004e58 <_fflush_r+0x6c>)
 8004e08:	429c      	cmp	r4, r3
 8004e0a:	d11b      	bne.n	8004e44 <_fflush_r+0x58>
 8004e0c:	686c      	ldr	r4, [r5, #4]
 8004e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0ef      	beq.n	8004df6 <_fflush_r+0xa>
 8004e16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e18:	07d0      	lsls	r0, r2, #31
 8004e1a:	d404      	bmi.n	8004e26 <_fflush_r+0x3a>
 8004e1c:	0599      	lsls	r1, r3, #22
 8004e1e:	d402      	bmi.n	8004e26 <_fflush_r+0x3a>
 8004e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e22:	f000 f915 	bl	8005050 <__retarget_lock_acquire_recursive>
 8004e26:	4628      	mov	r0, r5
 8004e28:	4621      	mov	r1, r4
 8004e2a:	f7ff ff59 	bl	8004ce0 <__sflush_r>
 8004e2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e30:	07da      	lsls	r2, r3, #31
 8004e32:	4605      	mov	r5, r0
 8004e34:	d4e0      	bmi.n	8004df8 <_fflush_r+0xc>
 8004e36:	89a3      	ldrh	r3, [r4, #12]
 8004e38:	059b      	lsls	r3, r3, #22
 8004e3a:	d4dd      	bmi.n	8004df8 <_fflush_r+0xc>
 8004e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e3e:	f000 f908 	bl	8005052 <__retarget_lock_release_recursive>
 8004e42:	e7d9      	b.n	8004df8 <_fflush_r+0xc>
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <_fflush_r+0x70>)
 8004e46:	429c      	cmp	r4, r3
 8004e48:	d101      	bne.n	8004e4e <_fflush_r+0x62>
 8004e4a:	68ac      	ldr	r4, [r5, #8]
 8004e4c:	e7df      	b.n	8004e0e <_fflush_r+0x22>
 8004e4e:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <_fflush_r+0x74>)
 8004e50:	429c      	cmp	r4, r3
 8004e52:	bf08      	it	eq
 8004e54:	68ec      	ldreq	r4, [r5, #12]
 8004e56:	e7da      	b.n	8004e0e <_fflush_r+0x22>
 8004e58:	08005b2c 	.word	0x08005b2c
 8004e5c:	08005b4c 	.word	0x08005b4c
 8004e60:	08005b0c 	.word	0x08005b0c

08004e64 <std>:
 8004e64:	2300      	movs	r3, #0
 8004e66:	b510      	push	{r4, lr}
 8004e68:	4604      	mov	r4, r0
 8004e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8004e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e72:	6083      	str	r3, [r0, #8]
 8004e74:	8181      	strh	r1, [r0, #12]
 8004e76:	6643      	str	r3, [r0, #100]	; 0x64
 8004e78:	81c2      	strh	r2, [r0, #14]
 8004e7a:	6183      	str	r3, [r0, #24]
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	2208      	movs	r2, #8
 8004e80:	305c      	adds	r0, #92	; 0x5c
 8004e82:	f7ff fdd7 	bl	8004a34 <memset>
 8004e86:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <std+0x38>)
 8004e88:	6263      	str	r3, [r4, #36]	; 0x24
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <std+0x3c>)
 8004e8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e8e:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <std+0x40>)
 8004e90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e92:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <std+0x44>)
 8004e94:	6224      	str	r4, [r4, #32]
 8004e96:	6323      	str	r3, [r4, #48]	; 0x30
 8004e98:	bd10      	pop	{r4, pc}
 8004e9a:	bf00      	nop
 8004e9c:	0800586d 	.word	0x0800586d
 8004ea0:	0800588f 	.word	0x0800588f
 8004ea4:	080058c7 	.word	0x080058c7
 8004ea8:	080058eb 	.word	0x080058eb

08004eac <_cleanup_r>:
 8004eac:	4901      	ldr	r1, [pc, #4]	; (8004eb4 <_cleanup_r+0x8>)
 8004eae:	f000 b8af 	b.w	8005010 <_fwalk_reent>
 8004eb2:	bf00      	nop
 8004eb4:	08004ded 	.word	0x08004ded

08004eb8 <__sfmoreglue>:
 8004eb8:	b570      	push	{r4, r5, r6, lr}
 8004eba:	1e4a      	subs	r2, r1, #1
 8004ebc:	2568      	movs	r5, #104	; 0x68
 8004ebe:	4355      	muls	r5, r2
 8004ec0:	460e      	mov	r6, r1
 8004ec2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ec6:	f000 f979 	bl	80051bc <_malloc_r>
 8004eca:	4604      	mov	r4, r0
 8004ecc:	b140      	cbz	r0, 8004ee0 <__sfmoreglue+0x28>
 8004ece:	2100      	movs	r1, #0
 8004ed0:	e9c0 1600 	strd	r1, r6, [r0]
 8004ed4:	300c      	adds	r0, #12
 8004ed6:	60a0      	str	r0, [r4, #8]
 8004ed8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004edc:	f7ff fdaa 	bl	8004a34 <memset>
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}

08004ee4 <__sfp_lock_acquire>:
 8004ee4:	4801      	ldr	r0, [pc, #4]	; (8004eec <__sfp_lock_acquire+0x8>)
 8004ee6:	f000 b8b3 	b.w	8005050 <__retarget_lock_acquire_recursive>
 8004eea:	bf00      	nop
 8004eec:	20000194 	.word	0x20000194

08004ef0 <__sfp_lock_release>:
 8004ef0:	4801      	ldr	r0, [pc, #4]	; (8004ef8 <__sfp_lock_release+0x8>)
 8004ef2:	f000 b8ae 	b.w	8005052 <__retarget_lock_release_recursive>
 8004ef6:	bf00      	nop
 8004ef8:	20000194 	.word	0x20000194

08004efc <__sinit_lock_acquire>:
 8004efc:	4801      	ldr	r0, [pc, #4]	; (8004f04 <__sinit_lock_acquire+0x8>)
 8004efe:	f000 b8a7 	b.w	8005050 <__retarget_lock_acquire_recursive>
 8004f02:	bf00      	nop
 8004f04:	2000018f 	.word	0x2000018f

08004f08 <__sinit_lock_release>:
 8004f08:	4801      	ldr	r0, [pc, #4]	; (8004f10 <__sinit_lock_release+0x8>)
 8004f0a:	f000 b8a2 	b.w	8005052 <__retarget_lock_release_recursive>
 8004f0e:	bf00      	nop
 8004f10:	2000018f 	.word	0x2000018f

08004f14 <__sinit>:
 8004f14:	b510      	push	{r4, lr}
 8004f16:	4604      	mov	r4, r0
 8004f18:	f7ff fff0 	bl	8004efc <__sinit_lock_acquire>
 8004f1c:	69a3      	ldr	r3, [r4, #24]
 8004f1e:	b11b      	cbz	r3, 8004f28 <__sinit+0x14>
 8004f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f24:	f7ff bff0 	b.w	8004f08 <__sinit_lock_release>
 8004f28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f2c:	6523      	str	r3, [r4, #80]	; 0x50
 8004f2e:	4b13      	ldr	r3, [pc, #76]	; (8004f7c <__sinit+0x68>)
 8004f30:	4a13      	ldr	r2, [pc, #76]	; (8004f80 <__sinit+0x6c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f36:	42a3      	cmp	r3, r4
 8004f38:	bf04      	itt	eq
 8004f3a:	2301      	moveq	r3, #1
 8004f3c:	61a3      	streq	r3, [r4, #24]
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f000 f820 	bl	8004f84 <__sfp>
 8004f44:	6060      	str	r0, [r4, #4]
 8004f46:	4620      	mov	r0, r4
 8004f48:	f000 f81c 	bl	8004f84 <__sfp>
 8004f4c:	60a0      	str	r0, [r4, #8]
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f000 f818 	bl	8004f84 <__sfp>
 8004f54:	2200      	movs	r2, #0
 8004f56:	60e0      	str	r0, [r4, #12]
 8004f58:	2104      	movs	r1, #4
 8004f5a:	6860      	ldr	r0, [r4, #4]
 8004f5c:	f7ff ff82 	bl	8004e64 <std>
 8004f60:	68a0      	ldr	r0, [r4, #8]
 8004f62:	2201      	movs	r2, #1
 8004f64:	2109      	movs	r1, #9
 8004f66:	f7ff ff7d 	bl	8004e64 <std>
 8004f6a:	68e0      	ldr	r0, [r4, #12]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	2112      	movs	r1, #18
 8004f70:	f7ff ff78 	bl	8004e64 <std>
 8004f74:	2301      	movs	r3, #1
 8004f76:	61a3      	str	r3, [r4, #24]
 8004f78:	e7d2      	b.n	8004f20 <__sinit+0xc>
 8004f7a:	bf00      	nop
 8004f7c:	08005b08 	.word	0x08005b08
 8004f80:	08004ead 	.word	0x08004ead

08004f84 <__sfp>:
 8004f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f86:	4607      	mov	r7, r0
 8004f88:	f7ff ffac 	bl	8004ee4 <__sfp_lock_acquire>
 8004f8c:	4b1e      	ldr	r3, [pc, #120]	; (8005008 <__sfp+0x84>)
 8004f8e:	681e      	ldr	r6, [r3, #0]
 8004f90:	69b3      	ldr	r3, [r6, #24]
 8004f92:	b913      	cbnz	r3, 8004f9a <__sfp+0x16>
 8004f94:	4630      	mov	r0, r6
 8004f96:	f7ff ffbd 	bl	8004f14 <__sinit>
 8004f9a:	3648      	adds	r6, #72	; 0x48
 8004f9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	d503      	bpl.n	8004fac <__sfp+0x28>
 8004fa4:	6833      	ldr	r3, [r6, #0]
 8004fa6:	b30b      	cbz	r3, 8004fec <__sfp+0x68>
 8004fa8:	6836      	ldr	r6, [r6, #0]
 8004faa:	e7f7      	b.n	8004f9c <__sfp+0x18>
 8004fac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004fb0:	b9d5      	cbnz	r5, 8004fe8 <__sfp+0x64>
 8004fb2:	4b16      	ldr	r3, [pc, #88]	; (800500c <__sfp+0x88>)
 8004fb4:	60e3      	str	r3, [r4, #12]
 8004fb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004fba:	6665      	str	r5, [r4, #100]	; 0x64
 8004fbc:	f000 f847 	bl	800504e <__retarget_lock_init_recursive>
 8004fc0:	f7ff ff96 	bl	8004ef0 <__sfp_lock_release>
 8004fc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004fc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004fcc:	6025      	str	r5, [r4, #0]
 8004fce:	61a5      	str	r5, [r4, #24]
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fd8:	f7ff fd2c 	bl	8004a34 <memset>
 8004fdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fe0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fe8:	3468      	adds	r4, #104	; 0x68
 8004fea:	e7d9      	b.n	8004fa0 <__sfp+0x1c>
 8004fec:	2104      	movs	r1, #4
 8004fee:	4638      	mov	r0, r7
 8004ff0:	f7ff ff62 	bl	8004eb8 <__sfmoreglue>
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	6030      	str	r0, [r6, #0]
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	d1d5      	bne.n	8004fa8 <__sfp+0x24>
 8004ffc:	f7ff ff78 	bl	8004ef0 <__sfp_lock_release>
 8005000:	230c      	movs	r3, #12
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	e7ee      	b.n	8004fe4 <__sfp+0x60>
 8005006:	bf00      	nop
 8005008:	08005b08 	.word	0x08005b08
 800500c:	ffff0001 	.word	0xffff0001

08005010 <_fwalk_reent>:
 8005010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005014:	4606      	mov	r6, r0
 8005016:	4688      	mov	r8, r1
 8005018:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800501c:	2700      	movs	r7, #0
 800501e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005022:	f1b9 0901 	subs.w	r9, r9, #1
 8005026:	d505      	bpl.n	8005034 <_fwalk_reent+0x24>
 8005028:	6824      	ldr	r4, [r4, #0]
 800502a:	2c00      	cmp	r4, #0
 800502c:	d1f7      	bne.n	800501e <_fwalk_reent+0xe>
 800502e:	4638      	mov	r0, r7
 8005030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005034:	89ab      	ldrh	r3, [r5, #12]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d907      	bls.n	800504a <_fwalk_reent+0x3a>
 800503a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800503e:	3301      	adds	r3, #1
 8005040:	d003      	beq.n	800504a <_fwalk_reent+0x3a>
 8005042:	4629      	mov	r1, r5
 8005044:	4630      	mov	r0, r6
 8005046:	47c0      	blx	r8
 8005048:	4307      	orrs	r7, r0
 800504a:	3568      	adds	r5, #104	; 0x68
 800504c:	e7e9      	b.n	8005022 <_fwalk_reent+0x12>

0800504e <__retarget_lock_init_recursive>:
 800504e:	4770      	bx	lr

08005050 <__retarget_lock_acquire_recursive>:
 8005050:	4770      	bx	lr

08005052 <__retarget_lock_release_recursive>:
 8005052:	4770      	bx	lr

08005054 <__swhatbuf_r>:
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	460e      	mov	r6, r1
 8005058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800505c:	2900      	cmp	r1, #0
 800505e:	b096      	sub	sp, #88	; 0x58
 8005060:	4614      	mov	r4, r2
 8005062:	461d      	mov	r5, r3
 8005064:	da07      	bge.n	8005076 <__swhatbuf_r+0x22>
 8005066:	2300      	movs	r3, #0
 8005068:	602b      	str	r3, [r5, #0]
 800506a:	89b3      	ldrh	r3, [r6, #12]
 800506c:	061a      	lsls	r2, r3, #24
 800506e:	d410      	bmi.n	8005092 <__swhatbuf_r+0x3e>
 8005070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005074:	e00e      	b.n	8005094 <__swhatbuf_r+0x40>
 8005076:	466a      	mov	r2, sp
 8005078:	f000 fc5e 	bl	8005938 <_fstat_r>
 800507c:	2800      	cmp	r0, #0
 800507e:	dbf2      	blt.n	8005066 <__swhatbuf_r+0x12>
 8005080:	9a01      	ldr	r2, [sp, #4]
 8005082:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005086:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800508a:	425a      	negs	r2, r3
 800508c:	415a      	adcs	r2, r3
 800508e:	602a      	str	r2, [r5, #0]
 8005090:	e7ee      	b.n	8005070 <__swhatbuf_r+0x1c>
 8005092:	2340      	movs	r3, #64	; 0x40
 8005094:	2000      	movs	r0, #0
 8005096:	6023      	str	r3, [r4, #0]
 8005098:	b016      	add	sp, #88	; 0x58
 800509a:	bd70      	pop	{r4, r5, r6, pc}

0800509c <__smakebuf_r>:
 800509c:	898b      	ldrh	r3, [r1, #12]
 800509e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050a0:	079d      	lsls	r5, r3, #30
 80050a2:	4606      	mov	r6, r0
 80050a4:	460c      	mov	r4, r1
 80050a6:	d507      	bpl.n	80050b8 <__smakebuf_r+0x1c>
 80050a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	6123      	str	r3, [r4, #16]
 80050b0:	2301      	movs	r3, #1
 80050b2:	6163      	str	r3, [r4, #20]
 80050b4:	b002      	add	sp, #8
 80050b6:	bd70      	pop	{r4, r5, r6, pc}
 80050b8:	ab01      	add	r3, sp, #4
 80050ba:	466a      	mov	r2, sp
 80050bc:	f7ff ffca 	bl	8005054 <__swhatbuf_r>
 80050c0:	9900      	ldr	r1, [sp, #0]
 80050c2:	4605      	mov	r5, r0
 80050c4:	4630      	mov	r0, r6
 80050c6:	f000 f879 	bl	80051bc <_malloc_r>
 80050ca:	b948      	cbnz	r0, 80050e0 <__smakebuf_r+0x44>
 80050cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050d0:	059a      	lsls	r2, r3, #22
 80050d2:	d4ef      	bmi.n	80050b4 <__smakebuf_r+0x18>
 80050d4:	f023 0303 	bic.w	r3, r3, #3
 80050d8:	f043 0302 	orr.w	r3, r3, #2
 80050dc:	81a3      	strh	r3, [r4, #12]
 80050de:	e7e3      	b.n	80050a8 <__smakebuf_r+0xc>
 80050e0:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <__smakebuf_r+0x7c>)
 80050e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	6020      	str	r0, [r4, #0]
 80050e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ec:	81a3      	strh	r3, [r4, #12]
 80050ee:	9b00      	ldr	r3, [sp, #0]
 80050f0:	6163      	str	r3, [r4, #20]
 80050f2:	9b01      	ldr	r3, [sp, #4]
 80050f4:	6120      	str	r0, [r4, #16]
 80050f6:	b15b      	cbz	r3, 8005110 <__smakebuf_r+0x74>
 80050f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050fc:	4630      	mov	r0, r6
 80050fe:	f000 fc2d 	bl	800595c <_isatty_r>
 8005102:	b128      	cbz	r0, 8005110 <__smakebuf_r+0x74>
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	f023 0303 	bic.w	r3, r3, #3
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	81a3      	strh	r3, [r4, #12]
 8005110:	89a0      	ldrh	r0, [r4, #12]
 8005112:	4305      	orrs	r5, r0
 8005114:	81a5      	strh	r5, [r4, #12]
 8005116:	e7cd      	b.n	80050b4 <__smakebuf_r+0x18>
 8005118:	08004ead 	.word	0x08004ead

0800511c <_free_r>:
 800511c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800511e:	2900      	cmp	r1, #0
 8005120:	d048      	beq.n	80051b4 <_free_r+0x98>
 8005122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005126:	9001      	str	r0, [sp, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	f1a1 0404 	sub.w	r4, r1, #4
 800512e:	bfb8      	it	lt
 8005130:	18e4      	addlt	r4, r4, r3
 8005132:	f000 fc35 	bl	80059a0 <__malloc_lock>
 8005136:	4a20      	ldr	r2, [pc, #128]	; (80051b8 <_free_r+0x9c>)
 8005138:	9801      	ldr	r0, [sp, #4]
 800513a:	6813      	ldr	r3, [r2, #0]
 800513c:	4615      	mov	r5, r2
 800513e:	b933      	cbnz	r3, 800514e <_free_r+0x32>
 8005140:	6063      	str	r3, [r4, #4]
 8005142:	6014      	str	r4, [r2, #0]
 8005144:	b003      	add	sp, #12
 8005146:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800514a:	f000 bc2f 	b.w	80059ac <__malloc_unlock>
 800514e:	42a3      	cmp	r3, r4
 8005150:	d90b      	bls.n	800516a <_free_r+0x4e>
 8005152:	6821      	ldr	r1, [r4, #0]
 8005154:	1862      	adds	r2, r4, r1
 8005156:	4293      	cmp	r3, r2
 8005158:	bf04      	itt	eq
 800515a:	681a      	ldreq	r2, [r3, #0]
 800515c:	685b      	ldreq	r3, [r3, #4]
 800515e:	6063      	str	r3, [r4, #4]
 8005160:	bf04      	itt	eq
 8005162:	1852      	addeq	r2, r2, r1
 8005164:	6022      	streq	r2, [r4, #0]
 8005166:	602c      	str	r4, [r5, #0]
 8005168:	e7ec      	b.n	8005144 <_free_r+0x28>
 800516a:	461a      	mov	r2, r3
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	b10b      	cbz	r3, 8005174 <_free_r+0x58>
 8005170:	42a3      	cmp	r3, r4
 8005172:	d9fa      	bls.n	800516a <_free_r+0x4e>
 8005174:	6811      	ldr	r1, [r2, #0]
 8005176:	1855      	adds	r5, r2, r1
 8005178:	42a5      	cmp	r5, r4
 800517a:	d10b      	bne.n	8005194 <_free_r+0x78>
 800517c:	6824      	ldr	r4, [r4, #0]
 800517e:	4421      	add	r1, r4
 8005180:	1854      	adds	r4, r2, r1
 8005182:	42a3      	cmp	r3, r4
 8005184:	6011      	str	r1, [r2, #0]
 8005186:	d1dd      	bne.n	8005144 <_free_r+0x28>
 8005188:	681c      	ldr	r4, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	6053      	str	r3, [r2, #4]
 800518e:	4421      	add	r1, r4
 8005190:	6011      	str	r1, [r2, #0]
 8005192:	e7d7      	b.n	8005144 <_free_r+0x28>
 8005194:	d902      	bls.n	800519c <_free_r+0x80>
 8005196:	230c      	movs	r3, #12
 8005198:	6003      	str	r3, [r0, #0]
 800519a:	e7d3      	b.n	8005144 <_free_r+0x28>
 800519c:	6825      	ldr	r5, [r4, #0]
 800519e:	1961      	adds	r1, r4, r5
 80051a0:	428b      	cmp	r3, r1
 80051a2:	bf04      	itt	eq
 80051a4:	6819      	ldreq	r1, [r3, #0]
 80051a6:	685b      	ldreq	r3, [r3, #4]
 80051a8:	6063      	str	r3, [r4, #4]
 80051aa:	bf04      	itt	eq
 80051ac:	1949      	addeq	r1, r1, r5
 80051ae:	6021      	streq	r1, [r4, #0]
 80051b0:	6054      	str	r4, [r2, #4]
 80051b2:	e7c7      	b.n	8005144 <_free_r+0x28>
 80051b4:	b003      	add	sp, #12
 80051b6:	bd30      	pop	{r4, r5, pc}
 80051b8:	200000a0 	.word	0x200000a0

080051bc <_malloc_r>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	1ccd      	adds	r5, r1, #3
 80051c0:	f025 0503 	bic.w	r5, r5, #3
 80051c4:	3508      	adds	r5, #8
 80051c6:	2d0c      	cmp	r5, #12
 80051c8:	bf38      	it	cc
 80051ca:	250c      	movcc	r5, #12
 80051cc:	2d00      	cmp	r5, #0
 80051ce:	4606      	mov	r6, r0
 80051d0:	db01      	blt.n	80051d6 <_malloc_r+0x1a>
 80051d2:	42a9      	cmp	r1, r5
 80051d4:	d903      	bls.n	80051de <_malloc_r+0x22>
 80051d6:	230c      	movs	r3, #12
 80051d8:	6033      	str	r3, [r6, #0]
 80051da:	2000      	movs	r0, #0
 80051dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051de:	f000 fbdf 	bl	80059a0 <__malloc_lock>
 80051e2:	4921      	ldr	r1, [pc, #132]	; (8005268 <_malloc_r+0xac>)
 80051e4:	680a      	ldr	r2, [r1, #0]
 80051e6:	4614      	mov	r4, r2
 80051e8:	b99c      	cbnz	r4, 8005212 <_malloc_r+0x56>
 80051ea:	4f20      	ldr	r7, [pc, #128]	; (800526c <_malloc_r+0xb0>)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	b923      	cbnz	r3, 80051fa <_malloc_r+0x3e>
 80051f0:	4621      	mov	r1, r4
 80051f2:	4630      	mov	r0, r6
 80051f4:	f000 fb2a 	bl	800584c <_sbrk_r>
 80051f8:	6038      	str	r0, [r7, #0]
 80051fa:	4629      	mov	r1, r5
 80051fc:	4630      	mov	r0, r6
 80051fe:	f000 fb25 	bl	800584c <_sbrk_r>
 8005202:	1c43      	adds	r3, r0, #1
 8005204:	d123      	bne.n	800524e <_malloc_r+0x92>
 8005206:	230c      	movs	r3, #12
 8005208:	6033      	str	r3, [r6, #0]
 800520a:	4630      	mov	r0, r6
 800520c:	f000 fbce 	bl	80059ac <__malloc_unlock>
 8005210:	e7e3      	b.n	80051da <_malloc_r+0x1e>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	1b5b      	subs	r3, r3, r5
 8005216:	d417      	bmi.n	8005248 <_malloc_r+0x8c>
 8005218:	2b0b      	cmp	r3, #11
 800521a:	d903      	bls.n	8005224 <_malloc_r+0x68>
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	441c      	add	r4, r3
 8005220:	6025      	str	r5, [r4, #0]
 8005222:	e004      	b.n	800522e <_malloc_r+0x72>
 8005224:	6863      	ldr	r3, [r4, #4]
 8005226:	42a2      	cmp	r2, r4
 8005228:	bf0c      	ite	eq
 800522a:	600b      	streq	r3, [r1, #0]
 800522c:	6053      	strne	r3, [r2, #4]
 800522e:	4630      	mov	r0, r6
 8005230:	f000 fbbc 	bl	80059ac <__malloc_unlock>
 8005234:	f104 000b 	add.w	r0, r4, #11
 8005238:	1d23      	adds	r3, r4, #4
 800523a:	f020 0007 	bic.w	r0, r0, #7
 800523e:	1ac2      	subs	r2, r0, r3
 8005240:	d0cc      	beq.n	80051dc <_malloc_r+0x20>
 8005242:	1a1b      	subs	r3, r3, r0
 8005244:	50a3      	str	r3, [r4, r2]
 8005246:	e7c9      	b.n	80051dc <_malloc_r+0x20>
 8005248:	4622      	mov	r2, r4
 800524a:	6864      	ldr	r4, [r4, #4]
 800524c:	e7cc      	b.n	80051e8 <_malloc_r+0x2c>
 800524e:	1cc4      	adds	r4, r0, #3
 8005250:	f024 0403 	bic.w	r4, r4, #3
 8005254:	42a0      	cmp	r0, r4
 8005256:	d0e3      	beq.n	8005220 <_malloc_r+0x64>
 8005258:	1a21      	subs	r1, r4, r0
 800525a:	4630      	mov	r0, r6
 800525c:	f000 faf6 	bl	800584c <_sbrk_r>
 8005260:	3001      	adds	r0, #1
 8005262:	d1dd      	bne.n	8005220 <_malloc_r+0x64>
 8005264:	e7cf      	b.n	8005206 <_malloc_r+0x4a>
 8005266:	bf00      	nop
 8005268:	200000a0 	.word	0x200000a0
 800526c:	200000a4 	.word	0x200000a4

08005270 <__sfputc_r>:
 8005270:	6893      	ldr	r3, [r2, #8]
 8005272:	3b01      	subs	r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	b410      	push	{r4}
 8005278:	6093      	str	r3, [r2, #8]
 800527a:	da08      	bge.n	800528e <__sfputc_r+0x1e>
 800527c:	6994      	ldr	r4, [r2, #24]
 800527e:	42a3      	cmp	r3, r4
 8005280:	db01      	blt.n	8005286 <__sfputc_r+0x16>
 8005282:	290a      	cmp	r1, #10
 8005284:	d103      	bne.n	800528e <__sfputc_r+0x1e>
 8005286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800528a:	f7ff bc69 	b.w	8004b60 <__swbuf_r>
 800528e:	6813      	ldr	r3, [r2, #0]
 8005290:	1c58      	adds	r0, r3, #1
 8005292:	6010      	str	r0, [r2, #0]
 8005294:	7019      	strb	r1, [r3, #0]
 8005296:	4608      	mov	r0, r1
 8005298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800529c:	4770      	bx	lr

0800529e <__sfputs_r>:
 800529e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a0:	4606      	mov	r6, r0
 80052a2:	460f      	mov	r7, r1
 80052a4:	4614      	mov	r4, r2
 80052a6:	18d5      	adds	r5, r2, r3
 80052a8:	42ac      	cmp	r4, r5
 80052aa:	d101      	bne.n	80052b0 <__sfputs_r+0x12>
 80052ac:	2000      	movs	r0, #0
 80052ae:	e007      	b.n	80052c0 <__sfputs_r+0x22>
 80052b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052b4:	463a      	mov	r2, r7
 80052b6:	4630      	mov	r0, r6
 80052b8:	f7ff ffda 	bl	8005270 <__sfputc_r>
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	d1f3      	bne.n	80052a8 <__sfputs_r+0xa>
 80052c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052c4 <_vfiprintf_r>:
 80052c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c8:	460d      	mov	r5, r1
 80052ca:	b09d      	sub	sp, #116	; 0x74
 80052cc:	4614      	mov	r4, r2
 80052ce:	4698      	mov	r8, r3
 80052d0:	4606      	mov	r6, r0
 80052d2:	b118      	cbz	r0, 80052dc <_vfiprintf_r+0x18>
 80052d4:	6983      	ldr	r3, [r0, #24]
 80052d6:	b90b      	cbnz	r3, 80052dc <_vfiprintf_r+0x18>
 80052d8:	f7ff fe1c 	bl	8004f14 <__sinit>
 80052dc:	4b89      	ldr	r3, [pc, #548]	; (8005504 <_vfiprintf_r+0x240>)
 80052de:	429d      	cmp	r5, r3
 80052e0:	d11b      	bne.n	800531a <_vfiprintf_r+0x56>
 80052e2:	6875      	ldr	r5, [r6, #4]
 80052e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052e6:	07d9      	lsls	r1, r3, #31
 80052e8:	d405      	bmi.n	80052f6 <_vfiprintf_r+0x32>
 80052ea:	89ab      	ldrh	r3, [r5, #12]
 80052ec:	059a      	lsls	r2, r3, #22
 80052ee:	d402      	bmi.n	80052f6 <_vfiprintf_r+0x32>
 80052f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052f2:	f7ff fead 	bl	8005050 <__retarget_lock_acquire_recursive>
 80052f6:	89ab      	ldrh	r3, [r5, #12]
 80052f8:	071b      	lsls	r3, r3, #28
 80052fa:	d501      	bpl.n	8005300 <_vfiprintf_r+0x3c>
 80052fc:	692b      	ldr	r3, [r5, #16]
 80052fe:	b9eb      	cbnz	r3, 800533c <_vfiprintf_r+0x78>
 8005300:	4629      	mov	r1, r5
 8005302:	4630      	mov	r0, r6
 8005304:	f7ff fc7e 	bl	8004c04 <__swsetup_r>
 8005308:	b1c0      	cbz	r0, 800533c <_vfiprintf_r+0x78>
 800530a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800530c:	07dc      	lsls	r4, r3, #31
 800530e:	d50e      	bpl.n	800532e <_vfiprintf_r+0x6a>
 8005310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005314:	b01d      	add	sp, #116	; 0x74
 8005316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800531a:	4b7b      	ldr	r3, [pc, #492]	; (8005508 <_vfiprintf_r+0x244>)
 800531c:	429d      	cmp	r5, r3
 800531e:	d101      	bne.n	8005324 <_vfiprintf_r+0x60>
 8005320:	68b5      	ldr	r5, [r6, #8]
 8005322:	e7df      	b.n	80052e4 <_vfiprintf_r+0x20>
 8005324:	4b79      	ldr	r3, [pc, #484]	; (800550c <_vfiprintf_r+0x248>)
 8005326:	429d      	cmp	r5, r3
 8005328:	bf08      	it	eq
 800532a:	68f5      	ldreq	r5, [r6, #12]
 800532c:	e7da      	b.n	80052e4 <_vfiprintf_r+0x20>
 800532e:	89ab      	ldrh	r3, [r5, #12]
 8005330:	0598      	lsls	r0, r3, #22
 8005332:	d4ed      	bmi.n	8005310 <_vfiprintf_r+0x4c>
 8005334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005336:	f7ff fe8c 	bl	8005052 <__retarget_lock_release_recursive>
 800533a:	e7e9      	b.n	8005310 <_vfiprintf_r+0x4c>
 800533c:	2300      	movs	r3, #0
 800533e:	9309      	str	r3, [sp, #36]	; 0x24
 8005340:	2320      	movs	r3, #32
 8005342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005346:	f8cd 800c 	str.w	r8, [sp, #12]
 800534a:	2330      	movs	r3, #48	; 0x30
 800534c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005510 <_vfiprintf_r+0x24c>
 8005350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005354:	f04f 0901 	mov.w	r9, #1
 8005358:	4623      	mov	r3, r4
 800535a:	469a      	mov	sl, r3
 800535c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005360:	b10a      	cbz	r2, 8005366 <_vfiprintf_r+0xa2>
 8005362:	2a25      	cmp	r2, #37	; 0x25
 8005364:	d1f9      	bne.n	800535a <_vfiprintf_r+0x96>
 8005366:	ebba 0b04 	subs.w	fp, sl, r4
 800536a:	d00b      	beq.n	8005384 <_vfiprintf_r+0xc0>
 800536c:	465b      	mov	r3, fp
 800536e:	4622      	mov	r2, r4
 8005370:	4629      	mov	r1, r5
 8005372:	4630      	mov	r0, r6
 8005374:	f7ff ff93 	bl	800529e <__sfputs_r>
 8005378:	3001      	adds	r0, #1
 800537a:	f000 80aa 	beq.w	80054d2 <_vfiprintf_r+0x20e>
 800537e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005380:	445a      	add	r2, fp
 8005382:	9209      	str	r2, [sp, #36]	; 0x24
 8005384:	f89a 3000 	ldrb.w	r3, [sl]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 80a2 	beq.w	80054d2 <_vfiprintf_r+0x20e>
 800538e:	2300      	movs	r3, #0
 8005390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005398:	f10a 0a01 	add.w	sl, sl, #1
 800539c:	9304      	str	r3, [sp, #16]
 800539e:	9307      	str	r3, [sp, #28]
 80053a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053a4:	931a      	str	r3, [sp, #104]	; 0x68
 80053a6:	4654      	mov	r4, sl
 80053a8:	2205      	movs	r2, #5
 80053aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ae:	4858      	ldr	r0, [pc, #352]	; (8005510 <_vfiprintf_r+0x24c>)
 80053b0:	f7fa ff0e 	bl	80001d0 <memchr>
 80053b4:	9a04      	ldr	r2, [sp, #16]
 80053b6:	b9d8      	cbnz	r0, 80053f0 <_vfiprintf_r+0x12c>
 80053b8:	06d1      	lsls	r1, r2, #27
 80053ba:	bf44      	itt	mi
 80053bc:	2320      	movmi	r3, #32
 80053be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053c2:	0713      	lsls	r3, r2, #28
 80053c4:	bf44      	itt	mi
 80053c6:	232b      	movmi	r3, #43	; 0x2b
 80053c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053cc:	f89a 3000 	ldrb.w	r3, [sl]
 80053d0:	2b2a      	cmp	r3, #42	; 0x2a
 80053d2:	d015      	beq.n	8005400 <_vfiprintf_r+0x13c>
 80053d4:	9a07      	ldr	r2, [sp, #28]
 80053d6:	4654      	mov	r4, sl
 80053d8:	2000      	movs	r0, #0
 80053da:	f04f 0c0a 	mov.w	ip, #10
 80053de:	4621      	mov	r1, r4
 80053e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053e4:	3b30      	subs	r3, #48	; 0x30
 80053e6:	2b09      	cmp	r3, #9
 80053e8:	d94e      	bls.n	8005488 <_vfiprintf_r+0x1c4>
 80053ea:	b1b0      	cbz	r0, 800541a <_vfiprintf_r+0x156>
 80053ec:	9207      	str	r2, [sp, #28]
 80053ee:	e014      	b.n	800541a <_vfiprintf_r+0x156>
 80053f0:	eba0 0308 	sub.w	r3, r0, r8
 80053f4:	fa09 f303 	lsl.w	r3, r9, r3
 80053f8:	4313      	orrs	r3, r2
 80053fa:	9304      	str	r3, [sp, #16]
 80053fc:	46a2      	mov	sl, r4
 80053fe:	e7d2      	b.n	80053a6 <_vfiprintf_r+0xe2>
 8005400:	9b03      	ldr	r3, [sp, #12]
 8005402:	1d19      	adds	r1, r3, #4
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	9103      	str	r1, [sp, #12]
 8005408:	2b00      	cmp	r3, #0
 800540a:	bfbb      	ittet	lt
 800540c:	425b      	neglt	r3, r3
 800540e:	f042 0202 	orrlt.w	r2, r2, #2
 8005412:	9307      	strge	r3, [sp, #28]
 8005414:	9307      	strlt	r3, [sp, #28]
 8005416:	bfb8      	it	lt
 8005418:	9204      	strlt	r2, [sp, #16]
 800541a:	7823      	ldrb	r3, [r4, #0]
 800541c:	2b2e      	cmp	r3, #46	; 0x2e
 800541e:	d10c      	bne.n	800543a <_vfiprintf_r+0x176>
 8005420:	7863      	ldrb	r3, [r4, #1]
 8005422:	2b2a      	cmp	r3, #42	; 0x2a
 8005424:	d135      	bne.n	8005492 <_vfiprintf_r+0x1ce>
 8005426:	9b03      	ldr	r3, [sp, #12]
 8005428:	1d1a      	adds	r2, r3, #4
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	9203      	str	r2, [sp, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	bfb8      	it	lt
 8005432:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005436:	3402      	adds	r4, #2
 8005438:	9305      	str	r3, [sp, #20]
 800543a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005520 <_vfiprintf_r+0x25c>
 800543e:	7821      	ldrb	r1, [r4, #0]
 8005440:	2203      	movs	r2, #3
 8005442:	4650      	mov	r0, sl
 8005444:	f7fa fec4 	bl	80001d0 <memchr>
 8005448:	b140      	cbz	r0, 800545c <_vfiprintf_r+0x198>
 800544a:	2340      	movs	r3, #64	; 0x40
 800544c:	eba0 000a 	sub.w	r0, r0, sl
 8005450:	fa03 f000 	lsl.w	r0, r3, r0
 8005454:	9b04      	ldr	r3, [sp, #16]
 8005456:	4303      	orrs	r3, r0
 8005458:	3401      	adds	r4, #1
 800545a:	9304      	str	r3, [sp, #16]
 800545c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005460:	482c      	ldr	r0, [pc, #176]	; (8005514 <_vfiprintf_r+0x250>)
 8005462:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005466:	2206      	movs	r2, #6
 8005468:	f7fa feb2 	bl	80001d0 <memchr>
 800546c:	2800      	cmp	r0, #0
 800546e:	d03f      	beq.n	80054f0 <_vfiprintf_r+0x22c>
 8005470:	4b29      	ldr	r3, [pc, #164]	; (8005518 <_vfiprintf_r+0x254>)
 8005472:	bb1b      	cbnz	r3, 80054bc <_vfiprintf_r+0x1f8>
 8005474:	9b03      	ldr	r3, [sp, #12]
 8005476:	3307      	adds	r3, #7
 8005478:	f023 0307 	bic.w	r3, r3, #7
 800547c:	3308      	adds	r3, #8
 800547e:	9303      	str	r3, [sp, #12]
 8005480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005482:	443b      	add	r3, r7
 8005484:	9309      	str	r3, [sp, #36]	; 0x24
 8005486:	e767      	b.n	8005358 <_vfiprintf_r+0x94>
 8005488:	fb0c 3202 	mla	r2, ip, r2, r3
 800548c:	460c      	mov	r4, r1
 800548e:	2001      	movs	r0, #1
 8005490:	e7a5      	b.n	80053de <_vfiprintf_r+0x11a>
 8005492:	2300      	movs	r3, #0
 8005494:	3401      	adds	r4, #1
 8005496:	9305      	str	r3, [sp, #20]
 8005498:	4619      	mov	r1, r3
 800549a:	f04f 0c0a 	mov.w	ip, #10
 800549e:	4620      	mov	r0, r4
 80054a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054a4:	3a30      	subs	r2, #48	; 0x30
 80054a6:	2a09      	cmp	r2, #9
 80054a8:	d903      	bls.n	80054b2 <_vfiprintf_r+0x1ee>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0c5      	beq.n	800543a <_vfiprintf_r+0x176>
 80054ae:	9105      	str	r1, [sp, #20]
 80054b0:	e7c3      	b.n	800543a <_vfiprintf_r+0x176>
 80054b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80054b6:	4604      	mov	r4, r0
 80054b8:	2301      	movs	r3, #1
 80054ba:	e7f0      	b.n	800549e <_vfiprintf_r+0x1da>
 80054bc:	ab03      	add	r3, sp, #12
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	462a      	mov	r2, r5
 80054c2:	4b16      	ldr	r3, [pc, #88]	; (800551c <_vfiprintf_r+0x258>)
 80054c4:	a904      	add	r1, sp, #16
 80054c6:	4630      	mov	r0, r6
 80054c8:	f3af 8000 	nop.w
 80054cc:	4607      	mov	r7, r0
 80054ce:	1c78      	adds	r0, r7, #1
 80054d0:	d1d6      	bne.n	8005480 <_vfiprintf_r+0x1bc>
 80054d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054d4:	07d9      	lsls	r1, r3, #31
 80054d6:	d405      	bmi.n	80054e4 <_vfiprintf_r+0x220>
 80054d8:	89ab      	ldrh	r3, [r5, #12]
 80054da:	059a      	lsls	r2, r3, #22
 80054dc:	d402      	bmi.n	80054e4 <_vfiprintf_r+0x220>
 80054de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054e0:	f7ff fdb7 	bl	8005052 <__retarget_lock_release_recursive>
 80054e4:	89ab      	ldrh	r3, [r5, #12]
 80054e6:	065b      	lsls	r3, r3, #25
 80054e8:	f53f af12 	bmi.w	8005310 <_vfiprintf_r+0x4c>
 80054ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054ee:	e711      	b.n	8005314 <_vfiprintf_r+0x50>
 80054f0:	ab03      	add	r3, sp, #12
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	462a      	mov	r2, r5
 80054f6:	4b09      	ldr	r3, [pc, #36]	; (800551c <_vfiprintf_r+0x258>)
 80054f8:	a904      	add	r1, sp, #16
 80054fa:	4630      	mov	r0, r6
 80054fc:	f000 f880 	bl	8005600 <_printf_i>
 8005500:	e7e4      	b.n	80054cc <_vfiprintf_r+0x208>
 8005502:	bf00      	nop
 8005504:	08005b2c 	.word	0x08005b2c
 8005508:	08005b4c 	.word	0x08005b4c
 800550c:	08005b0c 	.word	0x08005b0c
 8005510:	08005b6c 	.word	0x08005b6c
 8005514:	08005b76 	.word	0x08005b76
 8005518:	00000000 	.word	0x00000000
 800551c:	0800529f 	.word	0x0800529f
 8005520:	08005b72 	.word	0x08005b72

08005524 <_printf_common>:
 8005524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005528:	4616      	mov	r6, r2
 800552a:	4699      	mov	r9, r3
 800552c:	688a      	ldr	r2, [r1, #8]
 800552e:	690b      	ldr	r3, [r1, #16]
 8005530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005534:	4293      	cmp	r3, r2
 8005536:	bfb8      	it	lt
 8005538:	4613      	movlt	r3, r2
 800553a:	6033      	str	r3, [r6, #0]
 800553c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005540:	4607      	mov	r7, r0
 8005542:	460c      	mov	r4, r1
 8005544:	b10a      	cbz	r2, 800554a <_printf_common+0x26>
 8005546:	3301      	adds	r3, #1
 8005548:	6033      	str	r3, [r6, #0]
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	0699      	lsls	r1, r3, #26
 800554e:	bf42      	ittt	mi
 8005550:	6833      	ldrmi	r3, [r6, #0]
 8005552:	3302      	addmi	r3, #2
 8005554:	6033      	strmi	r3, [r6, #0]
 8005556:	6825      	ldr	r5, [r4, #0]
 8005558:	f015 0506 	ands.w	r5, r5, #6
 800555c:	d106      	bne.n	800556c <_printf_common+0x48>
 800555e:	f104 0a19 	add.w	sl, r4, #25
 8005562:	68e3      	ldr	r3, [r4, #12]
 8005564:	6832      	ldr	r2, [r6, #0]
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	42ab      	cmp	r3, r5
 800556a:	dc26      	bgt.n	80055ba <_printf_common+0x96>
 800556c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005570:	1e13      	subs	r3, r2, #0
 8005572:	6822      	ldr	r2, [r4, #0]
 8005574:	bf18      	it	ne
 8005576:	2301      	movne	r3, #1
 8005578:	0692      	lsls	r2, r2, #26
 800557a:	d42b      	bmi.n	80055d4 <_printf_common+0xb0>
 800557c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005580:	4649      	mov	r1, r9
 8005582:	4638      	mov	r0, r7
 8005584:	47c0      	blx	r8
 8005586:	3001      	adds	r0, #1
 8005588:	d01e      	beq.n	80055c8 <_printf_common+0xa4>
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	68e5      	ldr	r5, [r4, #12]
 800558e:	6832      	ldr	r2, [r6, #0]
 8005590:	f003 0306 	and.w	r3, r3, #6
 8005594:	2b04      	cmp	r3, #4
 8005596:	bf08      	it	eq
 8005598:	1aad      	subeq	r5, r5, r2
 800559a:	68a3      	ldr	r3, [r4, #8]
 800559c:	6922      	ldr	r2, [r4, #16]
 800559e:	bf0c      	ite	eq
 80055a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055a4:	2500      	movne	r5, #0
 80055a6:	4293      	cmp	r3, r2
 80055a8:	bfc4      	itt	gt
 80055aa:	1a9b      	subgt	r3, r3, r2
 80055ac:	18ed      	addgt	r5, r5, r3
 80055ae:	2600      	movs	r6, #0
 80055b0:	341a      	adds	r4, #26
 80055b2:	42b5      	cmp	r5, r6
 80055b4:	d11a      	bne.n	80055ec <_printf_common+0xc8>
 80055b6:	2000      	movs	r0, #0
 80055b8:	e008      	b.n	80055cc <_printf_common+0xa8>
 80055ba:	2301      	movs	r3, #1
 80055bc:	4652      	mov	r2, sl
 80055be:	4649      	mov	r1, r9
 80055c0:	4638      	mov	r0, r7
 80055c2:	47c0      	blx	r8
 80055c4:	3001      	adds	r0, #1
 80055c6:	d103      	bne.n	80055d0 <_printf_common+0xac>
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d0:	3501      	adds	r5, #1
 80055d2:	e7c6      	b.n	8005562 <_printf_common+0x3e>
 80055d4:	18e1      	adds	r1, r4, r3
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	2030      	movs	r0, #48	; 0x30
 80055da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055de:	4422      	add	r2, r4
 80055e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055e8:	3302      	adds	r3, #2
 80055ea:	e7c7      	b.n	800557c <_printf_common+0x58>
 80055ec:	2301      	movs	r3, #1
 80055ee:	4622      	mov	r2, r4
 80055f0:	4649      	mov	r1, r9
 80055f2:	4638      	mov	r0, r7
 80055f4:	47c0      	blx	r8
 80055f6:	3001      	adds	r0, #1
 80055f8:	d0e6      	beq.n	80055c8 <_printf_common+0xa4>
 80055fa:	3601      	adds	r6, #1
 80055fc:	e7d9      	b.n	80055b2 <_printf_common+0x8e>
	...

08005600 <_printf_i>:
 8005600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005604:	460c      	mov	r4, r1
 8005606:	4691      	mov	r9, r2
 8005608:	7e27      	ldrb	r7, [r4, #24]
 800560a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800560c:	2f78      	cmp	r7, #120	; 0x78
 800560e:	4680      	mov	r8, r0
 8005610:	469a      	mov	sl, r3
 8005612:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005616:	d807      	bhi.n	8005628 <_printf_i+0x28>
 8005618:	2f62      	cmp	r7, #98	; 0x62
 800561a:	d80a      	bhi.n	8005632 <_printf_i+0x32>
 800561c:	2f00      	cmp	r7, #0
 800561e:	f000 80d8 	beq.w	80057d2 <_printf_i+0x1d2>
 8005622:	2f58      	cmp	r7, #88	; 0x58
 8005624:	f000 80a3 	beq.w	800576e <_printf_i+0x16e>
 8005628:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800562c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005630:	e03a      	b.n	80056a8 <_printf_i+0xa8>
 8005632:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005636:	2b15      	cmp	r3, #21
 8005638:	d8f6      	bhi.n	8005628 <_printf_i+0x28>
 800563a:	a001      	add	r0, pc, #4	; (adr r0, 8005640 <_printf_i+0x40>)
 800563c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005640:	08005699 	.word	0x08005699
 8005644:	080056ad 	.word	0x080056ad
 8005648:	08005629 	.word	0x08005629
 800564c:	08005629 	.word	0x08005629
 8005650:	08005629 	.word	0x08005629
 8005654:	08005629 	.word	0x08005629
 8005658:	080056ad 	.word	0x080056ad
 800565c:	08005629 	.word	0x08005629
 8005660:	08005629 	.word	0x08005629
 8005664:	08005629 	.word	0x08005629
 8005668:	08005629 	.word	0x08005629
 800566c:	080057b9 	.word	0x080057b9
 8005670:	080056dd 	.word	0x080056dd
 8005674:	0800579b 	.word	0x0800579b
 8005678:	08005629 	.word	0x08005629
 800567c:	08005629 	.word	0x08005629
 8005680:	080057db 	.word	0x080057db
 8005684:	08005629 	.word	0x08005629
 8005688:	080056dd 	.word	0x080056dd
 800568c:	08005629 	.word	0x08005629
 8005690:	08005629 	.word	0x08005629
 8005694:	080057a3 	.word	0x080057a3
 8005698:	680b      	ldr	r3, [r1, #0]
 800569a:	1d1a      	adds	r2, r3, #4
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	600a      	str	r2, [r1, #0]
 80056a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0a3      	b.n	80057f4 <_printf_i+0x1f4>
 80056ac:	6825      	ldr	r5, [r4, #0]
 80056ae:	6808      	ldr	r0, [r1, #0]
 80056b0:	062e      	lsls	r6, r5, #24
 80056b2:	f100 0304 	add.w	r3, r0, #4
 80056b6:	d50a      	bpl.n	80056ce <_printf_i+0xce>
 80056b8:	6805      	ldr	r5, [r0, #0]
 80056ba:	600b      	str	r3, [r1, #0]
 80056bc:	2d00      	cmp	r5, #0
 80056be:	da03      	bge.n	80056c8 <_printf_i+0xc8>
 80056c0:	232d      	movs	r3, #45	; 0x2d
 80056c2:	426d      	negs	r5, r5
 80056c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056c8:	485e      	ldr	r0, [pc, #376]	; (8005844 <_printf_i+0x244>)
 80056ca:	230a      	movs	r3, #10
 80056cc:	e019      	b.n	8005702 <_printf_i+0x102>
 80056ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80056d2:	6805      	ldr	r5, [r0, #0]
 80056d4:	600b      	str	r3, [r1, #0]
 80056d6:	bf18      	it	ne
 80056d8:	b22d      	sxthne	r5, r5
 80056da:	e7ef      	b.n	80056bc <_printf_i+0xbc>
 80056dc:	680b      	ldr	r3, [r1, #0]
 80056de:	6825      	ldr	r5, [r4, #0]
 80056e0:	1d18      	adds	r0, r3, #4
 80056e2:	6008      	str	r0, [r1, #0]
 80056e4:	0628      	lsls	r0, r5, #24
 80056e6:	d501      	bpl.n	80056ec <_printf_i+0xec>
 80056e8:	681d      	ldr	r5, [r3, #0]
 80056ea:	e002      	b.n	80056f2 <_printf_i+0xf2>
 80056ec:	0669      	lsls	r1, r5, #25
 80056ee:	d5fb      	bpl.n	80056e8 <_printf_i+0xe8>
 80056f0:	881d      	ldrh	r5, [r3, #0]
 80056f2:	4854      	ldr	r0, [pc, #336]	; (8005844 <_printf_i+0x244>)
 80056f4:	2f6f      	cmp	r7, #111	; 0x6f
 80056f6:	bf0c      	ite	eq
 80056f8:	2308      	moveq	r3, #8
 80056fa:	230a      	movne	r3, #10
 80056fc:	2100      	movs	r1, #0
 80056fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005702:	6866      	ldr	r6, [r4, #4]
 8005704:	60a6      	str	r6, [r4, #8]
 8005706:	2e00      	cmp	r6, #0
 8005708:	bfa2      	ittt	ge
 800570a:	6821      	ldrge	r1, [r4, #0]
 800570c:	f021 0104 	bicge.w	r1, r1, #4
 8005710:	6021      	strge	r1, [r4, #0]
 8005712:	b90d      	cbnz	r5, 8005718 <_printf_i+0x118>
 8005714:	2e00      	cmp	r6, #0
 8005716:	d04d      	beq.n	80057b4 <_printf_i+0x1b4>
 8005718:	4616      	mov	r6, r2
 800571a:	fbb5 f1f3 	udiv	r1, r5, r3
 800571e:	fb03 5711 	mls	r7, r3, r1, r5
 8005722:	5dc7      	ldrb	r7, [r0, r7]
 8005724:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005728:	462f      	mov	r7, r5
 800572a:	42bb      	cmp	r3, r7
 800572c:	460d      	mov	r5, r1
 800572e:	d9f4      	bls.n	800571a <_printf_i+0x11a>
 8005730:	2b08      	cmp	r3, #8
 8005732:	d10b      	bne.n	800574c <_printf_i+0x14c>
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	07df      	lsls	r7, r3, #31
 8005738:	d508      	bpl.n	800574c <_printf_i+0x14c>
 800573a:	6923      	ldr	r3, [r4, #16]
 800573c:	6861      	ldr	r1, [r4, #4]
 800573e:	4299      	cmp	r1, r3
 8005740:	bfde      	ittt	le
 8005742:	2330      	movle	r3, #48	; 0x30
 8005744:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005748:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800574c:	1b92      	subs	r2, r2, r6
 800574e:	6122      	str	r2, [r4, #16]
 8005750:	f8cd a000 	str.w	sl, [sp]
 8005754:	464b      	mov	r3, r9
 8005756:	aa03      	add	r2, sp, #12
 8005758:	4621      	mov	r1, r4
 800575a:	4640      	mov	r0, r8
 800575c:	f7ff fee2 	bl	8005524 <_printf_common>
 8005760:	3001      	adds	r0, #1
 8005762:	d14c      	bne.n	80057fe <_printf_i+0x1fe>
 8005764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005768:	b004      	add	sp, #16
 800576a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576e:	4835      	ldr	r0, [pc, #212]	; (8005844 <_printf_i+0x244>)
 8005770:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	680e      	ldr	r6, [r1, #0]
 8005778:	061f      	lsls	r7, r3, #24
 800577a:	f856 5b04 	ldr.w	r5, [r6], #4
 800577e:	600e      	str	r6, [r1, #0]
 8005780:	d514      	bpl.n	80057ac <_printf_i+0x1ac>
 8005782:	07d9      	lsls	r1, r3, #31
 8005784:	bf44      	itt	mi
 8005786:	f043 0320 	orrmi.w	r3, r3, #32
 800578a:	6023      	strmi	r3, [r4, #0]
 800578c:	b91d      	cbnz	r5, 8005796 <_printf_i+0x196>
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	f023 0320 	bic.w	r3, r3, #32
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	2310      	movs	r3, #16
 8005798:	e7b0      	b.n	80056fc <_printf_i+0xfc>
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	f043 0320 	orr.w	r3, r3, #32
 80057a0:	6023      	str	r3, [r4, #0]
 80057a2:	2378      	movs	r3, #120	; 0x78
 80057a4:	4828      	ldr	r0, [pc, #160]	; (8005848 <_printf_i+0x248>)
 80057a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057aa:	e7e3      	b.n	8005774 <_printf_i+0x174>
 80057ac:	065e      	lsls	r6, r3, #25
 80057ae:	bf48      	it	mi
 80057b0:	b2ad      	uxthmi	r5, r5
 80057b2:	e7e6      	b.n	8005782 <_printf_i+0x182>
 80057b4:	4616      	mov	r6, r2
 80057b6:	e7bb      	b.n	8005730 <_printf_i+0x130>
 80057b8:	680b      	ldr	r3, [r1, #0]
 80057ba:	6826      	ldr	r6, [r4, #0]
 80057bc:	6960      	ldr	r0, [r4, #20]
 80057be:	1d1d      	adds	r5, r3, #4
 80057c0:	600d      	str	r5, [r1, #0]
 80057c2:	0635      	lsls	r5, r6, #24
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	d501      	bpl.n	80057cc <_printf_i+0x1cc>
 80057c8:	6018      	str	r0, [r3, #0]
 80057ca:	e002      	b.n	80057d2 <_printf_i+0x1d2>
 80057cc:	0671      	lsls	r1, r6, #25
 80057ce:	d5fb      	bpl.n	80057c8 <_printf_i+0x1c8>
 80057d0:	8018      	strh	r0, [r3, #0]
 80057d2:	2300      	movs	r3, #0
 80057d4:	6123      	str	r3, [r4, #16]
 80057d6:	4616      	mov	r6, r2
 80057d8:	e7ba      	b.n	8005750 <_printf_i+0x150>
 80057da:	680b      	ldr	r3, [r1, #0]
 80057dc:	1d1a      	adds	r2, r3, #4
 80057de:	600a      	str	r2, [r1, #0]
 80057e0:	681e      	ldr	r6, [r3, #0]
 80057e2:	6862      	ldr	r2, [r4, #4]
 80057e4:	2100      	movs	r1, #0
 80057e6:	4630      	mov	r0, r6
 80057e8:	f7fa fcf2 	bl	80001d0 <memchr>
 80057ec:	b108      	cbz	r0, 80057f2 <_printf_i+0x1f2>
 80057ee:	1b80      	subs	r0, r0, r6
 80057f0:	6060      	str	r0, [r4, #4]
 80057f2:	6863      	ldr	r3, [r4, #4]
 80057f4:	6123      	str	r3, [r4, #16]
 80057f6:	2300      	movs	r3, #0
 80057f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057fc:	e7a8      	b.n	8005750 <_printf_i+0x150>
 80057fe:	6923      	ldr	r3, [r4, #16]
 8005800:	4632      	mov	r2, r6
 8005802:	4649      	mov	r1, r9
 8005804:	4640      	mov	r0, r8
 8005806:	47d0      	blx	sl
 8005808:	3001      	adds	r0, #1
 800580a:	d0ab      	beq.n	8005764 <_printf_i+0x164>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	079b      	lsls	r3, r3, #30
 8005810:	d413      	bmi.n	800583a <_printf_i+0x23a>
 8005812:	68e0      	ldr	r0, [r4, #12]
 8005814:	9b03      	ldr	r3, [sp, #12]
 8005816:	4298      	cmp	r0, r3
 8005818:	bfb8      	it	lt
 800581a:	4618      	movlt	r0, r3
 800581c:	e7a4      	b.n	8005768 <_printf_i+0x168>
 800581e:	2301      	movs	r3, #1
 8005820:	4632      	mov	r2, r6
 8005822:	4649      	mov	r1, r9
 8005824:	4640      	mov	r0, r8
 8005826:	47d0      	blx	sl
 8005828:	3001      	adds	r0, #1
 800582a:	d09b      	beq.n	8005764 <_printf_i+0x164>
 800582c:	3501      	adds	r5, #1
 800582e:	68e3      	ldr	r3, [r4, #12]
 8005830:	9903      	ldr	r1, [sp, #12]
 8005832:	1a5b      	subs	r3, r3, r1
 8005834:	42ab      	cmp	r3, r5
 8005836:	dcf2      	bgt.n	800581e <_printf_i+0x21e>
 8005838:	e7eb      	b.n	8005812 <_printf_i+0x212>
 800583a:	2500      	movs	r5, #0
 800583c:	f104 0619 	add.w	r6, r4, #25
 8005840:	e7f5      	b.n	800582e <_printf_i+0x22e>
 8005842:	bf00      	nop
 8005844:	08005b7d 	.word	0x08005b7d
 8005848:	08005b8e 	.word	0x08005b8e

0800584c <_sbrk_r>:
 800584c:	b538      	push	{r3, r4, r5, lr}
 800584e:	4d06      	ldr	r5, [pc, #24]	; (8005868 <_sbrk_r+0x1c>)
 8005850:	2300      	movs	r3, #0
 8005852:	4604      	mov	r4, r0
 8005854:	4608      	mov	r0, r1
 8005856:	602b      	str	r3, [r5, #0]
 8005858:	f7fb fde6 	bl	8001428 <_sbrk>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d102      	bne.n	8005866 <_sbrk_r+0x1a>
 8005860:	682b      	ldr	r3, [r5, #0]
 8005862:	b103      	cbz	r3, 8005866 <_sbrk_r+0x1a>
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	bd38      	pop	{r3, r4, r5, pc}
 8005868:	20000198 	.word	0x20000198

0800586c <__sread>:
 800586c:	b510      	push	{r4, lr}
 800586e:	460c      	mov	r4, r1
 8005870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005874:	f000 f8a0 	bl	80059b8 <_read_r>
 8005878:	2800      	cmp	r0, #0
 800587a:	bfab      	itete	ge
 800587c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800587e:	89a3      	ldrhlt	r3, [r4, #12]
 8005880:	181b      	addge	r3, r3, r0
 8005882:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005886:	bfac      	ite	ge
 8005888:	6563      	strge	r3, [r4, #84]	; 0x54
 800588a:	81a3      	strhlt	r3, [r4, #12]
 800588c:	bd10      	pop	{r4, pc}

0800588e <__swrite>:
 800588e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005892:	461f      	mov	r7, r3
 8005894:	898b      	ldrh	r3, [r1, #12]
 8005896:	05db      	lsls	r3, r3, #23
 8005898:	4605      	mov	r5, r0
 800589a:	460c      	mov	r4, r1
 800589c:	4616      	mov	r6, r2
 800589e:	d505      	bpl.n	80058ac <__swrite+0x1e>
 80058a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a4:	2302      	movs	r3, #2
 80058a6:	2200      	movs	r2, #0
 80058a8:	f000 f868 	bl	800597c <_lseek_r>
 80058ac:	89a3      	ldrh	r3, [r4, #12]
 80058ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058b6:	81a3      	strh	r3, [r4, #12]
 80058b8:	4632      	mov	r2, r6
 80058ba:	463b      	mov	r3, r7
 80058bc:	4628      	mov	r0, r5
 80058be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058c2:	f000 b817 	b.w	80058f4 <_write_r>

080058c6 <__sseek>:
 80058c6:	b510      	push	{r4, lr}
 80058c8:	460c      	mov	r4, r1
 80058ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ce:	f000 f855 	bl	800597c <_lseek_r>
 80058d2:	1c43      	adds	r3, r0, #1
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	bf15      	itete	ne
 80058d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80058da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058e2:	81a3      	strheq	r3, [r4, #12]
 80058e4:	bf18      	it	ne
 80058e6:	81a3      	strhne	r3, [r4, #12]
 80058e8:	bd10      	pop	{r4, pc}

080058ea <__sclose>:
 80058ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ee:	f000 b813 	b.w	8005918 <_close_r>
	...

080058f4 <_write_r>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	4d07      	ldr	r5, [pc, #28]	; (8005914 <_write_r+0x20>)
 80058f8:	4604      	mov	r4, r0
 80058fa:	4608      	mov	r0, r1
 80058fc:	4611      	mov	r1, r2
 80058fe:	2200      	movs	r2, #0
 8005900:	602a      	str	r2, [r5, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	f7fb fac2 	bl	8000e8c <_write>
 8005908:	1c43      	adds	r3, r0, #1
 800590a:	d102      	bne.n	8005912 <_write_r+0x1e>
 800590c:	682b      	ldr	r3, [r5, #0]
 800590e:	b103      	cbz	r3, 8005912 <_write_r+0x1e>
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	bd38      	pop	{r3, r4, r5, pc}
 8005914:	20000198 	.word	0x20000198

08005918 <_close_r>:
 8005918:	b538      	push	{r3, r4, r5, lr}
 800591a:	4d06      	ldr	r5, [pc, #24]	; (8005934 <_close_r+0x1c>)
 800591c:	2300      	movs	r3, #0
 800591e:	4604      	mov	r4, r0
 8005920:	4608      	mov	r0, r1
 8005922:	602b      	str	r3, [r5, #0]
 8005924:	f7fb fd4b 	bl	80013be <_close>
 8005928:	1c43      	adds	r3, r0, #1
 800592a:	d102      	bne.n	8005932 <_close_r+0x1a>
 800592c:	682b      	ldr	r3, [r5, #0]
 800592e:	b103      	cbz	r3, 8005932 <_close_r+0x1a>
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	bd38      	pop	{r3, r4, r5, pc}
 8005934:	20000198 	.word	0x20000198

08005938 <_fstat_r>:
 8005938:	b538      	push	{r3, r4, r5, lr}
 800593a:	4d07      	ldr	r5, [pc, #28]	; (8005958 <_fstat_r+0x20>)
 800593c:	2300      	movs	r3, #0
 800593e:	4604      	mov	r4, r0
 8005940:	4608      	mov	r0, r1
 8005942:	4611      	mov	r1, r2
 8005944:	602b      	str	r3, [r5, #0]
 8005946:	f7fb fd46 	bl	80013d6 <_fstat>
 800594a:	1c43      	adds	r3, r0, #1
 800594c:	d102      	bne.n	8005954 <_fstat_r+0x1c>
 800594e:	682b      	ldr	r3, [r5, #0]
 8005950:	b103      	cbz	r3, 8005954 <_fstat_r+0x1c>
 8005952:	6023      	str	r3, [r4, #0]
 8005954:	bd38      	pop	{r3, r4, r5, pc}
 8005956:	bf00      	nop
 8005958:	20000198 	.word	0x20000198

0800595c <_isatty_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	4d06      	ldr	r5, [pc, #24]	; (8005978 <_isatty_r+0x1c>)
 8005960:	2300      	movs	r3, #0
 8005962:	4604      	mov	r4, r0
 8005964:	4608      	mov	r0, r1
 8005966:	602b      	str	r3, [r5, #0]
 8005968:	f7fb fd45 	bl	80013f6 <_isatty>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d102      	bne.n	8005976 <_isatty_r+0x1a>
 8005970:	682b      	ldr	r3, [r5, #0]
 8005972:	b103      	cbz	r3, 8005976 <_isatty_r+0x1a>
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	bd38      	pop	{r3, r4, r5, pc}
 8005978:	20000198 	.word	0x20000198

0800597c <_lseek_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	4d07      	ldr	r5, [pc, #28]	; (800599c <_lseek_r+0x20>)
 8005980:	4604      	mov	r4, r0
 8005982:	4608      	mov	r0, r1
 8005984:	4611      	mov	r1, r2
 8005986:	2200      	movs	r2, #0
 8005988:	602a      	str	r2, [r5, #0]
 800598a:	461a      	mov	r2, r3
 800598c:	f7fb fd3e 	bl	800140c <_lseek>
 8005990:	1c43      	adds	r3, r0, #1
 8005992:	d102      	bne.n	800599a <_lseek_r+0x1e>
 8005994:	682b      	ldr	r3, [r5, #0]
 8005996:	b103      	cbz	r3, 800599a <_lseek_r+0x1e>
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	bd38      	pop	{r3, r4, r5, pc}
 800599c:	20000198 	.word	0x20000198

080059a0 <__malloc_lock>:
 80059a0:	4801      	ldr	r0, [pc, #4]	; (80059a8 <__malloc_lock+0x8>)
 80059a2:	f7ff bb55 	b.w	8005050 <__retarget_lock_acquire_recursive>
 80059a6:	bf00      	nop
 80059a8:	20000190 	.word	0x20000190

080059ac <__malloc_unlock>:
 80059ac:	4801      	ldr	r0, [pc, #4]	; (80059b4 <__malloc_unlock+0x8>)
 80059ae:	f7ff bb50 	b.w	8005052 <__retarget_lock_release_recursive>
 80059b2:	bf00      	nop
 80059b4:	20000190 	.word	0x20000190

080059b8 <_read_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4d07      	ldr	r5, [pc, #28]	; (80059d8 <_read_r+0x20>)
 80059bc:	4604      	mov	r4, r0
 80059be:	4608      	mov	r0, r1
 80059c0:	4611      	mov	r1, r2
 80059c2:	2200      	movs	r2, #0
 80059c4:	602a      	str	r2, [r5, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	f7fb fcdc 	bl	8001384 <_read>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	d102      	bne.n	80059d6 <_read_r+0x1e>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	b103      	cbz	r3, 80059d6 <_read_r+0x1e>
 80059d4:	6023      	str	r3, [r4, #0]
 80059d6:	bd38      	pop	{r3, r4, r5, pc}
 80059d8:	20000198 	.word	0x20000198

080059dc <_init>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	bf00      	nop
 80059e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e2:	bc08      	pop	{r3}
 80059e4:	469e      	mov	lr, r3
 80059e6:	4770      	bx	lr

080059e8 <_fini>:
 80059e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ea:	bf00      	nop
 80059ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ee:	bc08      	pop	{r3}
 80059f0:	469e      	mov	lr, r3
 80059f2:	4770      	bx	lr
