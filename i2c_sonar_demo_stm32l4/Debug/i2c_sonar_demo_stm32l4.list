
i2c_sonar_demo_stm32l4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08005630  08005630  00015630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005758  08005758  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005758  08005758  00015758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005760  08005760  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005764  08005764  00015764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  080057d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080057d8  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012725  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002412  00000000  00000000  000327c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00034bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  00035878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002775d  00000000  00000000  00036420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101d9  00000000  00000000  0005db7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec33c  00000000  00000000  0006dd56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015a092  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bc0  00000000  00000000  0015a0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005618 	.word	0x08005618

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005618 	.word	0x08005618

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800088c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000890:	f000 b96e 	b.w	8000b70 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	4604      	mov	r4, r0
 80008b4:	468c      	mov	ip, r1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f040 8083 	bne.w	80009c2 <__udivmoddi4+0x116>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4617      	mov	r7, r2
 80008c0:	d947      	bls.n	8000952 <__udivmoddi4+0xa6>
 80008c2:	fab2 f282 	clz	r2, r2
 80008c6:	b142      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c8:	f1c2 0020 	rsb	r0, r2, #32
 80008cc:	fa24 f000 	lsr.w	r0, r4, r0
 80008d0:	4091      	lsls	r1, r2
 80008d2:	4097      	lsls	r7, r2
 80008d4:	ea40 0c01 	orr.w	ip, r0, r1
 80008d8:	4094      	lsls	r4, r2
 80008da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008de:	0c23      	lsrs	r3, r4, #16
 80008e0:	fbbc f6f8 	udiv	r6, ip, r8
 80008e4:	fa1f fe87 	uxth.w	lr, r7
 80008e8:	fb08 c116 	mls	r1, r8, r6, ip
 80008ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f0:	fb06 f10e 	mul.w	r1, r6, lr
 80008f4:	4299      	cmp	r1, r3
 80008f6:	d909      	bls.n	800090c <__udivmoddi4+0x60>
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80008fe:	f080 8119 	bcs.w	8000b34 <__udivmoddi4+0x288>
 8000902:	4299      	cmp	r1, r3
 8000904:	f240 8116 	bls.w	8000b34 <__udivmoddi4+0x288>
 8000908:	3e02      	subs	r6, #2
 800090a:	443b      	add	r3, r7
 800090c:	1a5b      	subs	r3, r3, r1
 800090e:	b2a4      	uxth	r4, r4
 8000910:	fbb3 f0f8 	udiv	r0, r3, r8
 8000914:	fb08 3310 	mls	r3, r8, r0, r3
 8000918:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800091c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000920:	45a6      	cmp	lr, r4
 8000922:	d909      	bls.n	8000938 <__udivmoddi4+0x8c>
 8000924:	193c      	adds	r4, r7, r4
 8000926:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800092a:	f080 8105 	bcs.w	8000b38 <__udivmoddi4+0x28c>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f240 8102 	bls.w	8000b38 <__udivmoddi4+0x28c>
 8000934:	3802      	subs	r0, #2
 8000936:	443c      	add	r4, r7
 8000938:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800093c:	eba4 040e 	sub.w	r4, r4, lr
 8000940:	2600      	movs	r6, #0
 8000942:	b11d      	cbz	r5, 800094c <__udivmoddi4+0xa0>
 8000944:	40d4      	lsrs	r4, r2
 8000946:	2300      	movs	r3, #0
 8000948:	e9c5 4300 	strd	r4, r3, [r5]
 800094c:	4631      	mov	r1, r6
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	b902      	cbnz	r2, 8000956 <__udivmoddi4+0xaa>
 8000954:	deff      	udf	#255	; 0xff
 8000956:	fab2 f282 	clz	r2, r2
 800095a:	2a00      	cmp	r2, #0
 800095c:	d150      	bne.n	8000a00 <__udivmoddi4+0x154>
 800095e:	1bcb      	subs	r3, r1, r7
 8000960:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000964:	fa1f f887 	uxth.w	r8, r7
 8000968:	2601      	movs	r6, #1
 800096a:	fbb3 fcfe 	udiv	ip, r3, lr
 800096e:	0c21      	lsrs	r1, r4, #16
 8000970:	fb0e 331c 	mls	r3, lr, ip, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb08 f30c 	mul.w	r3, r8, ip
 800097c:	428b      	cmp	r3, r1
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0xe4>
 8000980:	1879      	adds	r1, r7, r1
 8000982:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0xe2>
 8000988:	428b      	cmp	r3, r1
 800098a:	f200 80e9 	bhi.w	8000b60 <__udivmoddi4+0x2b4>
 800098e:	4684      	mov	ip, r0
 8000990:	1ac9      	subs	r1, r1, r3
 8000992:	b2a3      	uxth	r3, r4
 8000994:	fbb1 f0fe 	udiv	r0, r1, lr
 8000998:	fb0e 1110 	mls	r1, lr, r0, r1
 800099c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009a0:	fb08 f800 	mul.w	r8, r8, r0
 80009a4:	45a0      	cmp	r8, r4
 80009a6:	d907      	bls.n	80009b8 <__udivmoddi4+0x10c>
 80009a8:	193c      	adds	r4, r7, r4
 80009aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x10a>
 80009b0:	45a0      	cmp	r8, r4
 80009b2:	f200 80d9 	bhi.w	8000b68 <__udivmoddi4+0x2bc>
 80009b6:	4618      	mov	r0, r3
 80009b8:	eba4 0408 	sub.w	r4, r4, r8
 80009bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009c0:	e7bf      	b.n	8000942 <__udivmoddi4+0x96>
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d909      	bls.n	80009da <__udivmoddi4+0x12e>
 80009c6:	2d00      	cmp	r5, #0
 80009c8:	f000 80b1 	beq.w	8000b2e <__udivmoddi4+0x282>
 80009cc:	2600      	movs	r6, #0
 80009ce:	e9c5 0100 	strd	r0, r1, [r5]
 80009d2:	4630      	mov	r0, r6
 80009d4:	4631      	mov	r1, r6
 80009d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009da:	fab3 f683 	clz	r6, r3
 80009de:	2e00      	cmp	r6, #0
 80009e0:	d14a      	bne.n	8000a78 <__udivmoddi4+0x1cc>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d302      	bcc.n	80009ec <__udivmoddi4+0x140>
 80009e6:	4282      	cmp	r2, r0
 80009e8:	f200 80b8 	bhi.w	8000b5c <__udivmoddi4+0x2b0>
 80009ec:	1a84      	subs	r4, r0, r2
 80009ee:	eb61 0103 	sbc.w	r1, r1, r3
 80009f2:	2001      	movs	r0, #1
 80009f4:	468c      	mov	ip, r1
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d0a8      	beq.n	800094c <__udivmoddi4+0xa0>
 80009fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80009fe:	e7a5      	b.n	800094c <__udivmoddi4+0xa0>
 8000a00:	f1c2 0320 	rsb	r3, r2, #32
 8000a04:	fa20 f603 	lsr.w	r6, r0, r3
 8000a08:	4097      	lsls	r7, r2
 8000a0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a12:	40d9      	lsrs	r1, r3
 8000a14:	4330      	orrs	r0, r6
 8000a16:	0c03      	lsrs	r3, r0, #16
 8000a18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a1c:	fa1f f887 	uxth.w	r8, r7
 8000a20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f108 	mul.w	r1, r6, r8
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a32:	d909      	bls.n	8000a48 <__udivmoddi4+0x19c>
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000a3a:	f080 808d 	bcs.w	8000b58 <__udivmoddi4+0x2ac>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 808a 	bls.w	8000b58 <__udivmoddi4+0x2ac>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	443b      	add	r3, r7
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b281      	uxth	r1, r0
 8000a4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a58:	fb00 f308 	mul.w	r3, r0, r8
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	d907      	bls.n	8000a70 <__udivmoddi4+0x1c4>
 8000a60:	1879      	adds	r1, r7, r1
 8000a62:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000a66:	d273      	bcs.n	8000b50 <__udivmoddi4+0x2a4>
 8000a68:	428b      	cmp	r3, r1
 8000a6a:	d971      	bls.n	8000b50 <__udivmoddi4+0x2a4>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	4439      	add	r1, r7
 8000a70:	1acb      	subs	r3, r1, r3
 8000a72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a76:	e778      	b.n	800096a <__udivmoddi4+0xbe>
 8000a78:	f1c6 0c20 	rsb	ip, r6, #32
 8000a7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a84:	431c      	orrs	r4, r3
 8000a86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a96:	431f      	orrs	r7, r3
 8000a98:	0c3b      	lsrs	r3, r7, #16
 8000a9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9e:	fa1f f884 	uxth.w	r8, r4
 8000aa2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aa6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aaa:	fb09 fa08 	mul.w	sl, r9, r8
 8000aae:	458a      	cmp	sl, r1
 8000ab0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ab4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ab8:	d908      	bls.n	8000acc <__udivmoddi4+0x220>
 8000aba:	1861      	adds	r1, r4, r1
 8000abc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ac0:	d248      	bcs.n	8000b54 <__udivmoddi4+0x2a8>
 8000ac2:	458a      	cmp	sl, r1
 8000ac4:	d946      	bls.n	8000b54 <__udivmoddi4+0x2a8>
 8000ac6:	f1a9 0902 	sub.w	r9, r9, #2
 8000aca:	4421      	add	r1, r4
 8000acc:	eba1 010a 	sub.w	r1, r1, sl
 8000ad0:	b2bf      	uxth	r7, r7
 8000ad2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ada:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ade:	fb00 f808 	mul.w	r8, r0, r8
 8000ae2:	45b8      	cmp	r8, r7
 8000ae4:	d907      	bls.n	8000af6 <__udivmoddi4+0x24a>
 8000ae6:	19e7      	adds	r7, r4, r7
 8000ae8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aec:	d22e      	bcs.n	8000b4c <__udivmoddi4+0x2a0>
 8000aee:	45b8      	cmp	r8, r7
 8000af0:	d92c      	bls.n	8000b4c <__udivmoddi4+0x2a0>
 8000af2:	3802      	subs	r0, #2
 8000af4:	4427      	add	r7, r4
 8000af6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000afa:	eba7 0708 	sub.w	r7, r7, r8
 8000afe:	fba0 8902 	umull	r8, r9, r0, r2
 8000b02:	454f      	cmp	r7, r9
 8000b04:	46c6      	mov	lr, r8
 8000b06:	4649      	mov	r1, r9
 8000b08:	d31a      	bcc.n	8000b40 <__udivmoddi4+0x294>
 8000b0a:	d017      	beq.n	8000b3c <__udivmoddi4+0x290>
 8000b0c:	b15d      	cbz	r5, 8000b26 <__udivmoddi4+0x27a>
 8000b0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b12:	eb67 0701 	sbc.w	r7, r7, r1
 8000b16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b1a:	40f2      	lsrs	r2, r6
 8000b1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b20:	40f7      	lsrs	r7, r6
 8000b22:	e9c5 2700 	strd	r2, r7, [r5]
 8000b26:	2600      	movs	r6, #0
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	462e      	mov	r6, r5
 8000b30:	4628      	mov	r0, r5
 8000b32:	e70b      	b.n	800094c <__udivmoddi4+0xa0>
 8000b34:	4606      	mov	r6, r0
 8000b36:	e6e9      	b.n	800090c <__udivmoddi4+0x60>
 8000b38:	4618      	mov	r0, r3
 8000b3a:	e6fd      	b.n	8000938 <__udivmoddi4+0x8c>
 8000b3c:	4543      	cmp	r3, r8
 8000b3e:	d2e5      	bcs.n	8000b0c <__udivmoddi4+0x260>
 8000b40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b44:	eb69 0104 	sbc.w	r1, r9, r4
 8000b48:	3801      	subs	r0, #1
 8000b4a:	e7df      	b.n	8000b0c <__udivmoddi4+0x260>
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	e7d2      	b.n	8000af6 <__udivmoddi4+0x24a>
 8000b50:	4660      	mov	r0, ip
 8000b52:	e78d      	b.n	8000a70 <__udivmoddi4+0x1c4>
 8000b54:	4681      	mov	r9, r0
 8000b56:	e7b9      	b.n	8000acc <__udivmoddi4+0x220>
 8000b58:	4666      	mov	r6, ip
 8000b5a:	e775      	b.n	8000a48 <__udivmoddi4+0x19c>
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	e74a      	b.n	80009f6 <__udivmoddi4+0x14a>
 8000b60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b64:	4439      	add	r1, r7
 8000b66:	e713      	b.n	8000990 <__udivmoddi4+0xe4>
 8000b68:	3802      	subs	r0, #2
 8000b6a:	443c      	add	r4, r7
 8000b6c:	e724      	b.n	80009b8 <__udivmoddi4+0x10c>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_idiv0>:
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a2a      	ldr	r2, [pc, #168]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba2:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	4a24      	ldr	r2, [pc, #144]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bae:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a1e      	ldr	r2, [pc, #120]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4a18      	ldr	r2, [pc, #96]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <MX_GPIO_Init+0xc4>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2120      	movs	r1, #32
 8000bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf2:	f000 ff49 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bfc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480b      	ldr	r0, [pc, #44]	; (8000c3c <MX_GPIO_Init+0xc8>)
 8000c0e:	f000 fd91 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c12:	2320      	movs	r3, #32
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2c:	f000 fd82 	bl	8001734 <HAL_GPIO_Init>

}
 8000c30:	bf00      	nop
 8000c32:	3728      	adds	r7, #40	; 0x28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	48000800 	.word	0x48000800

08000c40 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <MX_I2C1_Init+0x74>)
 8000c46:	4a1c      	ldr	r2, [pc, #112]	; (8000cb8 <MX_I2C1_Init+0x78>)
 8000c48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MX_I2C1_Init+0x74>)
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	; (8000cbc <MX_I2C1_Init+0x7c>)
 8000c4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c50:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <MX_I2C1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_I2C1_Init+0x74>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <MX_I2C1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_I2C1_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_I2C1_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_I2C1_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_I2C1_Init+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c7a:	480e      	ldr	r0, [pc, #56]	; (8000cb4 <MX_I2C1_Init+0x74>)
 8000c7c:	f000 ff1c 	bl	8001ab8 <HAL_I2C_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c86:	f000 fa15 	bl	80010b4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <MX_I2C1_Init+0x74>)
 8000c8e:	f001 fc05 	bl	800249c <HAL_I2CEx_ConfigAnalogFilter>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c98:	f000 fa0c 	bl	80010b4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_I2C1_Init+0x74>)
 8000ca0:	f001 fc47 	bl	8002532 <HAL_I2CEx_ConfigDigitalFilter>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000caa:	f000 fa03 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000098 	.word	0x20000098
 8000cb8:	40005400 	.word	0x40005400
 8000cbc:	10909cec 	.word	0x10909cec

08000cc0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b0ac      	sub	sp, #176	; 0xb0
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2288      	movs	r2, #136	; 0x88
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f003 fcc5 	bl	8004670 <memset>
  if(i2cHandle->Instance==I2C1)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <HAL_I2C_MspInit+0xb0>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d13b      	bne.n	8000d68 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cf0:	2340      	movs	r3, #64	; 0x40
 8000cf2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f002 fab5 	bl	800326c <HAL_RCCEx_PeriphCLKConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d08:	f000 f9d4 	bl	80010b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <HAL_I2C_MspInit+0xb4>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d10:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <HAL_I2C_MspInit+0xb4>)
 8000d12:	f043 0302 	orr.w	r3, r3, #2
 8000d16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <HAL_I2C_MspInit+0xb4>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d2c:	2312      	movs	r3, #18
 8000d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480b      	ldr	r0, [pc, #44]	; (8000d78 <HAL_I2C_MspInit+0xb8>)
 8000d4c:	f000 fcf2 	bl	8001734 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_I2C_MspInit+0xb4>)
 8000d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d54:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <HAL_I2C_MspInit+0xb4>)
 8000d56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d5a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <HAL_I2C_MspInit+0xb4>)
 8000d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d68:	bf00      	nop
 8000d6a:	37b0      	adds	r7, #176	; 0xb0
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40005400 	.word	0x40005400
 8000d74:	40021000 	.word	0x40021000
 8000d78:	48000400 	.word	0x48000400

08000d7c <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int fd, char* ptr, int len)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d90:	68b9      	ldr	r1, [r7, #8]
 8000d92:	4804      	ldr	r0, [pc, #16]	; (8000da4 <_write+0x28>)
 8000d94:	f002 ff74 	bl	8003c80 <HAL_UART_Transmit>
	return len;
 8000d98:	687b      	ldr	r3, [r7, #4]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200000e4 	.word	0x200000e4

08000da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t buf[5];
	HAL_StatusTypeDef ret;

	uint8_t t_gain = 0x02;	// Gain
 8000dae:	2302      	movs	r3, #2
 8000db0:	77fb      	strb	r3, [r7, #31]

	double t_range = 2.0;	// Max range
 8000db2:	f04f 0200 	mov.w	r2, #0
 8000db6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dba:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t t_range_cmd = (uint8_t)((t_range-0.043)*23.26);
 8000dbe:	a390      	add	r3, pc, #576	; (adr r3, 8001000 <main+0x258>)
 8000dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000dc8:	f7ff fb80 	bl	80004cc <__aeabi_dsub>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	a38c      	add	r3, pc, #560	; (adr r3, 8001008 <main+0x260>)
 8000dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dda:	f7ff fa49 	bl	8000270 <__aeabi_dmul>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	f7ff fd29 	bl	800083c <__aeabi_d2uiz>
 8000dea:	4603      	mov	r3, r0
 8000dec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dee:	f000 fb1b 	bl	8001428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df2:	f000 f90d 	bl	8001010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df6:	f7ff febd 	bl	8000b74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dfa:	f000 fa5f 	bl	80012bc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000dfe:	f7ff ff1f 	bl	8000c40 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Want to read the firmware register
  buf[0] = FIRMWARE_REV_REG;
 8000e02:	2300      	movs	r3, #0
 8000e04:	713b      	strb	r3, [r7, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, SRF10_ADDR, buf, 1, 5000);
 8000e06:	23e0      	movs	r3, #224	; 0xe0
 8000e08:	b299      	uxth	r1, r3
 8000e0a:	1d3a      	adds	r2, r7, #4
 8000e0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2301      	movs	r3, #1
 8000e14:	4876      	ldr	r0, [pc, #472]	; (8000ff0 <main+0x248>)
 8000e16:	f000 fedf 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	73bb      	strb	r3, [r7, #14]
  if (ret != HAL_OK)
 8000e1e:	7bbb      	ldrb	r3, [r7, #14]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <main+0x80>
  {
	  Error_Handler();
 8000e24:	f000 f946 	bl	80010b4 <Error_Handler>
  }

  ret = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)SRF10_ADDR, buf, 1, 5000);
 8000e28:	23e0      	movs	r3, #224	; 0xe0
 8000e2a:	b299      	uxth	r1, r3
 8000e2c:	1d3a      	adds	r2, r7, #4
 8000e2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2301      	movs	r3, #1
 8000e36:	486e      	ldr	r0, [pc, #440]	; (8000ff0 <main+0x248>)
 8000e38:	f000 ffc2 	bl	8001dc0 <HAL_I2C_Master_Receive>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	73bb      	strb	r3, [r7, #14]
  if (ret != HAL_OK)
 8000e40:	7bbb      	ldrb	r3, [r7, #14]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <main+0xa2>
  {
	  Error_Handler();
 8000e46:	f000 f935 	bl	80010b4 <Error_Handler>
  }
  printf("Firmware version: %d\r\n", buf[0]);
 8000e4a:	793b      	ldrb	r3, [r7, #4]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4869      	ldr	r0, [pc, #420]	; (8000ff4 <main+0x24c>)
 8000e50:	f003 fc16 	bl	8004680 <iprintf>

  // --- Initializing sonar sensor ---
  // Setting the gain
  buf[0] = GAIN_REG;
 8000e54:	2301      	movs	r3, #1
 8000e56:	713b      	strb	r3, [r7, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, SRF10_ADDR, buf, 1, 5000);
 8000e58:	23e0      	movs	r3, #224	; 0xe0
 8000e5a:	b299      	uxth	r1, r3
 8000e5c:	1d3a      	adds	r2, r7, #4
 8000e5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	4862      	ldr	r0, [pc, #392]	; (8000ff0 <main+0x248>)
 8000e68:	f000 feb6 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	73bb      	strb	r3, [r7, #14]
  if (ret != HAL_OK)
 8000e70:	7bbb      	ldrb	r3, [r7, #14]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <main+0xd2>
  {
	  Error_Handler();
 8000e76:	f000 f91d 	bl	80010b4 <Error_Handler>
  }

  buf[0] = t_gain;
 8000e7a:	7ffb      	ldrb	r3, [r7, #31]
 8000e7c:	713b      	strb	r3, [r7, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, SRF10_ADDR, buf, 1, 5000);
 8000e7e:	23e0      	movs	r3, #224	; 0xe0
 8000e80:	b299      	uxth	r1, r3
 8000e82:	1d3a      	adds	r2, r7, #4
 8000e84:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	4858      	ldr	r0, [pc, #352]	; (8000ff0 <main+0x248>)
 8000e8e:	f000 fea3 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 8000e92:	4603      	mov	r3, r0
 8000e94:	73bb      	strb	r3, [r7, #14]
  if (ret != HAL_OK)
 8000e96:	7bbb      	ldrb	r3, [r7, #14]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <main+0xf8>
  {
	  Error_Handler();
 8000e9c:	f000 f90a 	bl	80010b4 <Error_Handler>
  }

  // Setting the range
  buf[0] = RANGE_REG;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	713b      	strb	r3, [r7, #4]
//  buf[1] = t_range_cmd;
  ret = HAL_I2C_Master_Transmit(&hi2c1, SRF10_ADDR, buf, 1, 5000);
 8000ea4:	23e0      	movs	r3, #224	; 0xe0
 8000ea6:	b299      	uxth	r1, r3
 8000ea8:	1d3a      	adds	r2, r7, #4
 8000eaa:	f241 3388 	movw	r3, #5000	; 0x1388
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	484f      	ldr	r0, [pc, #316]	; (8000ff0 <main+0x248>)
 8000eb4:	f000 fe90 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	73bb      	strb	r3, [r7, #14]
  if (ret != HAL_OK)
 8000ebc:	7bbb      	ldrb	r3, [r7, #14]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <main+0x11e>
  {
	  Error_Handler();
 8000ec2:	f000 f8f7 	bl	80010b4 <Error_Handler>
  }

  buf[0] = t_range_cmd;
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	713b      	strb	r3, [r7, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, SRF10_ADDR, buf, 1, 5000);
 8000eca:	23e0      	movs	r3, #224	; 0xe0
 8000ecc:	b299      	uxth	r1, r3
 8000ece:	1d3a      	adds	r2, r7, #4
 8000ed0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	4845      	ldr	r0, [pc, #276]	; (8000ff0 <main+0x248>)
 8000eda:	f000 fe7d 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	73bb      	strb	r3, [r7, #14]
  if (ret != HAL_OK)
 8000ee2:	7bbb      	ldrb	r3, [r7, #14]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <main+0x144>
  {
	  Error_Handler();
 8000ee8:	f000 f8e4 	bl	80010b4 <Error_Handler>
  }

  printf("Sonar initialized\r\n");
 8000eec:	4842      	ldr	r0, [pc, #264]	; (8000ff8 <main+0x250>)
 8000eee:	f003 fc4d 	bl	800478c <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Setting up to get data in centimeters
	  buf[0] = COMMAND_REG;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	713b      	strb	r3, [r7, #4]
	  if (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)SRF10_ADDR, buf, 1, 5000) != HAL_OK)
 8000ef6:	23e0      	movs	r3, #224	; 0xe0
 8000ef8:	b299      	uxth	r1, r3
 8000efa:	1d3a      	adds	r2, r7, #4
 8000efc:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2301      	movs	r3, #1
 8000f04:	483a      	ldr	r0, [pc, #232]	; (8000ff0 <main+0x248>)
 8000f06:	f000 fe67 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <main+0x16c>
	  {
		  Error_Handler();
 8000f10:	f000 f8d0 	bl	80010b4 <Error_Handler>
	  }

	  buf[0] = RANGE_MODE_CENTIMETER;
 8000f14:	2351      	movs	r3, #81	; 0x51
 8000f16:	713b      	strb	r3, [r7, #4]
	  if (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)SRF10_ADDR, buf, 1, 5000) != HAL_OK)
 8000f18:	23e0      	movs	r3, #224	; 0xe0
 8000f1a:	b299      	uxth	r1, r3
 8000f1c:	1d3a      	adds	r2, r7, #4
 8000f1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2301      	movs	r3, #1
 8000f26:	4832      	ldr	r0, [pc, #200]	; (8000ff0 <main+0x248>)
 8000f28:	f000 fe56 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <main+0x18e>
	  {
		  Error_Handler();
 8000f32:	f000 f8bf 	bl	80010b4 <Error_Handler>
	  }

	  // --- Reading sensor data ---
	  // Reading from high byte register
	  buf[0] = RANGE_HIGH_REG;
 8000f36:	2302      	movs	r3, #2
 8000f38:	713b      	strb	r3, [r7, #4]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)SRF10_ADDR, buf, 1, 5000);
 8000f3a:	23e0      	movs	r3, #224	; 0xe0
 8000f3c:	b299      	uxth	r1, r3
 8000f3e:	1d3a      	adds	r2, r7, #4
 8000f40:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2301      	movs	r3, #1
 8000f48:	4829      	ldr	r0, [pc, #164]	; (8000ff0 <main+0x248>)
 8000f4a:	f000 fe45 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73bb      	strb	r3, [r7, #14]
	  if (ret != HAL_OK)
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <main+0x1b4>
	  {
		  Error_Handler();
 8000f58:	f000 f8ac 	bl	80010b4 <Error_Handler>
	  }

	  ret = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)SRF10_ADDR, buf, 1, 5000);
 8000f5c:	23e0      	movs	r3, #224	; 0xe0
 8000f5e:	b299      	uxth	r1, r3
 8000f60:	1d3a      	adds	r2, r7, #4
 8000f62:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	4821      	ldr	r0, [pc, #132]	; (8000ff0 <main+0x248>)
 8000f6c:	f000 ff28 	bl	8001dc0 <HAL_I2C_Master_Receive>
 8000f70:	4603      	mov	r3, r0
 8000f72:	73bb      	strb	r3, [r7, #14]
	  if (ret != HAL_OK)
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <main+0x1d6>
	  {
		  Error_Handler();
 8000f7a:	f000 f89b 	bl	80010b4 <Error_Handler>
	  }
	  high_byte = buf[0];
 8000f7e:	793b      	ldrb	r3, [r7, #4]
 8000f80:	737b      	strb	r3, [r7, #13]


	  // Reading from low byte register
	  buf[0] = RANGE_LOW_REG;
 8000f82:	2303      	movs	r3, #3
 8000f84:	713b      	strb	r3, [r7, #4]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)SRF10_ADDR, buf, 1, 5000);
 8000f86:	23e0      	movs	r3, #224	; 0xe0
 8000f88:	b299      	uxth	r1, r3
 8000f8a:	1d3a      	adds	r2, r7, #4
 8000f8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2301      	movs	r3, #1
 8000f94:	4816      	ldr	r0, [pc, #88]	; (8000ff0 <main+0x248>)
 8000f96:	f000 fe1f 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	73bb      	strb	r3, [r7, #14]
	  if (ret != HAL_OK)
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <main+0x200>
	  {
		  Error_Handler();
 8000fa4:	f000 f886 	bl	80010b4 <Error_Handler>
	  }

	  ret = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)SRF10_ADDR, buf, 1, 5000);
 8000fa8:	23e0      	movs	r3, #224	; 0xe0
 8000faa:	b299      	uxth	r1, r3
 8000fac:	1d3a      	adds	r2, r7, #4
 8000fae:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	480e      	ldr	r0, [pc, #56]	; (8000ff0 <main+0x248>)
 8000fb8:	f000 ff02 	bl	8001dc0 <HAL_I2C_Master_Receive>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	73bb      	strb	r3, [r7, #14]
	  if (ret != HAL_OK)
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <main+0x222>
	  {
		  Error_Handler();
 8000fc6:	f000 f875 	bl	80010b4 <Error_Handler>
	  }
	  low_byte = buf[0];
 8000fca:	793b      	ldrb	r3, [r7, #4]
 8000fcc:	733b      	strb	r3, [r7, #12]

	  distance_value = (((uint16_t)high_byte) << 8) + low_byte;
 8000fce:	7b7b      	ldrb	r3, [r7, #13]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	7b3b      	ldrb	r3, [r7, #12]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	4413      	add	r3, r2
 8000fdc:	817b      	strh	r3, [r7, #10]
	  printf("Range: %hu cm\r\n", distance_value);
 8000fde:	897b      	ldrh	r3, [r7, #10]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4806      	ldr	r0, [pc, #24]	; (8000ffc <main+0x254>)
 8000fe4:	f003 fb4c 	bl	8004680 <iprintf>
	  HAL_Delay(100);
 8000fe8:	2064      	movs	r0, #100	; 0x64
 8000fea:	f000 fa99 	bl	8001520 <HAL_Delay>
	  buf[0] = COMMAND_REG;
 8000fee:	e780      	b.n	8000ef2 <main+0x14a>
 8000ff0:	20000098 	.word	0x20000098
 8000ff4:	08005630 	.word	0x08005630
 8000ff8:	08005648 	.word	0x08005648
 8000ffc:	0800565c 	.word	0x0800565c
 8001000:	9374bc6a 	.word	0x9374bc6a
 8001004:	3fa60418 	.word	0x3fa60418
 8001008:	5c28f5c3 	.word	0x5c28f5c3
 800100c:	4037428f 	.word	0x4037428f

08001010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b096      	sub	sp, #88	; 0x58
 8001014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	2244      	movs	r2, #68	; 0x44
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f003 fb26 	bl	8004670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001024:	463b      	mov	r3, r7
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001032:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001036:	f001 fad7 	bl	80025e8 <HAL_PWREx_ControlVoltageScaling>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001040:	f000 f838 	bl	80010b4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001044:	2302      	movs	r3, #2
 8001046:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800104c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104e:	2310      	movs	r3, #16
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001052:	2302      	movs	r3, #2
 8001054:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001056:	2302      	movs	r3, #2
 8001058:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800105a:	2301      	movs	r3, #1
 800105c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800105e:	230a      	movs	r3, #10
 8001060:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001062:	2307      	movs	r3, #7
 8001064:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001066:	2302      	movs	r3, #2
 8001068:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800106a:	2302      	movs	r3, #2
 800106c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4618      	mov	r0, r3
 8001074:	f001 fb0e 	bl	8002694 <HAL_RCC_OscConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800107e:	f000 f819 	bl	80010b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001082:	230f      	movs	r3, #15
 8001084:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001086:	2303      	movs	r3, #3
 8001088:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001096:	463b      	mov	r3, r7
 8001098:	2104      	movs	r1, #4
 800109a:	4618      	mov	r0, r3
 800109c:	f001 fee0 	bl	8002e60 <HAL_RCC_ClockConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010a6:	f000 f805 	bl	80010b4 <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3758      	adds	r7, #88	; 0x58
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("ERROR!!!\r\n");
 80010bc:	480a      	ldr	r0, [pc, #40]	; (80010e8 <Error_Handler+0x34>)
 80010be:	f003 fb65 	bl	800478c <puts>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2120      	movs	r1, #32
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ca:	f000 fcdd 	bl	8001a88 <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 80010ce:	20fa      	movs	r0, #250	; 0xfa
 80010d0:	f000 fa26 	bl	8001520 <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2120      	movs	r1, #32
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f000 fcd4 	bl	8001a88 <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 80010e0:	20fa      	movs	r0, #250	; 0xfa
 80010e2:	f000 fa1d 	bl	8001520 <HAL_Delay>
	  printf("ERROR!!!\r\n");
 80010e6:	e7e9      	b.n	80010bc <Error_Handler+0x8>
 80010e8:	0800566c 	.word	0x0800566c

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_MspInit+0x44>)
 80010f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_MspInit+0x44>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6613      	str	r3, [r2, #96]	; 0x60
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_MspInit+0x44>)
 8001100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_MspInit+0x44>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_MspInit+0x44>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001114:	6593      	str	r3, [r2, #88]	; 0x58
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_MspInit+0x44>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <NMI_Handler+0x4>

0800113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001180:	f000 f9ae 	bl	80014e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	e00a      	b.n	80011b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800119a:	f3af 8000 	nop.w
 800119e:	4601      	mov	r1, r0
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	60ba      	str	r2, [r7, #8]
 80011a6:	b2ca      	uxtb	r2, r1
 80011a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	3301      	adds	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	dbf0      	blt.n	800119a <_read+0x12>
	}

return len;
 80011b8:	687b      	ldr	r3, [r7, #4]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
	return -1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ea:	605a      	str	r2, [r3, #4]
	return 0;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <_isatty>:

int _isatty(int file)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
	return 1;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
	return 0;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001234:	4a14      	ldr	r2, [pc, #80]	; (8001288 <_sbrk+0x5c>)
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <_sbrk+0x60>)
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <_sbrk+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d102      	bne.n	800124e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <_sbrk+0x64>)
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <_sbrk+0x68>)
 800124c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	429a      	cmp	r2, r3
 800125a:	d207      	bcs.n	800126c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800125c:	f003 f9de 	bl	800461c <__errno>
 8001260:	4603      	mov	r3, r0
 8001262:	220c      	movs	r2, #12
 8001264:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800126a:	e009      	b.n	8001280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <_sbrk+0x64>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	4a05      	ldr	r2, [pc, #20]	; (8001290 <_sbrk+0x64>)
 800127c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127e:	68fb      	ldr	r3, [r7, #12]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20018000 	.word	0x20018000
 800128c:	00000400 	.word	0x00000400
 8001290:	2000008c 	.word	0x2000008c
 8001294:	20000180 	.word	0x20000180

08001298 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <SystemInit+0x20>)
 800129e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012a2:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <SystemInit+0x20>)
 80012a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012c2:	4a15      	ldr	r2, [pc, #84]	; (8001318 <MX_USART2_UART_Init+0x5c>)
 80012c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_USART2_UART_Init+0x58>)
 8001300:	f002 fc70 	bl	8003be4 <HAL_UART_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800130a:	f7ff fed3 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200000e4 	.word	0x200000e4
 8001318:	40004400 	.word	0x40004400

0800131c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b0ac      	sub	sp, #176	; 0xb0
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2288      	movs	r2, #136	; 0x88
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f003 f997 	bl	8004670 <memset>
  if(uartHandle->Instance==USART2)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a21      	ldr	r2, [pc, #132]	; (80013cc <HAL_UART_MspInit+0xb0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d13b      	bne.n	80013c4 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800134c:	2302      	movs	r3, #2
 800134e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001350:	2300      	movs	r3, #0
 8001352:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4618      	mov	r0, r3
 800135a:	f001 ff87 	bl	800326c <HAL_RCCEx_PeriphCLKConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001364:	f7ff fea6 	bl	80010b4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <HAL_UART_MspInit+0xb4>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	4a18      	ldr	r2, [pc, #96]	; (80013d0 <HAL_UART_MspInit+0xb4>)
 800136e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001372:	6593      	str	r3, [r2, #88]	; 0x58
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_UART_MspInit+0xb4>)
 8001376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_UART_MspInit+0xb4>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001384:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <HAL_UART_MspInit+0xb4>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_UART_MspInit+0xb4>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001398:	230c      	movs	r3, #12
 800139a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013b0:	2307      	movs	r3, #7
 80013b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013ba:	4619      	mov	r1, r3
 80013bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c0:	f000 f9b8 	bl	8001734 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013c4:	bf00      	nop
 80013c6:	37b0      	adds	r7, #176	; 0xb0
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40004400 	.word	0x40004400
 80013d0:	40021000 	.word	0x40021000

080013d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800140c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d8:	f7ff ff5e 	bl	8001298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013dc:	480c      	ldr	r0, [pc, #48]	; (8001410 <LoopForever+0x6>)
  ldr r1, =_edata
 80013de:	490d      	ldr	r1, [pc, #52]	; (8001414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <LoopForever+0xe>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f4:	4c0a      	ldr	r4, [pc, #40]	; (8001420 <LoopForever+0x16>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001402:	f003 f911 	bl	8004628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001406:	f7ff fccf 	bl	8000da8 <main>

0800140a <LoopForever>:

LoopForever:
    b LoopForever
 800140a:	e7fe      	b.n	800140a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800140c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001418:	08005768 	.word	0x08005768
  ldr r2, =_sbss
 800141c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001420:	2000017c 	.word	0x2000017c

08001424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC1_2_IRQHandler>
	...

08001428 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_Init+0x3c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <HAL_Init+0x3c>)
 8001438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143e:	2003      	movs	r0, #3
 8001440:	f000 f944 	bl	80016cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001444:	2000      	movs	r0, #0
 8001446:	f000 f80f 	bl	8001468 <HAL_InitTick>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d002      	beq.n	8001456 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	71fb      	strb	r3, [r7, #7]
 8001454:	e001      	b.n	800145a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001456:	f7ff fe49 	bl	80010ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800145a:	79fb      	ldrb	r3, [r7, #7]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40022000 	.word	0x40022000

08001468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <HAL_InitTick+0x6c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d023      	beq.n	80014c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <HAL_InitTick+0x70>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <HAL_InitTick+0x6c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148a:	fbb3 f3f1 	udiv	r3, r3, r1
 800148e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f941 	bl	800171a <HAL_SYSTICK_Config>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10f      	bne.n	80014be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d809      	bhi.n	80014b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014ac:	f000 f919 	bl	80016e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014b0:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <HAL_InitTick+0x74>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e007      	b.n	80014c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	e004      	b.n	80014c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	e001      	b.n	80014c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000008 	.word	0x20000008
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000004 	.word	0x20000004

080014e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_IncTick+0x20>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_IncTick+0x24>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <HAL_IncTick+0x24>)
 80014f2:	6013      	str	r3, [r2, #0]
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000008 	.word	0x20000008
 8001504:	20000168 	.word	0x20000168

08001508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return uwTick;
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <HAL_GetTick+0x14>)
 800150e:	681b      	ldr	r3, [r3, #0]
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000168 	.word	0x20000168

08001520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001528:	f7ff ffee 	bl	8001508 <HAL_GetTick>
 800152c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001538:	d005      	beq.n	8001546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <HAL_Delay+0x44>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4413      	add	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001546:	bf00      	nop
 8001548:	f7ff ffde 	bl	8001508 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	429a      	cmp	r2, r3
 8001556:	d8f7      	bhi.n	8001548 <HAL_Delay+0x28>
  {
  }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000008 	.word	0x20000008

08001568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001584:	4013      	ands	r3, r2
 8001586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <__NVIC_GetPriorityGrouping+0x18>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 0307 	and.w	r3, r3, #7
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db0a      	blt.n	80015f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	490c      	ldr	r1, [pc, #48]	; (8001618 <__NVIC_SetPriority+0x4c>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	0112      	lsls	r2, r2, #4
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	440b      	add	r3, r1
 80015f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f4:	e00a      	b.n	800160c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4908      	ldr	r1, [pc, #32]	; (800161c <__NVIC_SetPriority+0x50>)
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	3b04      	subs	r3, #4
 8001604:	0112      	lsls	r2, r2, #4
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	440b      	add	r3, r1
 800160a:	761a      	strb	r2, [r3, #24]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000e100 	.word	0xe000e100
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f1c3 0307 	rsb	r3, r3, #7
 800163a:	2b04      	cmp	r3, #4
 800163c:	bf28      	it	cs
 800163e:	2304      	movcs	r3, #4
 8001640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3304      	adds	r3, #4
 8001646:	2b06      	cmp	r3, #6
 8001648:	d902      	bls.n	8001650 <NVIC_EncodePriority+0x30>
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3b03      	subs	r3, #3
 800164e:	e000      	b.n	8001652 <NVIC_EncodePriority+0x32>
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	401a      	ands	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001668:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43d9      	mvns	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	4313      	orrs	r3, r2
         );
}
 800167a:	4618      	mov	r0, r3
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001698:	d301      	bcc.n	800169e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169a:	2301      	movs	r3, #1
 800169c:	e00f      	b.n	80016be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <SysTick_Config+0x40>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a6:	210f      	movs	r1, #15
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016ac:	f7ff ff8e 	bl	80015cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <SysTick_Config+0x40>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <SysTick_Config+0x40>)
 80016b8:	2207      	movs	r2, #7
 80016ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ff47 	bl	8001568 <__NVIC_SetPriorityGrouping>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016f4:	f7ff ff5c 	bl	80015b0 <__NVIC_GetPriorityGrouping>
 80016f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	6978      	ldr	r0, [r7, #20]
 8001700:	f7ff ff8e 	bl	8001620 <NVIC_EncodePriority>
 8001704:	4602      	mov	r2, r0
 8001706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff5d 	bl	80015cc <__NVIC_SetPriority>
}
 8001712:	bf00      	nop
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ffb0 	bl	8001688 <SysTick_Config>
 8001728:	4603      	mov	r3, r0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001734:	b480      	push	{r7}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001742:	e17f      	b.n	8001a44 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2101      	movs	r1, #1
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	4013      	ands	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 8171 	beq.w	8001a3e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d005      	beq.n	8001774 <HAL_GPIO_Init+0x40>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d130      	bne.n	80017d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017aa:	2201      	movs	r2, #1
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	f003 0201 	and.w	r2, r3, #1
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d118      	bne.n	8001814 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017e8:	2201      	movs	r2, #1
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	08db      	lsrs	r3, r3, #3
 80017fe:	f003 0201 	and.w	r2, r3, #1
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b03      	cmp	r3, #3
 800181e:	d017      	beq.n	8001850 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d123      	bne.n	80018a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	08da      	lsrs	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3208      	adds	r2, #8
 8001864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001868:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	08da      	lsrs	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3208      	adds	r2, #8
 800189e:	6939      	ldr	r1, [r7, #16]
 80018a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0203 	and.w	r2, r3, #3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80ac 	beq.w	8001a3e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	4b5f      	ldr	r3, [pc, #380]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80018e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ea:	4a5e      	ldr	r2, [pc, #376]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6613      	str	r3, [r2, #96]	; 0x60
 80018f2:	4b5c      	ldr	r3, [pc, #368]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80018f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018fe:	4a5a      	ldr	r2, [pc, #360]	; (8001a68 <HAL_GPIO_Init+0x334>)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	3302      	adds	r3, #2
 8001906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	220f      	movs	r2, #15
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001928:	d025      	beq.n	8001976 <HAL_GPIO_Init+0x242>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4f      	ldr	r2, [pc, #316]	; (8001a6c <HAL_GPIO_Init+0x338>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d01f      	beq.n	8001972 <HAL_GPIO_Init+0x23e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4e      	ldr	r2, [pc, #312]	; (8001a70 <HAL_GPIO_Init+0x33c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d019      	beq.n	800196e <HAL_GPIO_Init+0x23a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4d      	ldr	r2, [pc, #308]	; (8001a74 <HAL_GPIO_Init+0x340>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d013      	beq.n	800196a <HAL_GPIO_Init+0x236>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4c      	ldr	r2, [pc, #304]	; (8001a78 <HAL_GPIO_Init+0x344>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d00d      	beq.n	8001966 <HAL_GPIO_Init+0x232>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4b      	ldr	r2, [pc, #300]	; (8001a7c <HAL_GPIO_Init+0x348>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d007      	beq.n	8001962 <HAL_GPIO_Init+0x22e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4a      	ldr	r2, [pc, #296]	; (8001a80 <HAL_GPIO_Init+0x34c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d101      	bne.n	800195e <HAL_GPIO_Init+0x22a>
 800195a:	2306      	movs	r3, #6
 800195c:	e00c      	b.n	8001978 <HAL_GPIO_Init+0x244>
 800195e:	2307      	movs	r3, #7
 8001960:	e00a      	b.n	8001978 <HAL_GPIO_Init+0x244>
 8001962:	2305      	movs	r3, #5
 8001964:	e008      	b.n	8001978 <HAL_GPIO_Init+0x244>
 8001966:	2304      	movs	r3, #4
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x244>
 800196a:	2303      	movs	r3, #3
 800196c:	e004      	b.n	8001978 <HAL_GPIO_Init+0x244>
 800196e:	2302      	movs	r3, #2
 8001970:	e002      	b.n	8001978 <HAL_GPIO_Init+0x244>
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_GPIO_Init+0x244>
 8001976:	2300      	movs	r3, #0
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	f002 0203 	and.w	r2, r2, #3
 800197e:	0092      	lsls	r2, r2, #2
 8001980:	4093      	lsls	r3, r2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001988:	4937      	ldr	r1, [pc, #220]	; (8001a68 <HAL_GPIO_Init+0x334>)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3302      	adds	r3, #2
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001996:	4b3b      	ldr	r3, [pc, #236]	; (8001a84 <HAL_GPIO_Init+0x350>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019ba:	4a32      	ldr	r2, [pc, #200]	; (8001a84 <HAL_GPIO_Init+0x350>)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019c0:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <HAL_GPIO_Init+0x350>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019e4:	4a27      	ldr	r2, [pc, #156]	; (8001a84 <HAL_GPIO_Init+0x350>)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019ea:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <HAL_GPIO_Init+0x350>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a0e:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <HAL_GPIO_Init+0x350>)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <HAL_GPIO_Init+0x350>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a38:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <HAL_GPIO_Init+0x350>)
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3301      	adds	r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f47f ae78 	bne.w	8001744 <HAL_GPIO_Init+0x10>
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	371c      	adds	r7, #28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010000 	.word	0x40010000
 8001a6c:	48000400 	.word	0x48000400
 8001a70:	48000800 	.word	0x48000800
 8001a74:	48000c00 	.word	0x48000c00
 8001a78:	48001000 	.word	0x48001000
 8001a7c:	48001400 	.word	0x48001400
 8001a80:	48001800 	.word	0x48001800
 8001a84:	40010400 	.word	0x40010400

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e081      	b.n	8001bce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d106      	bne.n	8001ae4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff f8ee 	bl	8000cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2224      	movs	r2, #36	; 0x24
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0201 	bic.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d107      	bne.n	8001b32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	e006      	b.n	8001b40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d104      	bne.n	8001b52 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691a      	ldr	r2, [r3, #16]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69d9      	ldr	r1, [r3, #28]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1a      	ldr	r2, [r3, #32]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	461a      	mov	r2, r3
 8001be4:	460b      	mov	r3, r1
 8001be6:	817b      	strh	r3, [r7, #10]
 8001be8:	4613      	mov	r3, r2
 8001bea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	f040 80da 	bne.w	8001dae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_I2C_Master_Transmit+0x30>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e0d3      	b.n	8001db0 <HAL_I2C_Master_Transmit+0x1d8>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c10:	f7ff fc7a 	bl	8001508 <HAL_GetTick>
 8001c14:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	2319      	movs	r3, #25
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 f9e6 	bl	8001ff4 <I2C_WaitOnFlagUntilTimeout>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e0be      	b.n	8001db0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2221      	movs	r2, #33	; 0x21
 8001c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	893a      	ldrh	r2, [r7, #8]
 8001c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	2bff      	cmp	r3, #255	; 0xff
 8001c62:	d90e      	bls.n	8001c82 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	22ff      	movs	r2, #255	; 0xff
 8001c68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	8979      	ldrh	r1, [r7, #10]
 8001c72:	4b51      	ldr	r3, [pc, #324]	; (8001db8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 fbdc 	bl	8002438 <I2C_TransferConfig>
 8001c80:	e06c      	b.n	8001d5c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	8979      	ldrh	r1, [r7, #10]
 8001c94:	4b48      	ldr	r3, [pc, #288]	; (8001db8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 fbcb 	bl	8002438 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001ca2:	e05b      	b.n	8001d5c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	6a39      	ldr	r1, [r7, #32]
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 f9e3 	bl	8002074 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e07b      	b.n	8001db0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	781a      	ldrb	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d034      	beq.n	8001d5c <HAL_I2C_Master_Transmit+0x184>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d130      	bne.n	8001d5c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	2200      	movs	r2, #0
 8001d02:	2180      	movs	r1, #128	; 0x80
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 f975 	bl	8001ff4 <I2C_WaitOnFlagUntilTimeout>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e04d      	b.n	8001db0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2bff      	cmp	r3, #255	; 0xff
 8001d1c:	d90e      	bls.n	8001d3c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	22ff      	movs	r2, #255	; 0xff
 8001d22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	8979      	ldrh	r1, [r7, #10]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 fb7f 	bl	8002438 <I2C_TransferConfig>
 8001d3a:	e00f      	b.n	8001d5c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	8979      	ldrh	r1, [r7, #10]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 fb6e 	bl	8002438 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d19e      	bne.n	8001ca4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	6a39      	ldr	r1, [r7, #32]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 f9c2 	bl	80020f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e01a      	b.n	8001db0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6859      	ldr	r1, [r3, #4]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_I2C_Master_Transmit+0x1e4>)
 8001d8e:	400b      	ands	r3, r1
 8001d90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2220      	movs	r2, #32
 8001d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	e000      	b.n	8001db0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001dae:	2302      	movs	r3, #2
  }
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	80002000 	.word	0x80002000
 8001dbc:	fe00e800 	.word	0xfe00e800

08001dc0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	460b      	mov	r3, r1
 8001dce:	817b      	strh	r3, [r7, #10]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	f040 80db 	bne.w	8001f98 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_I2C_Master_Receive+0x30>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e0d4      	b.n	8001f9a <HAL_I2C_Master_Receive+0x1da>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001df8:	f7ff fb86 	bl	8001508 <HAL_GetTick>
 8001dfc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	2319      	movs	r3, #25
 8001e04:	2201      	movs	r2, #1
 8001e06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 f8f2 	bl	8001ff4 <I2C_WaitOnFlagUntilTimeout>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e0bf      	b.n	8001f9a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2222      	movs	r2, #34	; 0x22
 8001e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2210      	movs	r2, #16
 8001e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	893a      	ldrh	r2, [r7, #8]
 8001e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	2bff      	cmp	r3, #255	; 0xff
 8001e4a:	d90e      	bls.n	8001e6a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	22ff      	movs	r2, #255	; 0xff
 8001e50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	8979      	ldrh	r1, [r7, #10]
 8001e5a:	4b52      	ldr	r3, [pc, #328]	; (8001fa4 <HAL_I2C_Master_Receive+0x1e4>)
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 fae8 	bl	8002438 <I2C_TransferConfig>
 8001e68:	e06d      	b.n	8001f46 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	8979      	ldrh	r1, [r7, #10]
 8001e7c:	4b49      	ldr	r3, [pc, #292]	; (8001fa4 <HAL_I2C_Master_Receive+0x1e4>)
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 fad7 	bl	8002438 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001e8a:	e05c      	b.n	8001f46 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	6a39      	ldr	r1, [r7, #32]
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f000 f96b 	bl	800216c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e07c      	b.n	8001f9a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d034      	beq.n	8001f46 <HAL_I2C_Master_Receive+0x186>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d130      	bne.n	8001f46 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	2200      	movs	r2, #0
 8001eec:	2180      	movs	r1, #128	; 0x80
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f880 	bl	8001ff4 <I2C_WaitOnFlagUntilTimeout>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e04d      	b.n	8001f9a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	2bff      	cmp	r3, #255	; 0xff
 8001f06:	d90e      	bls.n	8001f26 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	22ff      	movs	r2, #255	; 0xff
 8001f0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	8979      	ldrh	r1, [r7, #10]
 8001f16:	2300      	movs	r3, #0
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 fa8a 	bl	8002438 <I2C_TransferConfig>
 8001f24:	e00f      	b.n	8001f46 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	8979      	ldrh	r1, [r7, #10]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 fa79 	bl	8002438 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d19d      	bne.n	8001e8c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	6a39      	ldr	r1, [r7, #32]
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 f8cd 	bl	80020f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e01a      	b.n	8001f9a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6859      	ldr	r1, [r3, #4]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <HAL_I2C_Master_Receive+0x1e8>)
 8001f78:	400b      	ands	r3, r1
 8001f7a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	e000      	b.n	8001f9a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001f98:	2302      	movs	r3, #2
  }
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	80002400 	.word	0x80002400
 8001fa8:	fe00e800 	.word	0xfe00e800

08001fac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d103      	bne.n	8001fca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d007      	beq.n	8001fe8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699a      	ldr	r2, [r3, #24]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	619a      	str	r2, [r3, #24]
  }
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	4613      	mov	r3, r2
 8002002:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002004:	e022      	b.n	800204c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800200c:	d01e      	beq.n	800204c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200e:	f7ff fa7b 	bl	8001508 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d302      	bcc.n	8002024 <I2C_WaitOnFlagUntilTimeout+0x30>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d113      	bne.n	800204c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002028:	f043 0220 	orr.w	r2, r3, #32
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e00f      	b.n	800206c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	4013      	ands	r3, r2
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	429a      	cmp	r2, r3
 800205a:	bf0c      	ite	eq
 800205c:	2301      	moveq	r3, #1
 800205e:	2300      	movne	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	429a      	cmp	r2, r3
 8002068:	d0cd      	beq.n	8002006 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002080:	e02c      	b.n	80020dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f8ea 	bl	8002260 <I2C_IsErrorOccurred>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e02a      	b.n	80020ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800209c:	d01e      	beq.n	80020dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800209e:	f7ff fa33 	bl	8001508 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d302      	bcc.n	80020b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d113      	bne.n	80020dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b8:	f043 0220 	orr.w	r2, r3, #32
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e007      	b.n	80020ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d1cb      	bne.n	8002082 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002100:	e028      	b.n	8002154 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f8aa 	bl	8002260 <I2C_IsErrorOccurred>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e026      	b.n	8002164 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002116:	f7ff f9f7 	bl	8001508 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	429a      	cmp	r2, r3
 8002124:	d302      	bcc.n	800212c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d113      	bne.n	8002154 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002130:	f043 0220 	orr.w	r2, r3, #32
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e007      	b.n	8002164 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	2b20      	cmp	r3, #32
 8002160:	d1cf      	bne.n	8002102 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002178:	e064      	b.n	8002244 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 f86e 	bl	8002260 <I2C_IsErrorOccurred>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e062      	b.n	8002254 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	2b20      	cmp	r3, #32
 800219a:	d138      	bne.n	800220e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d105      	bne.n	80021b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e04e      	b.n	8002254 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b10      	cmp	r3, #16
 80021c2:	d107      	bne.n	80021d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2210      	movs	r2, #16
 80021ca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2204      	movs	r2, #4
 80021d0:	645a      	str	r2, [r3, #68]	; 0x44
 80021d2:	e002      	b.n	80021da <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2220      	movs	r2, #32
 80021e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6859      	ldr	r1, [r3, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80021ee:	400b      	ands	r3, r1
 80021f0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e022      	b.n	8002254 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220e:	f7ff f97b 	bl	8001508 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	429a      	cmp	r2, r3
 800221c:	d302      	bcc.n	8002224 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10f      	bne.n	8002244 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	f043 0220 	orr.w	r2, r3, #32
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e007      	b.n	8002254 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b04      	cmp	r3, #4
 8002250:	d193      	bne.n	800217a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	fe00e800 	.word	0xfe00e800

08002260 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	d075      	beq.n	8002378 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2210      	movs	r2, #16
 8002292:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002294:	e056      	b.n	8002344 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800229c:	d052      	beq.n	8002344 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800229e:	f7ff f933 	bl	8001508 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d302      	bcc.n	80022b4 <I2C_IsErrorOccurred+0x54>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d147      	bne.n	8002344 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022d6:	d12e      	bne.n	8002336 <I2C_IsErrorOccurred+0xd6>
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022de:	d02a      	beq.n	8002336 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80022e0:	7cfb      	ldrb	r3, [r7, #19]
 80022e2:	2b20      	cmp	r3, #32
 80022e4:	d027      	beq.n	8002336 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022f4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80022f6:	f7ff f907 	bl	8001508 <HAL_GetTick>
 80022fa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022fc:	e01b      	b.n	8002336 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80022fe:	f7ff f903 	bl	8001508 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b19      	cmp	r3, #25
 800230a:	d914      	bls.n	8002336 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002310:	f043 0220 	orr.w	r2, r3, #32
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b20      	cmp	r3, #32
 8002342:	d1dc      	bne.n	80022fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f003 0320 	and.w	r3, r3, #32
 800234e:	2b20      	cmp	r3, #32
 8002350:	d003      	beq.n	800235a <I2C_IsErrorOccurred+0xfa>
 8002352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002356:	2b00      	cmp	r3, #0
 8002358:	d09d      	beq.n	8002296 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800235a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800235e:	2b00      	cmp	r3, #0
 8002360:	d103      	bne.n	800236a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2220      	movs	r2, #32
 8002368:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	f043 0304 	orr.w	r3, r3, #4
 8002370:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00b      	beq.n	80023a2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800239a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00b      	beq.n	80023c4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	f043 0308 	orr.w	r3, r3, #8
 80023b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80023e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d01c      	beq.n	8002428 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f7ff fddc 	bl	8001fac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6859      	ldr	r1, [r3, #4]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <I2C_IsErrorOccurred+0x1d4>)
 8002400:	400b      	ands	r3, r1
 8002402:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	431a      	orrs	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800242c:	4618      	mov	r0, r3
 800242e:	3728      	adds	r7, #40	; 0x28
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	fe00e800 	.word	0xfe00e800

08002438 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	607b      	str	r3, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	817b      	strh	r3, [r7, #10]
 8002446:	4613      	mov	r3, r2
 8002448:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800244a:	897b      	ldrh	r3, [r7, #10]
 800244c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002450:	7a7b      	ldrb	r3, [r7, #9]
 8002452:	041b      	lsls	r3, r3, #16
 8002454:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002458:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	4313      	orrs	r3, r2
 8002462:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002466:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	0d5b      	lsrs	r3, r3, #21
 8002472:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <I2C_TransferConfig+0x60>)
 8002478:	430b      	orrs	r3, r1
 800247a:	43db      	mvns	r3, r3
 800247c:	ea02 0103 	and.w	r1, r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	430a      	orrs	r2, r1
 8002488:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800248a:	bf00      	nop
 800248c:	371c      	adds	r7, #28
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	03ff63ff 	.word	0x03ff63ff

0800249c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	d138      	bne.n	8002524 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024bc:	2302      	movs	r3, #2
 80024be:	e032      	b.n	8002526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2224      	movs	r2, #36	; 0x24
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0201 	bic.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6819      	ldr	r1, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	e000      	b.n	8002526 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002524:	2302      	movs	r3, #2
  }
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002532:	b480      	push	{r7}
 8002534:	b085      	sub	sp, #20
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b20      	cmp	r3, #32
 8002546:	d139      	bne.n	80025bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002552:	2302      	movs	r3, #2
 8002554:	e033      	b.n	80025be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2224      	movs	r2, #36	; 0x24
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002584:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	e000      	b.n	80025be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025bc:	2302      	movs	r3, #2
  }
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40007000 	.word	0x40007000

080025e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025f6:	d130      	bne.n	800265a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025f8:	4b23      	ldr	r3, [pc, #140]	; (8002688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002604:	d038      	beq.n	8002678 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002606:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800260e:	4a1e      	ldr	r2, [pc, #120]	; (8002688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002610:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002614:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002616:	4b1d      	ldr	r3, [pc, #116]	; (800268c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2232      	movs	r2, #50	; 0x32
 800261c:	fb02 f303 	mul.w	r3, r2, r3
 8002620:	4a1b      	ldr	r2, [pc, #108]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	0c9b      	lsrs	r3, r3, #18
 8002628:	3301      	adds	r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800262c:	e002      	b.n	8002634 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3b01      	subs	r3, #1
 8002632:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002640:	d102      	bne.n	8002648 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f2      	bne.n	800262e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002654:	d110      	bne.n	8002678 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e00f      	b.n	800267a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002666:	d007      	beq.n	8002678 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002670:	4a05      	ldr	r2, [pc, #20]	; (8002688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002676:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40007000 	.word	0x40007000
 800268c:	20000000 	.word	0x20000000
 8002690:	431bde83 	.word	0x431bde83

08002694 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e3d4      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a6:	4ba1      	ldr	r3, [pc, #644]	; (800292c <HAL_RCC_OscConfig+0x298>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026b0:	4b9e      	ldr	r3, [pc, #632]	; (800292c <HAL_RCC_OscConfig+0x298>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80e4 	beq.w	8002890 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d007      	beq.n	80026de <HAL_RCC_OscConfig+0x4a>
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	2b0c      	cmp	r3, #12
 80026d2:	f040 808b 	bne.w	80027ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	f040 8087 	bne.w	80027ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026de:	4b93      	ldr	r3, [pc, #588]	; (800292c <HAL_RCC_OscConfig+0x298>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_RCC_OscConfig+0x62>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e3ac      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1a      	ldr	r2, [r3, #32]
 80026fa:	4b8c      	ldr	r3, [pc, #560]	; (800292c <HAL_RCC_OscConfig+0x298>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d004      	beq.n	8002710 <HAL_RCC_OscConfig+0x7c>
 8002706:	4b89      	ldr	r3, [pc, #548]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800270e:	e005      	b.n	800271c <HAL_RCC_OscConfig+0x88>
 8002710:	4b86      	ldr	r3, [pc, #536]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800271c:	4293      	cmp	r3, r2
 800271e:	d223      	bcs.n	8002768 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fd41 	bl	80031ac <RCC_SetFlashLatencyFromMSIRange>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e38d      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002734:	4b7d      	ldr	r3, [pc, #500]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a7c      	ldr	r2, [pc, #496]	; (800292c <HAL_RCC_OscConfig+0x298>)
 800273a:	f043 0308 	orr.w	r3, r3, #8
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	4b7a      	ldr	r3, [pc, #488]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	4977      	ldr	r1, [pc, #476]	; (800292c <HAL_RCC_OscConfig+0x298>)
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002752:	4b76      	ldr	r3, [pc, #472]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	4972      	ldr	r1, [pc, #456]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002762:	4313      	orrs	r3, r2
 8002764:	604b      	str	r3, [r1, #4]
 8002766:	e025      	b.n	80027b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002768:	4b70      	ldr	r3, [pc, #448]	; (800292c <HAL_RCC_OscConfig+0x298>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a6f      	ldr	r2, [pc, #444]	; (800292c <HAL_RCC_OscConfig+0x298>)
 800276e:	f043 0308 	orr.w	r3, r3, #8
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	4b6d      	ldr	r3, [pc, #436]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	496a      	ldr	r1, [pc, #424]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002786:	4b69      	ldr	r3, [pc, #420]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	4965      	ldr	r1, [pc, #404]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d109      	bne.n	80027b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fd01 	bl	80031ac <RCC_SetFlashLatencyFromMSIRange>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e34d      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027b4:	f000 fc36 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b5c      	ldr	r3, [pc, #368]	; (800292c <HAL_RCC_OscConfig+0x298>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	091b      	lsrs	r3, r3, #4
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	495a      	ldr	r1, [pc, #360]	; (8002930 <HAL_RCC_OscConfig+0x29c>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
 80027d0:	4a58      	ldr	r2, [pc, #352]	; (8002934 <HAL_RCC_OscConfig+0x2a0>)
 80027d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027d4:	4b58      	ldr	r3, [pc, #352]	; (8002938 <HAL_RCC_OscConfig+0x2a4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fe45 	bl	8001468 <HAL_InitTick>
 80027de:	4603      	mov	r3, r0
 80027e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d052      	beq.n	800288e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	e331      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d032      	beq.n	800285a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027f4:	4b4d      	ldr	r3, [pc, #308]	; (800292c <HAL_RCC_OscConfig+0x298>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a4c      	ldr	r2, [pc, #304]	; (800292c <HAL_RCC_OscConfig+0x298>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002800:	f7fe fe82 	bl	8001508 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002808:	f7fe fe7e 	bl	8001508 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e31a      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800281a:	4b44      	ldr	r3, [pc, #272]	; (800292c <HAL_RCC_OscConfig+0x298>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002826:	4b41      	ldr	r3, [pc, #260]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a40      	ldr	r2, [pc, #256]	; (800292c <HAL_RCC_OscConfig+0x298>)
 800282c:	f043 0308 	orr.w	r3, r3, #8
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b3e      	ldr	r3, [pc, #248]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	493b      	ldr	r1, [pc, #236]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002840:	4313      	orrs	r3, r2
 8002842:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002844:	4b39      	ldr	r3, [pc, #228]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	4936      	ldr	r1, [pc, #216]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
 8002858:	e01a      	b.n	8002890 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800285a:	4b34      	ldr	r3, [pc, #208]	; (800292c <HAL_RCC_OscConfig+0x298>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a33      	ldr	r2, [pc, #204]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002866:	f7fe fe4f 	bl	8001508 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800286e:	f7fe fe4b 	bl	8001508 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e2e7      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002880:	4b2a      	ldr	r3, [pc, #168]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f0      	bne.n	800286e <HAL_RCC_OscConfig+0x1da>
 800288c:	e000      	b.n	8002890 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800288e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d074      	beq.n	8002986 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d005      	beq.n	80028ae <HAL_RCC_OscConfig+0x21a>
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2b0c      	cmp	r3, #12
 80028a6:	d10e      	bne.n	80028c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d10b      	bne.n	80028c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ae:	4b1f      	ldr	r3, [pc, #124]	; (800292c <HAL_RCC_OscConfig+0x298>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d064      	beq.n	8002984 <HAL_RCC_OscConfig+0x2f0>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d160      	bne.n	8002984 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e2c4      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ce:	d106      	bne.n	80028de <HAL_RCC_OscConfig+0x24a>
 80028d0:	4b16      	ldr	r3, [pc, #88]	; (800292c <HAL_RCC_OscConfig+0x298>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a15      	ldr	r2, [pc, #84]	; (800292c <HAL_RCC_OscConfig+0x298>)
 80028d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	e01d      	b.n	800291a <HAL_RCC_OscConfig+0x286>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e6:	d10c      	bne.n	8002902 <HAL_RCC_OscConfig+0x26e>
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_RCC_OscConfig+0x298>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0f      	ldr	r2, [pc, #60]	; (800292c <HAL_RCC_OscConfig+0x298>)
 80028ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	4b0d      	ldr	r3, [pc, #52]	; (800292c <HAL_RCC_OscConfig+0x298>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0c      	ldr	r2, [pc, #48]	; (800292c <HAL_RCC_OscConfig+0x298>)
 80028fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	e00b      	b.n	800291a <HAL_RCC_OscConfig+0x286>
 8002902:	4b0a      	ldr	r3, [pc, #40]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a09      	ldr	r2, [pc, #36]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a06      	ldr	r2, [pc, #24]	; (800292c <HAL_RCC_OscConfig+0x298>)
 8002914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002918:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d01c      	beq.n	800295c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002922:	f7fe fdf1 	bl	8001508 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002928:	e011      	b.n	800294e <HAL_RCC_OscConfig+0x2ba>
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000
 8002930:	08005678 	.word	0x08005678
 8002934:	20000000 	.word	0x20000000
 8002938:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800293c:	f7fe fde4 	bl	8001508 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e280      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800294e:	4baf      	ldr	r3, [pc, #700]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x2a8>
 800295a:	e014      	b.n	8002986 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7fe fdd4 	bl	8001508 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002964:	f7fe fdd0 	bl	8001508 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	; 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e26c      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002976:	4ba5      	ldr	r3, [pc, #660]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x2d0>
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d060      	beq.n	8002a54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2b04      	cmp	r3, #4
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_OscConfig+0x310>
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2b0c      	cmp	r3, #12
 800299c:	d119      	bne.n	80029d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d116      	bne.n	80029d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029a4:	4b99      	ldr	r3, [pc, #612]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_OscConfig+0x328>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e249      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029bc:	4b93      	ldr	r3, [pc, #588]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	061b      	lsls	r3, r3, #24
 80029ca:	4990      	ldr	r1, [pc, #576]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d0:	e040      	b.n	8002a54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d023      	beq.n	8002a22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029da:	4b8c      	ldr	r3, [pc, #560]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a8b      	ldr	r2, [pc, #556]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 80029e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e6:	f7fe fd8f 	bl	8001508 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ee:	f7fe fd8b 	bl	8001508 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e227      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a00:	4b82      	ldr	r3, [pc, #520]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0c:	4b7f      	ldr	r3, [pc, #508]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	061b      	lsls	r3, r3, #24
 8002a1a:	497c      	ldr	r1, [pc, #496]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
 8002a20:	e018      	b.n	8002a54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a22:	4b7a      	ldr	r3, [pc, #488]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a79      	ldr	r2, [pc, #484]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2e:	f7fe fd6b 	bl	8001508 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a36:	f7fe fd67 	bl	8001508 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e203      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a48:	4b70      	ldr	r3, [pc, #448]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f0      	bne.n	8002a36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d03c      	beq.n	8002ada <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d01c      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a68:	4b68      	ldr	r3, [pc, #416]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a6e:	4a67      	ldr	r2, [pc, #412]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7fe fd46 	bl	8001508 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a80:	f7fe fd42 	bl	8001508 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e1de      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a92:	4b5e      	ldr	r3, [pc, #376]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ef      	beq.n	8002a80 <HAL_RCC_OscConfig+0x3ec>
 8002aa0:	e01b      	b.n	8002ada <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa2:	4b5a      	ldr	r3, [pc, #360]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa8:	4a58      	ldr	r2, [pc, #352]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab2:	f7fe fd29 	bl	8001508 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aba:	f7fe fd25 	bl	8001508 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e1c1      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002acc:	4b4f      	ldr	r3, [pc, #316]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1ef      	bne.n	8002aba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 80a6 	beq.w	8002c34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002aec:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10d      	bne.n	8002b14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af8:	4b44      	ldr	r3, [pc, #272]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afc:	4a43      	ldr	r2, [pc, #268]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b02:	6593      	str	r3, [r2, #88]	; 0x58
 8002b04:	4b41      	ldr	r3, [pc, #260]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b10:	2301      	movs	r3, #1
 8002b12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b14:	4b3e      	ldr	r3, [pc, #248]	; (8002c10 <HAL_RCC_OscConfig+0x57c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d118      	bne.n	8002b52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b20:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <HAL_RCC_OscConfig+0x57c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a3a      	ldr	r2, [pc, #232]	; (8002c10 <HAL_RCC_OscConfig+0x57c>)
 8002b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2c:	f7fe fcec 	bl	8001508 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b34:	f7fe fce8 	bl	8001508 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e184      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b46:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <HAL_RCC_OscConfig+0x57c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d108      	bne.n	8002b6c <HAL_RCC_OscConfig+0x4d8>
 8002b5a:	4b2c      	ldr	r3, [pc, #176]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b60:	4a2a      	ldr	r2, [pc, #168]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b6a:	e024      	b.n	8002bb6 <HAL_RCC_OscConfig+0x522>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d110      	bne.n	8002b96 <HAL_RCC_OscConfig+0x502>
 8002b74:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	4a24      	ldr	r2, [pc, #144]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002b7c:	f043 0304 	orr.w	r3, r3, #4
 8002b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b84:	4b21      	ldr	r3, [pc, #132]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8a:	4a20      	ldr	r2, [pc, #128]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b94:	e00f      	b.n	8002bb6 <HAL_RCC_OscConfig+0x522>
 8002b96:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9c:	4a1b      	ldr	r2, [pc, #108]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ba6:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bac:	4a17      	ldr	r2, [pc, #92]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002bae:	f023 0304 	bic.w	r3, r3, #4
 8002bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d016      	beq.n	8002bec <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbe:	f7fe fca3 	bl	8001508 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc4:	e00a      	b.n	8002bdc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc6:	f7fe fc9f 	bl	8001508 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e139      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_RCC_OscConfig+0x578>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0ed      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x532>
 8002bea:	e01a      	b.n	8002c22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bec:	f7fe fc8c 	bl	8001508 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bf2:	e00f      	b.n	8002c14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf4:	f7fe fc88 	bl	8001508 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d906      	bls.n	8002c14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e122      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c14:	4b90      	ldr	r3, [pc, #576]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1e8      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c22:	7ffb      	ldrb	r3, [r7, #31]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d105      	bne.n	8002c34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c28:	4b8b      	ldr	r3, [pc, #556]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	4a8a      	ldr	r2, [pc, #552]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c32:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8108 	beq.w	8002e4e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	f040 80d0 	bne.w	8002de8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c48:	4b83      	ldr	r3, [pc, #524]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f003 0203 	and.w	r2, r3, #3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d130      	bne.n	8002cbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	3b01      	subs	r3, #1
 8002c68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d127      	bne.n	8002cbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d11f      	bne.n	8002cbe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c88:	2a07      	cmp	r2, #7
 8002c8a:	bf14      	ite	ne
 8002c8c:	2201      	movne	r2, #1
 8002c8e:	2200      	moveq	r2, #0
 8002c90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d113      	bne.n	8002cbe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca0:	085b      	lsrs	r3, r3, #1
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d109      	bne.n	8002cbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d06e      	beq.n	8002d9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	2b0c      	cmp	r3, #12
 8002cc2:	d069      	beq.n	8002d98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cc4:	4b64      	ldr	r3, [pc, #400]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d105      	bne.n	8002cdc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002cd0:	4b61      	ldr	r3, [pc, #388]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0b7      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ce0:	4b5d      	ldr	r3, [pc, #372]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a5c      	ldr	r2, [pc, #368]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cec:	f7fe fc0c 	bl	8001508 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe fc08 	bl	8001508 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e0a4      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d06:	4b54      	ldr	r3, [pc, #336]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d12:	4b51      	ldr	r3, [pc, #324]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	4b51      	ldr	r3, [pc, #324]	; (8002e5c <HAL_RCC_OscConfig+0x7c8>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d22:	3a01      	subs	r2, #1
 8002d24:	0112      	lsls	r2, r2, #4
 8002d26:	4311      	orrs	r1, r2
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d2c:	0212      	lsls	r2, r2, #8
 8002d2e:	4311      	orrs	r1, r2
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d34:	0852      	lsrs	r2, r2, #1
 8002d36:	3a01      	subs	r2, #1
 8002d38:	0552      	lsls	r2, r2, #21
 8002d3a:	4311      	orrs	r1, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d40:	0852      	lsrs	r2, r2, #1
 8002d42:	3a01      	subs	r2, #1
 8002d44:	0652      	lsls	r2, r2, #25
 8002d46:	4311      	orrs	r1, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d4c:	0912      	lsrs	r2, r2, #4
 8002d4e:	0452      	lsls	r2, r2, #17
 8002d50:	430a      	orrs	r2, r1
 8002d52:	4941      	ldr	r1, [pc, #260]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d58:	4b3f      	ldr	r3, [pc, #252]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a3e      	ldr	r2, [pc, #248]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d64:	4b3c      	ldr	r3, [pc, #240]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4a3b      	ldr	r2, [pc, #236]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d70:	f7fe fbca 	bl	8001508 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe fbc6 	bl	8001508 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e062      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8a:	4b33      	ldr	r3, [pc, #204]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d96:	e05a      	b.n	8002e4e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e059      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d9c:	4b2e      	ldr	r3, [pc, #184]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d152      	bne.n	8002e4e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002da8:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a2a      	ldr	r2, [pc, #168]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002db2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002db4:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	4a27      	ldr	r2, [pc, #156]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dc0:	f7fe fba2 	bl	8001508 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe fb9e 	bl	8001508 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e03a      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dda:	4b1f      	ldr	r3, [pc, #124]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x734>
 8002de6:	e032      	b.n	8002e4e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	d02d      	beq.n	8002e4a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dee:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a19      	ldr	r2, [pc, #100]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002df4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002dfa:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d105      	bne.n	8002e12 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e06:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002e0c:	f023 0303 	bic.w	r3, r3, #3
 8002e10:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e12:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	4a10      	ldr	r2, [pc, #64]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002e18:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e20:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7fe fb71 	bl	8001508 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7fe fb6d 	bl	8001508 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e009      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_RCC_OscConfig+0x7c4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f0      	bne.n	8002e2a <HAL_RCC_OscConfig+0x796>
 8002e48:	e001      	b.n	8002e4e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3720      	adds	r7, #32
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	f99d808c 	.word	0xf99d808c

08002e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0c8      	b.n	8003006 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e74:	4b66      	ldr	r3, [pc, #408]	; (8003010 <HAL_RCC_ClockConfig+0x1b0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d910      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b63      	ldr	r3, [pc, #396]	; (8003010 <HAL_RCC_ClockConfig+0x1b0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 0207 	bic.w	r2, r3, #7
 8002e8a:	4961      	ldr	r1, [pc, #388]	; (8003010 <HAL_RCC_ClockConfig+0x1b0>)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b5f      	ldr	r3, [pc, #380]	; (8003010 <HAL_RCC_ClockConfig+0x1b0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0b0      	b.n	8003006 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d04c      	beq.n	8002f4a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d107      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb8:	4b56      	ldr	r3, [pc, #344]	; (8003014 <HAL_RCC_ClockConfig+0x1b4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d121      	bne.n	8002f08 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e09e      	b.n	8003006 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d107      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ed0:	4b50      	ldr	r3, [pc, #320]	; (8003014 <HAL_RCC_ClockConfig+0x1b4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d115      	bne.n	8002f08 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e092      	b.n	8003006 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d107      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ee8:	4b4a      	ldr	r3, [pc, #296]	; (8003014 <HAL_RCC_ClockConfig+0x1b4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d109      	bne.n	8002f08 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e086      	b.n	8003006 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef8:	4b46      	ldr	r3, [pc, #280]	; (8003014 <HAL_RCC_ClockConfig+0x1b4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e07e      	b.n	8003006 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f08:	4b42      	ldr	r3, [pc, #264]	; (8003014 <HAL_RCC_ClockConfig+0x1b4>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f023 0203 	bic.w	r2, r3, #3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	493f      	ldr	r1, [pc, #252]	; (8003014 <HAL_RCC_ClockConfig+0x1b4>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1a:	f7fe faf5 	bl	8001508 <HAL_GetTick>
 8002f1e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f22:	f7fe faf1 	bl	8001508 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e066      	b.n	8003006 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f38:	4b36      	ldr	r3, [pc, #216]	; (8003014 <HAL_RCC_ClockConfig+0x1b4>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 020c 	and.w	r2, r3, #12
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d1eb      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f56:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <HAL_RCC_ClockConfig+0x1b4>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	492c      	ldr	r1, [pc, #176]	; (8003014 <HAL_RCC_ClockConfig+0x1b4>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f68:	4b29      	ldr	r3, [pc, #164]	; (8003010 <HAL_RCC_ClockConfig+0x1b0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d210      	bcs.n	8002f98 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b26      	ldr	r3, [pc, #152]	; (8003010 <HAL_RCC_ClockConfig+0x1b0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 0207 	bic.w	r2, r3, #7
 8002f7e:	4924      	ldr	r1, [pc, #144]	; (8003010 <HAL_RCC_ClockConfig+0x1b0>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b22      	ldr	r3, [pc, #136]	; (8003010 <HAL_RCC_ClockConfig+0x1b0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e036      	b.n	8003006 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <HAL_RCC_ClockConfig+0x1b4>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4918      	ldr	r1, [pc, #96]	; (8003014 <HAL_RCC_ClockConfig+0x1b4>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fc2:	4b14      	ldr	r3, [pc, #80]	; (8003014 <HAL_RCC_ClockConfig+0x1b4>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4910      	ldr	r1, [pc, #64]	; (8003014 <HAL_RCC_ClockConfig+0x1b4>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fd6:	f000 f825 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <HAL_RCC_ClockConfig+0x1b4>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	490c      	ldr	r1, [pc, #48]	; (8003018 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	5ccb      	ldrb	r3, [r1, r3]
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	; (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe fa34 	bl	8001468 <HAL_InitTick>
 8003000:	4603      	mov	r3, r0
 8003002:	72fb      	strb	r3, [r7, #11]

  return status;
 8003004:	7afb      	ldrb	r3, [r7, #11]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40022000 	.word	0x40022000
 8003014:	40021000 	.word	0x40021000
 8003018:	08005678 	.word	0x08005678
 800301c:	20000000 	.word	0x20000000
 8003020:	20000004 	.word	0x20000004

08003024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003024:	b480      	push	{r7}
 8003026:	b089      	sub	sp, #36	; 0x24
 8003028:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	2300      	movs	r3, #0
 8003030:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003032:	4b3e      	ldr	r3, [pc, #248]	; (800312c <HAL_RCC_GetSysClockFreq+0x108>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800303c:	4b3b      	ldr	r3, [pc, #236]	; (800312c <HAL_RCC_GetSysClockFreq+0x108>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0x34>
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	2b0c      	cmp	r3, #12
 8003050:	d121      	bne.n	8003096 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d11e      	bne.n	8003096 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003058:	4b34      	ldr	r3, [pc, #208]	; (800312c <HAL_RCC_GetSysClockFreq+0x108>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	2b00      	cmp	r3, #0
 8003062:	d107      	bne.n	8003074 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003064:	4b31      	ldr	r3, [pc, #196]	; (800312c <HAL_RCC_GetSysClockFreq+0x108>)
 8003066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800306a:	0a1b      	lsrs	r3, r3, #8
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	e005      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003074:	4b2d      	ldr	r3, [pc, #180]	; (800312c <HAL_RCC_GetSysClockFreq+0x108>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003080:	4a2b      	ldr	r2, [pc, #172]	; (8003130 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003088:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10d      	bne.n	80030ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	2b04      	cmp	r3, #4
 800309a:	d102      	bne.n	80030a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800309c:	4b25      	ldr	r3, [pc, #148]	; (8003134 <HAL_RCC_GetSysClockFreq+0x110>)
 800309e:	61bb      	str	r3, [r7, #24]
 80030a0:	e004      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030a8:	4b23      	ldr	r3, [pc, #140]	; (8003138 <HAL_RCC_GetSysClockFreq+0x114>)
 80030aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	2b0c      	cmp	r3, #12
 80030b0:	d134      	bne.n	800311c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030b2:	4b1e      	ldr	r3, [pc, #120]	; (800312c <HAL_RCC_GetSysClockFreq+0x108>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d003      	beq.n	80030ca <HAL_RCC_GetSysClockFreq+0xa6>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d003      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0xac>
 80030c8:	e005      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030ca:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <HAL_RCC_GetSysClockFreq+0x110>)
 80030cc:	617b      	str	r3, [r7, #20]
      break;
 80030ce:	e005      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_RCC_GetSysClockFreq+0x114>)
 80030d2:	617b      	str	r3, [r7, #20]
      break;
 80030d4:	e002      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	617b      	str	r3, [r7, #20]
      break;
 80030da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030dc:	4b13      	ldr	r3, [pc, #76]	; (800312c <HAL_RCC_GetSysClockFreq+0x108>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	3301      	adds	r3, #1
 80030e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030ea:	4b10      	ldr	r3, [pc, #64]	; (800312c <HAL_RCC_GetSysClockFreq+0x108>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	0a1b      	lsrs	r3, r3, #8
 80030f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	fb02 f203 	mul.w	r2, r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_RCC_GetSysClockFreq+0x108>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	0e5b      	lsrs	r3, r3, #25
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	3301      	adds	r3, #1
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	fbb2 f3f3 	udiv	r3, r2, r3
 800311a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800311c:	69bb      	ldr	r3, [r7, #24]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3724      	adds	r7, #36	; 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	08005690 	.word	0x08005690
 8003134:	00f42400 	.word	0x00f42400
 8003138:	007a1200 	.word	0x007a1200

0800313c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <HAL_RCC_GetHCLKFreq+0x14>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000000 	.word	0x20000000

08003154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003158:	f7ff fff0 	bl	800313c <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4904      	ldr	r1, [pc, #16]	; (800317c <HAL_RCC_GetPCLK1Freq+0x28>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003174:	4618      	mov	r0, r3
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000
 800317c:	08005688 	.word	0x08005688

08003180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003184:	f7ff ffda 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	0adb      	lsrs	r3, r3, #11
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4904      	ldr	r1, [pc, #16]	; (80031a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40021000 	.word	0x40021000
 80031a8:	08005688 	.word	0x08005688

080031ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031b4:	2300      	movs	r3, #0
 80031b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031b8:	4b2a      	ldr	r3, [pc, #168]	; (8003264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031c4:	f7ff fa02 	bl	80025cc <HAL_PWREx_GetVoltageRange>
 80031c8:	6178      	str	r0, [r7, #20]
 80031ca:	e014      	b.n	80031f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031cc:	4b25      	ldr	r3, [pc, #148]	; (8003264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d0:	4a24      	ldr	r2, [pc, #144]	; (8003264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d6:	6593      	str	r3, [r2, #88]	; 0x58
 80031d8:	4b22      	ldr	r3, [pc, #136]	; (8003264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031e4:	f7ff f9f2 	bl	80025cc <HAL_PWREx_GetVoltageRange>
 80031e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031ea:	4b1e      	ldr	r3, [pc, #120]	; (8003264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ee:	4a1d      	ldr	r2, [pc, #116]	; (8003264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031fc:	d10b      	bne.n	8003216 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b80      	cmp	r3, #128	; 0x80
 8003202:	d919      	bls.n	8003238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2ba0      	cmp	r3, #160	; 0xa0
 8003208:	d902      	bls.n	8003210 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800320a:	2302      	movs	r3, #2
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	e013      	b.n	8003238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003210:	2301      	movs	r3, #1
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	e010      	b.n	8003238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b80      	cmp	r3, #128	; 0x80
 800321a:	d902      	bls.n	8003222 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800321c:	2303      	movs	r3, #3
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	e00a      	b.n	8003238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b80      	cmp	r3, #128	; 0x80
 8003226:	d102      	bne.n	800322e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003228:	2302      	movs	r3, #2
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	e004      	b.n	8003238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b70      	cmp	r3, #112	; 0x70
 8003232:	d101      	bne.n	8003238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003234:	2301      	movs	r3, #1
 8003236:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f023 0207 	bic.w	r2, r3, #7
 8003240:	4909      	ldr	r1, [pc, #36]	; (8003268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003248:	4b07      	ldr	r3, [pc, #28]	; (8003268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	429a      	cmp	r2, r3
 8003254:	d001      	beq.n	800325a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40021000 	.word	0x40021000
 8003268:	40022000 	.word	0x40022000

0800326c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003274:	2300      	movs	r3, #0
 8003276:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003278:	2300      	movs	r3, #0
 800327a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003284:	2b00      	cmp	r3, #0
 8003286:	d041      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800328c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003290:	d02a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003292:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003296:	d824      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003298:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800329c:	d008      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800329e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032a2:	d81e      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ac:	d010      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032ae:	e018      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032b0:	4b86      	ldr	r3, [pc, #536]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4a85      	ldr	r2, [pc, #532]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032bc:	e015      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3304      	adds	r3, #4
 80032c2:	2100      	movs	r1, #0
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fabb 	bl	8003840 <RCCEx_PLLSAI1_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032ce:	e00c      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3320      	adds	r3, #32
 80032d4:	2100      	movs	r1, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fba6 	bl	8003a28 <RCCEx_PLLSAI2_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032e0:	e003      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	74fb      	strb	r3, [r7, #19]
      break;
 80032e6:	e000      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80032e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ea:	7cfb      	ldrb	r3, [r7, #19]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10b      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032f0:	4b76      	ldr	r3, [pc, #472]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032fe:	4973      	ldr	r1, [pc, #460]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003306:	e001      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d041      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800331c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003320:	d02a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003322:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003326:	d824      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003328:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800332c:	d008      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800332e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003332:	d81e      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800333c:	d010      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800333e:	e018      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003340:	4b62      	ldr	r3, [pc, #392]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4a61      	ldr	r2, [pc, #388]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800334c:	e015      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3304      	adds	r3, #4
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fa73 	bl	8003840 <RCCEx_PLLSAI1_Config>
 800335a:	4603      	mov	r3, r0
 800335c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800335e:	e00c      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3320      	adds	r3, #32
 8003364:	2100      	movs	r1, #0
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fb5e 	bl	8003a28 <RCCEx_PLLSAI2_Config>
 800336c:	4603      	mov	r3, r0
 800336e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003370:	e003      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	74fb      	strb	r3, [r7, #19]
      break;
 8003376:	e000      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800337a:	7cfb      	ldrb	r3, [r7, #19]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10b      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003380:	4b52      	ldr	r3, [pc, #328]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800338e:	494f      	ldr	r1, [pc, #316]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003396:	e001      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003398:	7cfb      	ldrb	r3, [r7, #19]
 800339a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80a0 	beq.w	80034ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033aa:	2300      	movs	r3, #0
 80033ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033ae:	4b47      	ldr	r3, [pc, #284]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80033be:	2300      	movs	r3, #0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00d      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c4:	4b41      	ldr	r3, [pc, #260]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c8:	4a40      	ldr	r2, [pc, #256]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ce:	6593      	str	r3, [r2, #88]	; 0x58
 80033d0:	4b3e      	ldr	r3, [pc, #248]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033dc:	2301      	movs	r3, #1
 80033de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033e0:	4b3b      	ldr	r3, [pc, #236]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a3a      	ldr	r2, [pc, #232]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033ec:	f7fe f88c 	bl	8001508 <HAL_GetTick>
 80033f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033f2:	e009      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f4:	f7fe f888 	bl	8001508 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d902      	bls.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	74fb      	strb	r3, [r7, #19]
        break;
 8003406:	e005      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003408:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ef      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d15c      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800341a:	4b2c      	ldr	r3, [pc, #176]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003424:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01f      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	429a      	cmp	r2, r3
 8003436:	d019      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003438:	4b24      	ldr	r3, [pc, #144]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003442:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003444:	4b21      	ldr	r3, [pc, #132]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344a:	4a20      	ldr	r2, [pc, #128]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003454:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345a:	4a1c      	ldr	r2, [pc, #112]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003464:	4a19      	ldr	r2, [pc, #100]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d016      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003476:	f7fe f847 	bl	8001508 <HAL_GetTick>
 800347a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347c:	e00b      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347e:	f7fe f843 	bl	8001508 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f241 3288 	movw	r2, #5000	; 0x1388
 800348c:	4293      	cmp	r3, r2
 800348e:	d902      	bls.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	74fb      	strb	r3, [r7, #19]
            break;
 8003494:	e006      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003496:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0ec      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034aa:	4b08      	ldr	r3, [pc, #32]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ba:	4904      	ldr	r1, [pc, #16]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034c2:	e009      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	74bb      	strb	r3, [r7, #18]
 80034c8:	e006      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80034ca:	bf00      	nop
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034d8:	7c7b      	ldrb	r3, [r7, #17]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d105      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034de:	4b9e      	ldr	r3, [pc, #632]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e2:	4a9d      	ldr	r2, [pc, #628]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034f6:	4b98      	ldr	r3, [pc, #608]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fc:	f023 0203 	bic.w	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	4994      	ldr	r1, [pc, #592]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003518:	4b8f      	ldr	r3, [pc, #572]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351e:	f023 020c 	bic.w	r2, r3, #12
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003526:	498c      	ldr	r1, [pc, #560]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800353a:	4b87      	ldr	r3, [pc, #540]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003540:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	4983      	ldr	r1, [pc, #524]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800355c:	4b7e      	ldr	r3, [pc, #504]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	497b      	ldr	r1, [pc, #492]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800357e:	4b76      	ldr	r3, [pc, #472]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358c:	4972      	ldr	r1, [pc, #456]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035a0:	4b6d      	ldr	r3, [pc, #436]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ae:	496a      	ldr	r1, [pc, #424]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035c2:	4b65      	ldr	r3, [pc, #404]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	4961      	ldr	r1, [pc, #388]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035e4:	4b5c      	ldr	r3, [pc, #368]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f2:	4959      	ldr	r1, [pc, #356]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003606:	4b54      	ldr	r3, [pc, #336]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003614:	4950      	ldr	r1, [pc, #320]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003628:	4b4b      	ldr	r3, [pc, #300]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003636:	4948      	ldr	r1, [pc, #288]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800364a:	4b43      	ldr	r3, [pc, #268]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003650:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003658:	493f      	ldr	r1, [pc, #252]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d028      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800366c:	4b3a      	ldr	r3, [pc, #232]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367a:	4937      	ldr	r1, [pc, #220]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800368a:	d106      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800368c:	4b32      	ldr	r3, [pc, #200]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4a31      	ldr	r2, [pc, #196]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003696:	60d3      	str	r3, [r2, #12]
 8003698:	e011      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800369e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036a2:	d10c      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3304      	adds	r3, #4
 80036a8:	2101      	movs	r1, #1
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 f8c8 	bl	8003840 <RCCEx_PLLSAI1_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036b4:	7cfb      	ldrb	r3, [r7, #19]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80036ba:	7cfb      	ldrb	r3, [r7, #19]
 80036bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d028      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036ca:	4b23      	ldr	r3, [pc, #140]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d8:	491f      	ldr	r1, [pc, #124]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036e8:	d106      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ea:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	4a1a      	ldr	r2, [pc, #104]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036f4:	60d3      	str	r3, [r2, #12]
 80036f6:	e011      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003700:	d10c      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3304      	adds	r3, #4
 8003706:	2101      	movs	r1, #1
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f899 	bl	8003840 <RCCEx_PLLSAI1_Config>
 800370e:	4603      	mov	r3, r0
 8003710:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d02b      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003736:	4908      	ldr	r1, [pc, #32]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003742:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003746:	d109      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003748:	4b03      	ldr	r3, [pc, #12]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	4a02      	ldr	r2, [pc, #8]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003752:	60d3      	str	r3, [r2, #12]
 8003754:	e014      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003760:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003764:	d10c      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3304      	adds	r3, #4
 800376a:	2101      	movs	r1, #1
 800376c:	4618      	mov	r0, r3
 800376e:	f000 f867 	bl	8003840 <RCCEx_PLLSAI1_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003776:	7cfb      	ldrb	r3, [r7, #19]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800377c:	7cfb      	ldrb	r3, [r7, #19]
 800377e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d02f      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800378c:	4b2b      	ldr	r3, [pc, #172]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003792:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800379a:	4928      	ldr	r1, [pc, #160]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037aa:	d10d      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3304      	adds	r3, #4
 80037b0:	2102      	movs	r1, #2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f844 	bl	8003840 <RCCEx_PLLSAI1_Config>
 80037b8:	4603      	mov	r3, r0
 80037ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d014      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037c2:	7cfb      	ldrb	r3, [r7, #19]
 80037c4:	74bb      	strb	r3, [r7, #18]
 80037c6:	e011      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037d0:	d10c      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3320      	adds	r3, #32
 80037d6:	2102      	movs	r1, #2
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 f925 	bl	8003a28 <RCCEx_PLLSAI2_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037e2:	7cfb      	ldrb	r3, [r7, #19]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
 80037ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037f8:	4b10      	ldr	r3, [pc, #64]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003806:	490d      	ldr	r1, [pc, #52]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800381a:	4b08      	ldr	r3, [pc, #32]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003820:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800382a:	4904      	ldr	r1, [pc, #16]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003832:	7cbb      	ldrb	r3, [r7, #18]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000

08003840 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800384e:	4b75      	ldr	r3, [pc, #468]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d018      	beq.n	800388c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800385a:	4b72      	ldr	r3, [pc, #456]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f003 0203 	and.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d10d      	bne.n	8003886 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
       ||
 800386e:	2b00      	cmp	r3, #0
 8003870:	d009      	beq.n	8003886 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003872:	4b6c      	ldr	r3, [pc, #432]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	091b      	lsrs	r3, r3, #4
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
       ||
 8003882:	429a      	cmp	r2, r3
 8003884:	d047      	beq.n	8003916 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	73fb      	strb	r3, [r7, #15]
 800388a:	e044      	b.n	8003916 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b03      	cmp	r3, #3
 8003892:	d018      	beq.n	80038c6 <RCCEx_PLLSAI1_Config+0x86>
 8003894:	2b03      	cmp	r3, #3
 8003896:	d825      	bhi.n	80038e4 <RCCEx_PLLSAI1_Config+0xa4>
 8003898:	2b01      	cmp	r3, #1
 800389a:	d002      	beq.n	80038a2 <RCCEx_PLLSAI1_Config+0x62>
 800389c:	2b02      	cmp	r3, #2
 800389e:	d009      	beq.n	80038b4 <RCCEx_PLLSAI1_Config+0x74>
 80038a0:	e020      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038a2:	4b60      	ldr	r3, [pc, #384]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d11d      	bne.n	80038ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b2:	e01a      	b.n	80038ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038b4:	4b5b      	ldr	r3, [pc, #364]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d116      	bne.n	80038ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c4:	e013      	b.n	80038ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038c6:	4b57      	ldr	r3, [pc, #348]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10f      	bne.n	80038f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038d2:	4b54      	ldr	r3, [pc, #336]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038e2:	e006      	b.n	80038f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
      break;
 80038e8:	e004      	b.n	80038f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ea:	bf00      	nop
 80038ec:	e002      	b.n	80038f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ee:	bf00      	nop
 80038f0:	e000      	b.n	80038f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10d      	bne.n	8003916 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038fa:	4b4a      	ldr	r3, [pc, #296]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6819      	ldr	r1, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	430b      	orrs	r3, r1
 8003910:	4944      	ldr	r1, [pc, #272]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d17d      	bne.n	8003a18 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800391c:	4b41      	ldr	r3, [pc, #260]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a40      	ldr	r2, [pc, #256]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003922:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003926:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003928:	f7fd fdee 	bl	8001508 <HAL_GetTick>
 800392c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800392e:	e009      	b.n	8003944 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003930:	f7fd fdea 	bl	8001508 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d902      	bls.n	8003944 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	73fb      	strb	r3, [r7, #15]
        break;
 8003942:	e005      	b.n	8003950 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003944:	4b37      	ldr	r3, [pc, #220]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1ef      	bne.n	8003930 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d160      	bne.n	8003a18 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d111      	bne.n	8003980 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800395c:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6892      	ldr	r2, [r2, #8]
 800396c:	0211      	lsls	r1, r2, #8
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68d2      	ldr	r2, [r2, #12]
 8003972:	0912      	lsrs	r2, r2, #4
 8003974:	0452      	lsls	r2, r2, #17
 8003976:	430a      	orrs	r2, r1
 8003978:	492a      	ldr	r1, [pc, #168]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397a:	4313      	orrs	r3, r2
 800397c:	610b      	str	r3, [r1, #16]
 800397e:	e027      	b.n	80039d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d112      	bne.n	80039ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003986:	4b27      	ldr	r3, [pc, #156]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800398e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6892      	ldr	r2, [r2, #8]
 8003996:	0211      	lsls	r1, r2, #8
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6912      	ldr	r2, [r2, #16]
 800399c:	0852      	lsrs	r2, r2, #1
 800399e:	3a01      	subs	r2, #1
 80039a0:	0552      	lsls	r2, r2, #21
 80039a2:	430a      	orrs	r2, r1
 80039a4:	491f      	ldr	r1, [pc, #124]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	610b      	str	r3, [r1, #16]
 80039aa:	e011      	b.n	80039d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039ac:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6892      	ldr	r2, [r2, #8]
 80039bc:	0211      	lsls	r1, r2, #8
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6952      	ldr	r2, [r2, #20]
 80039c2:	0852      	lsrs	r2, r2, #1
 80039c4:	3a01      	subs	r2, #1
 80039c6:	0652      	lsls	r2, r2, #25
 80039c8:	430a      	orrs	r2, r1
 80039ca:	4916      	ldr	r1, [pc, #88]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039d0:	4b14      	ldr	r3, [pc, #80]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a13      	ldr	r2, [pc, #76]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fd fd94 	bl	8001508 <HAL_GetTick>
 80039e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039e2:	e009      	b.n	80039f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039e4:	f7fd fd90 	bl	8001508 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d902      	bls.n	80039f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	73fb      	strb	r3, [r7, #15]
          break;
 80039f6:	e005      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0ef      	beq.n	80039e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a0a:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	4904      	ldr	r1, [pc, #16]	; (8003a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40021000 	.word	0x40021000

08003a28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a36:	4b6a      	ldr	r3, [pc, #424]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d018      	beq.n	8003a74 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a42:	4b67      	ldr	r3, [pc, #412]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0203 	and.w	r2, r3, #3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d10d      	bne.n	8003a6e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
       ||
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d009      	beq.n	8003a6e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a5a:	4b61      	ldr	r3, [pc, #388]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	091b      	lsrs	r3, r3, #4
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
       ||
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d047      	beq.n	8003afe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
 8003a72:	e044      	b.n	8003afe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d018      	beq.n	8003aae <RCCEx_PLLSAI2_Config+0x86>
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d825      	bhi.n	8003acc <RCCEx_PLLSAI2_Config+0xa4>
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d002      	beq.n	8003a8a <RCCEx_PLLSAI2_Config+0x62>
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d009      	beq.n	8003a9c <RCCEx_PLLSAI2_Config+0x74>
 8003a88:	e020      	b.n	8003acc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a8a:	4b55      	ldr	r3, [pc, #340]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d11d      	bne.n	8003ad2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9a:	e01a      	b.n	8003ad2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a9c:	4b50      	ldr	r3, [pc, #320]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d116      	bne.n	8003ad6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aac:	e013      	b.n	8003ad6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aae:	4b4c      	ldr	r3, [pc, #304]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10f      	bne.n	8003ada <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aba:	4b49      	ldr	r3, [pc, #292]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003aca:	e006      	b.n	8003ada <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad0:	e004      	b.n	8003adc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e002      	b.n	8003adc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e000      	b.n	8003adc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ada:	bf00      	nop
    }

    if(status == HAL_OK)
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10d      	bne.n	8003afe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ae2:	4b3f      	ldr	r3, [pc, #252]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6819      	ldr	r1, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	430b      	orrs	r3, r1
 8003af8:	4939      	ldr	r1, [pc, #228]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d167      	bne.n	8003bd4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b04:	4b36      	ldr	r3, [pc, #216]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a35      	ldr	r2, [pc, #212]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b10:	f7fd fcfa 	bl	8001508 <HAL_GetTick>
 8003b14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b16:	e009      	b.n	8003b2c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b18:	f7fd fcf6 	bl	8001508 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d902      	bls.n	8003b2c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	73fb      	strb	r3, [r7, #15]
        break;
 8003b2a:	e005      	b.n	8003b38 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b2c:	4b2c      	ldr	r3, [pc, #176]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1ef      	bne.n	8003b18 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d14a      	bne.n	8003bd4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d111      	bne.n	8003b68 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b44:	4b26      	ldr	r3, [pc, #152]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6892      	ldr	r2, [r2, #8]
 8003b54:	0211      	lsls	r1, r2, #8
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	68d2      	ldr	r2, [r2, #12]
 8003b5a:	0912      	lsrs	r2, r2, #4
 8003b5c:	0452      	lsls	r2, r2, #17
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	491f      	ldr	r1, [pc, #124]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	614b      	str	r3, [r1, #20]
 8003b66:	e011      	b.n	8003b8c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b68:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6892      	ldr	r2, [r2, #8]
 8003b78:	0211      	lsls	r1, r2, #8
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6912      	ldr	r2, [r2, #16]
 8003b7e:	0852      	lsrs	r2, r2, #1
 8003b80:	3a01      	subs	r2, #1
 8003b82:	0652      	lsls	r2, r2, #25
 8003b84:	430a      	orrs	r2, r1
 8003b86:	4916      	ldr	r1, [pc, #88]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b8c:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a13      	ldr	r2, [pc, #76]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fd fcb6 	bl	8001508 <HAL_GetTick>
 8003b9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b9e:	e009      	b.n	8003bb4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ba0:	f7fd fcb2 	bl	8001508 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d902      	bls.n	8003bb4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	73fb      	strb	r3, [r7, #15]
          break;
 8003bb2:	e005      	b.n	8003bc0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0ef      	beq.n	8003ba0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	4904      	ldr	r1, [pc, #16]	; (8003be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000

08003be4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e040      	b.n	8003c78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fd fb88 	bl	800131c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2224      	movs	r2, #36	; 0x24
 8003c10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f8c0 	bl	8003da8 <UART_SetConfig>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e022      	b.n	8003c78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fb3e 	bl	80042bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fbc5 	bl	8004400 <UART_CheckIdleState>
 8003c76:	4603      	mov	r3, r0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	; 0x28
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	f040 8082 	bne.w	8003d9e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <HAL_UART_Transmit+0x26>
 8003ca0:	88fb      	ldrh	r3, [r7, #6]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e07a      	b.n	8003da0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_UART_Transmit+0x38>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e073      	b.n	8003da0 <HAL_UART_Transmit+0x120>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2221      	movs	r2, #33	; 0x21
 8003ccc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cce:	f7fd fc1b 	bl	8001508 <HAL_GetTick>
 8003cd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	88fa      	ldrh	r2, [r7, #6]
 8003cd8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	88fa      	ldrh	r2, [r7, #6]
 8003ce0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cec:	d108      	bne.n	8003d00 <HAL_UART_Transmit+0x80>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d104      	bne.n	8003d00 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	e003      	b.n	8003d08 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003d10:	e02d      	b.n	8003d6e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2180      	movs	r1, #128	; 0x80
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 fbb8 	bl	8004492 <UART_WaitOnFlagUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e039      	b.n	8003da0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10b      	bne.n	8003d4a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	881a      	ldrh	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d3e:	b292      	uxth	r2, r2
 8003d40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	3302      	adds	r3, #2
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	e008      	b.n	8003d5c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	781a      	ldrb	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	b292      	uxth	r2, r2
 8003d54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1cb      	bne.n	8003d12 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2200      	movs	r2, #0
 8003d82:	2140      	movs	r1, #64	; 0x40
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fb84 	bl	8004492 <UART_WaitOnFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e005      	b.n	8003da0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e000      	b.n	8003da0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003d9e:	2302      	movs	r3, #2
  }
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3720      	adds	r7, #32
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da8:	b5b0      	push	{r4, r5, r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4bad      	ldr	r3, [pc, #692]	; (8004088 <UART_SetConfig+0x2e0>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	69f9      	ldr	r1, [r7, #28]
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4aa2      	ldr	r2, [pc, #648]	; (800408c <UART_SetConfig+0x2e4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a99      	ldr	r2, [pc, #612]	; (8004090 <UART_SetConfig+0x2e8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d121      	bne.n	8003e72 <UART_SetConfig+0xca>
 8003e2e:	4b99      	ldr	r3, [pc, #612]	; (8004094 <UART_SetConfig+0x2ec>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d817      	bhi.n	8003e6c <UART_SetConfig+0xc4>
 8003e3c:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <UART_SetConfig+0x9c>)
 8003e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e42:	bf00      	nop
 8003e44:	08003e55 	.word	0x08003e55
 8003e48:	08003e61 	.word	0x08003e61
 8003e4c:	08003e5b 	.word	0x08003e5b
 8003e50:	08003e67 	.word	0x08003e67
 8003e54:	2301      	movs	r3, #1
 8003e56:	76fb      	strb	r3, [r7, #27]
 8003e58:	e0e7      	b.n	800402a <UART_SetConfig+0x282>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	76fb      	strb	r3, [r7, #27]
 8003e5e:	e0e4      	b.n	800402a <UART_SetConfig+0x282>
 8003e60:	2304      	movs	r3, #4
 8003e62:	76fb      	strb	r3, [r7, #27]
 8003e64:	e0e1      	b.n	800402a <UART_SetConfig+0x282>
 8003e66:	2308      	movs	r3, #8
 8003e68:	76fb      	strb	r3, [r7, #27]
 8003e6a:	e0de      	b.n	800402a <UART_SetConfig+0x282>
 8003e6c:	2310      	movs	r3, #16
 8003e6e:	76fb      	strb	r3, [r7, #27]
 8003e70:	e0db      	b.n	800402a <UART_SetConfig+0x282>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a88      	ldr	r2, [pc, #544]	; (8004098 <UART_SetConfig+0x2f0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d132      	bne.n	8003ee2 <UART_SetConfig+0x13a>
 8003e7c:	4b85      	ldr	r3, [pc, #532]	; (8004094 <UART_SetConfig+0x2ec>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	2b0c      	cmp	r3, #12
 8003e88:	d828      	bhi.n	8003edc <UART_SetConfig+0x134>
 8003e8a:	a201      	add	r2, pc, #4	; (adr r2, 8003e90 <UART_SetConfig+0xe8>)
 8003e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e90:	08003ec5 	.word	0x08003ec5
 8003e94:	08003edd 	.word	0x08003edd
 8003e98:	08003edd 	.word	0x08003edd
 8003e9c:	08003edd 	.word	0x08003edd
 8003ea0:	08003ed1 	.word	0x08003ed1
 8003ea4:	08003edd 	.word	0x08003edd
 8003ea8:	08003edd 	.word	0x08003edd
 8003eac:	08003edd 	.word	0x08003edd
 8003eb0:	08003ecb 	.word	0x08003ecb
 8003eb4:	08003edd 	.word	0x08003edd
 8003eb8:	08003edd 	.word	0x08003edd
 8003ebc:	08003edd 	.word	0x08003edd
 8003ec0:	08003ed7 	.word	0x08003ed7
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	76fb      	strb	r3, [r7, #27]
 8003ec8:	e0af      	b.n	800402a <UART_SetConfig+0x282>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	76fb      	strb	r3, [r7, #27]
 8003ece:	e0ac      	b.n	800402a <UART_SetConfig+0x282>
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	76fb      	strb	r3, [r7, #27]
 8003ed4:	e0a9      	b.n	800402a <UART_SetConfig+0x282>
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	76fb      	strb	r3, [r7, #27]
 8003eda:	e0a6      	b.n	800402a <UART_SetConfig+0x282>
 8003edc:	2310      	movs	r3, #16
 8003ede:	76fb      	strb	r3, [r7, #27]
 8003ee0:	e0a3      	b.n	800402a <UART_SetConfig+0x282>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a6d      	ldr	r2, [pc, #436]	; (800409c <UART_SetConfig+0x2f4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d120      	bne.n	8003f2e <UART_SetConfig+0x186>
 8003eec:	4b69      	ldr	r3, [pc, #420]	; (8004094 <UART_SetConfig+0x2ec>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ef6:	2b30      	cmp	r3, #48	; 0x30
 8003ef8:	d013      	beq.n	8003f22 <UART_SetConfig+0x17a>
 8003efa:	2b30      	cmp	r3, #48	; 0x30
 8003efc:	d814      	bhi.n	8003f28 <UART_SetConfig+0x180>
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d009      	beq.n	8003f16 <UART_SetConfig+0x16e>
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d810      	bhi.n	8003f28 <UART_SetConfig+0x180>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <UART_SetConfig+0x168>
 8003f0a:	2b10      	cmp	r3, #16
 8003f0c:	d006      	beq.n	8003f1c <UART_SetConfig+0x174>
 8003f0e:	e00b      	b.n	8003f28 <UART_SetConfig+0x180>
 8003f10:	2300      	movs	r3, #0
 8003f12:	76fb      	strb	r3, [r7, #27]
 8003f14:	e089      	b.n	800402a <UART_SetConfig+0x282>
 8003f16:	2302      	movs	r3, #2
 8003f18:	76fb      	strb	r3, [r7, #27]
 8003f1a:	e086      	b.n	800402a <UART_SetConfig+0x282>
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	76fb      	strb	r3, [r7, #27]
 8003f20:	e083      	b.n	800402a <UART_SetConfig+0x282>
 8003f22:	2308      	movs	r3, #8
 8003f24:	76fb      	strb	r3, [r7, #27]
 8003f26:	e080      	b.n	800402a <UART_SetConfig+0x282>
 8003f28:	2310      	movs	r3, #16
 8003f2a:	76fb      	strb	r3, [r7, #27]
 8003f2c:	e07d      	b.n	800402a <UART_SetConfig+0x282>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a5b      	ldr	r2, [pc, #364]	; (80040a0 <UART_SetConfig+0x2f8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d120      	bne.n	8003f7a <UART_SetConfig+0x1d2>
 8003f38:	4b56      	ldr	r3, [pc, #344]	; (8004094 <UART_SetConfig+0x2ec>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f42:	2bc0      	cmp	r3, #192	; 0xc0
 8003f44:	d013      	beq.n	8003f6e <UART_SetConfig+0x1c6>
 8003f46:	2bc0      	cmp	r3, #192	; 0xc0
 8003f48:	d814      	bhi.n	8003f74 <UART_SetConfig+0x1cc>
 8003f4a:	2b80      	cmp	r3, #128	; 0x80
 8003f4c:	d009      	beq.n	8003f62 <UART_SetConfig+0x1ba>
 8003f4e:	2b80      	cmp	r3, #128	; 0x80
 8003f50:	d810      	bhi.n	8003f74 <UART_SetConfig+0x1cc>
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <UART_SetConfig+0x1b4>
 8003f56:	2b40      	cmp	r3, #64	; 0x40
 8003f58:	d006      	beq.n	8003f68 <UART_SetConfig+0x1c0>
 8003f5a:	e00b      	b.n	8003f74 <UART_SetConfig+0x1cc>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	76fb      	strb	r3, [r7, #27]
 8003f60:	e063      	b.n	800402a <UART_SetConfig+0x282>
 8003f62:	2302      	movs	r3, #2
 8003f64:	76fb      	strb	r3, [r7, #27]
 8003f66:	e060      	b.n	800402a <UART_SetConfig+0x282>
 8003f68:	2304      	movs	r3, #4
 8003f6a:	76fb      	strb	r3, [r7, #27]
 8003f6c:	e05d      	b.n	800402a <UART_SetConfig+0x282>
 8003f6e:	2308      	movs	r3, #8
 8003f70:	76fb      	strb	r3, [r7, #27]
 8003f72:	e05a      	b.n	800402a <UART_SetConfig+0x282>
 8003f74:	2310      	movs	r3, #16
 8003f76:	76fb      	strb	r3, [r7, #27]
 8003f78:	e057      	b.n	800402a <UART_SetConfig+0x282>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a49      	ldr	r2, [pc, #292]	; (80040a4 <UART_SetConfig+0x2fc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d125      	bne.n	8003fd0 <UART_SetConfig+0x228>
 8003f84:	4b43      	ldr	r3, [pc, #268]	; (8004094 <UART_SetConfig+0x2ec>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f92:	d017      	beq.n	8003fc4 <UART_SetConfig+0x21c>
 8003f94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f98:	d817      	bhi.n	8003fca <UART_SetConfig+0x222>
 8003f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9e:	d00b      	beq.n	8003fb8 <UART_SetConfig+0x210>
 8003fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa4:	d811      	bhi.n	8003fca <UART_SetConfig+0x222>
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <UART_SetConfig+0x20a>
 8003faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fae:	d006      	beq.n	8003fbe <UART_SetConfig+0x216>
 8003fb0:	e00b      	b.n	8003fca <UART_SetConfig+0x222>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	76fb      	strb	r3, [r7, #27]
 8003fb6:	e038      	b.n	800402a <UART_SetConfig+0x282>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	76fb      	strb	r3, [r7, #27]
 8003fbc:	e035      	b.n	800402a <UART_SetConfig+0x282>
 8003fbe:	2304      	movs	r3, #4
 8003fc0:	76fb      	strb	r3, [r7, #27]
 8003fc2:	e032      	b.n	800402a <UART_SetConfig+0x282>
 8003fc4:	2308      	movs	r3, #8
 8003fc6:	76fb      	strb	r3, [r7, #27]
 8003fc8:	e02f      	b.n	800402a <UART_SetConfig+0x282>
 8003fca:	2310      	movs	r3, #16
 8003fcc:	76fb      	strb	r3, [r7, #27]
 8003fce:	e02c      	b.n	800402a <UART_SetConfig+0x282>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a2d      	ldr	r2, [pc, #180]	; (800408c <UART_SetConfig+0x2e4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d125      	bne.n	8004026 <UART_SetConfig+0x27e>
 8003fda:	4b2e      	ldr	r3, [pc, #184]	; (8004094 <UART_SetConfig+0x2ec>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fe4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fe8:	d017      	beq.n	800401a <UART_SetConfig+0x272>
 8003fea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fee:	d817      	bhi.n	8004020 <UART_SetConfig+0x278>
 8003ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ff4:	d00b      	beq.n	800400e <UART_SetConfig+0x266>
 8003ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ffa:	d811      	bhi.n	8004020 <UART_SetConfig+0x278>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <UART_SetConfig+0x260>
 8004000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004004:	d006      	beq.n	8004014 <UART_SetConfig+0x26c>
 8004006:	e00b      	b.n	8004020 <UART_SetConfig+0x278>
 8004008:	2300      	movs	r3, #0
 800400a:	76fb      	strb	r3, [r7, #27]
 800400c:	e00d      	b.n	800402a <UART_SetConfig+0x282>
 800400e:	2302      	movs	r3, #2
 8004010:	76fb      	strb	r3, [r7, #27]
 8004012:	e00a      	b.n	800402a <UART_SetConfig+0x282>
 8004014:	2304      	movs	r3, #4
 8004016:	76fb      	strb	r3, [r7, #27]
 8004018:	e007      	b.n	800402a <UART_SetConfig+0x282>
 800401a:	2308      	movs	r3, #8
 800401c:	76fb      	strb	r3, [r7, #27]
 800401e:	e004      	b.n	800402a <UART_SetConfig+0x282>
 8004020:	2310      	movs	r3, #16
 8004022:	76fb      	strb	r3, [r7, #27]
 8004024:	e001      	b.n	800402a <UART_SetConfig+0x282>
 8004026:	2310      	movs	r3, #16
 8004028:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a17      	ldr	r2, [pc, #92]	; (800408c <UART_SetConfig+0x2e4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	f040 8087 	bne.w	8004144 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004036:	7efb      	ldrb	r3, [r7, #27]
 8004038:	2b08      	cmp	r3, #8
 800403a:	d837      	bhi.n	80040ac <UART_SetConfig+0x304>
 800403c:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <UART_SetConfig+0x29c>)
 800403e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004042:	bf00      	nop
 8004044:	08004069 	.word	0x08004069
 8004048:	080040ad 	.word	0x080040ad
 800404c:	08004071 	.word	0x08004071
 8004050:	080040ad 	.word	0x080040ad
 8004054:	08004077 	.word	0x08004077
 8004058:	080040ad 	.word	0x080040ad
 800405c:	080040ad 	.word	0x080040ad
 8004060:	080040ad 	.word	0x080040ad
 8004064:	0800407f 	.word	0x0800407f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004068:	f7ff f874 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 800406c:	6178      	str	r0, [r7, #20]
        break;
 800406e:	e022      	b.n	80040b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004070:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <UART_SetConfig+0x300>)
 8004072:	617b      	str	r3, [r7, #20]
        break;
 8004074:	e01f      	b.n	80040b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004076:	f7fe ffd5 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 800407a:	6178      	str	r0, [r7, #20]
        break;
 800407c:	e01b      	b.n	80040b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800407e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004082:	617b      	str	r3, [r7, #20]
        break;
 8004084:	e017      	b.n	80040b6 <UART_SetConfig+0x30e>
 8004086:	bf00      	nop
 8004088:	efff69f3 	.word	0xefff69f3
 800408c:	40008000 	.word	0x40008000
 8004090:	40013800 	.word	0x40013800
 8004094:	40021000 	.word	0x40021000
 8004098:	40004400 	.word	0x40004400
 800409c:	40004800 	.word	0x40004800
 80040a0:	40004c00 	.word	0x40004c00
 80040a4:	40005000 	.word	0x40005000
 80040a8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	76bb      	strb	r3, [r7, #26]
        break;
 80040b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 80f1 	beq.w	80042a0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	4413      	add	r3, r2
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d305      	bcc.n	80040da <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d902      	bls.n	80040e0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	76bb      	strb	r3, [r7, #26]
 80040de:	e0df      	b.n	80042a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f04f 0100 	mov.w	r1, #0
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	020b      	lsls	r3, r1, #8
 80040f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040f6:	0202      	lsls	r2, r0, #8
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	6849      	ldr	r1, [r1, #4]
 80040fc:	0849      	lsrs	r1, r1, #1
 80040fe:	4608      	mov	r0, r1
 8004100:	f04f 0100 	mov.w	r1, #0
 8004104:	1814      	adds	r4, r2, r0
 8004106:	eb43 0501 	adc.w	r5, r3, r1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	461a      	mov	r2, r3
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	4620      	mov	r0, r4
 8004116:	4629      	mov	r1, r5
 8004118:	f7fc fbb0 	bl	800087c <__aeabi_uldivmod>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4613      	mov	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800412a:	d308      	bcc.n	800413e <UART_SetConfig+0x396>
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004132:	d204      	bcs.n	800413e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	60da      	str	r2, [r3, #12]
 800413c:	e0b0      	b.n	80042a0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	76bb      	strb	r3, [r7, #26]
 8004142:	e0ad      	b.n	80042a0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414c:	d15b      	bne.n	8004206 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800414e:	7efb      	ldrb	r3, [r7, #27]
 8004150:	2b08      	cmp	r3, #8
 8004152:	d828      	bhi.n	80041a6 <UART_SetConfig+0x3fe>
 8004154:	a201      	add	r2, pc, #4	; (adr r2, 800415c <UART_SetConfig+0x3b4>)
 8004156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	08004181 	.word	0x08004181
 8004160:	08004189 	.word	0x08004189
 8004164:	08004191 	.word	0x08004191
 8004168:	080041a7 	.word	0x080041a7
 800416c:	08004197 	.word	0x08004197
 8004170:	080041a7 	.word	0x080041a7
 8004174:	080041a7 	.word	0x080041a7
 8004178:	080041a7 	.word	0x080041a7
 800417c:	0800419f 	.word	0x0800419f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004180:	f7fe ffe8 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8004184:	6178      	str	r0, [r7, #20]
        break;
 8004186:	e013      	b.n	80041b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004188:	f7fe fffa 	bl	8003180 <HAL_RCC_GetPCLK2Freq>
 800418c:	6178      	str	r0, [r7, #20]
        break;
 800418e:	e00f      	b.n	80041b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004190:	4b49      	ldr	r3, [pc, #292]	; (80042b8 <UART_SetConfig+0x510>)
 8004192:	617b      	str	r3, [r7, #20]
        break;
 8004194:	e00c      	b.n	80041b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004196:	f7fe ff45 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 800419a:	6178      	str	r0, [r7, #20]
        break;
 800419c:	e008      	b.n	80041b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800419e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041a2:	617b      	str	r3, [r7, #20]
        break;
 80041a4:	e004      	b.n	80041b0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	76bb      	strb	r3, [r7, #26]
        break;
 80041ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d074      	beq.n	80042a0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	005a      	lsls	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	441a      	add	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b0f      	cmp	r3, #15
 80041d0:	d916      	bls.n	8004200 <UART_SetConfig+0x458>
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d8:	d212      	bcs.n	8004200 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	f023 030f 	bic.w	r3, r3, #15
 80041e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	085b      	lsrs	r3, r3, #1
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	89fb      	ldrh	r3, [r7, #14]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	89fa      	ldrh	r2, [r7, #14]
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	e04f      	b.n	80042a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	76bb      	strb	r3, [r7, #26]
 8004204:	e04c      	b.n	80042a0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004206:	7efb      	ldrb	r3, [r7, #27]
 8004208:	2b08      	cmp	r3, #8
 800420a:	d828      	bhi.n	800425e <UART_SetConfig+0x4b6>
 800420c:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <UART_SetConfig+0x46c>)
 800420e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004212:	bf00      	nop
 8004214:	08004239 	.word	0x08004239
 8004218:	08004241 	.word	0x08004241
 800421c:	08004249 	.word	0x08004249
 8004220:	0800425f 	.word	0x0800425f
 8004224:	0800424f 	.word	0x0800424f
 8004228:	0800425f 	.word	0x0800425f
 800422c:	0800425f 	.word	0x0800425f
 8004230:	0800425f 	.word	0x0800425f
 8004234:	08004257 	.word	0x08004257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004238:	f7fe ff8c 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 800423c:	6178      	str	r0, [r7, #20]
        break;
 800423e:	e013      	b.n	8004268 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004240:	f7fe ff9e 	bl	8003180 <HAL_RCC_GetPCLK2Freq>
 8004244:	6178      	str	r0, [r7, #20]
        break;
 8004246:	e00f      	b.n	8004268 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004248:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <UART_SetConfig+0x510>)
 800424a:	617b      	str	r3, [r7, #20]
        break;
 800424c:	e00c      	b.n	8004268 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424e:	f7fe fee9 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8004252:	6178      	str	r0, [r7, #20]
        break;
 8004254:	e008      	b.n	8004268 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800425a:	617b      	str	r3, [r7, #20]
        break;
 800425c:	e004      	b.n	8004268 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	76bb      	strb	r3, [r7, #26]
        break;
 8004266:	bf00      	nop
    }

    if (pclk != 0U)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d018      	beq.n	80042a0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	085a      	lsrs	r2, r3, #1
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	441a      	add	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b0f      	cmp	r3, #15
 8004286:	d909      	bls.n	800429c <UART_SetConfig+0x4f4>
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428e:	d205      	bcs.n	800429c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	b29a      	uxth	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60da      	str	r2, [r3, #12]
 800429a:	e001      	b.n	80042a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80042ac:	7ebb      	ldrb	r3, [r7, #26]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3720      	adds	r7, #32
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bdb0      	pop	{r4, r5, r7, pc}
 80042b6:	bf00      	nop
 80042b8:	00f42400 	.word	0x00f42400

080042bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01a      	beq.n	80043d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ba:	d10a      	bne.n	80043d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	605a      	str	r2, [r3, #4]
  }
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af02      	add	r7, sp, #8
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004410:	f7fd f87a 	bl	8001508 <HAL_GetTick>
 8004414:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b08      	cmp	r3, #8
 8004422:	d10e      	bne.n	8004442 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004424:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f82d 	bl	8004492 <UART_WaitOnFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e023      	b.n	800448a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b04      	cmp	r3, #4
 800444e:	d10e      	bne.n	800446e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004450:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f817 	bl	8004492 <UART_WaitOnFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e00d      	b.n	800448a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b09c      	sub	sp, #112	; 0x70
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	4613      	mov	r3, r2
 80044a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a2:	e0a5      	b.n	80045f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044aa:	f000 80a1 	beq.w	80045f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ae:	f7fd f82b 	bl	8001508 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d302      	bcc.n	80044c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80044be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d13e      	bne.n	8004542 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044d8:	667b      	str	r3, [r7, #100]	; 0x64
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80044e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80044f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e6      	bne.n	80044c4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3308      	adds	r3, #8
 80044fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	663b      	str	r3, [r7, #96]	; 0x60
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3308      	adds	r3, #8
 8004514:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004516:	64ba      	str	r2, [r7, #72]	; 0x48
 8004518:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800451c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e5      	bne.n	80044f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2220      	movs	r2, #32
 800452e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e067      	b.n	8004612 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d04f      	beq.n	80045f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800455a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800455e:	d147      	bne.n	80045f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004568:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004572:	e853 3f00 	ldrex	r3, [r3]
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800457e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004588:	637b      	str	r3, [r7, #52]	; 0x34
 800458a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800458e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004590:	e841 2300 	strex	r3, r2, [r1]
 8004594:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e6      	bne.n	800456a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3308      	adds	r3, #8
 80045a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	613b      	str	r3, [r7, #16]
   return(result);
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f023 0301 	bic.w	r3, r3, #1
 80045b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3308      	adds	r3, #8
 80045ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80045bc:	623a      	str	r2, [r7, #32]
 80045be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	69f9      	ldr	r1, [r7, #28]
 80045c2:	6a3a      	ldr	r2, [r7, #32]
 80045c4:	e841 2300 	strex	r3, r2, [r1]
 80045c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e5      	bne.n	800459c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2220      	movs	r2, #32
 80045da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e010      	b.n	8004612 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69da      	ldr	r2, [r3, #28]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	4013      	ands	r3, r2
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	bf0c      	ite	eq
 8004600:	2301      	moveq	r3, #1
 8004602:	2300      	movne	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	461a      	mov	r2, r3
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	429a      	cmp	r2, r3
 800460c:	f43f af4a 	beq.w	80044a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3770      	adds	r7, #112	; 0x70
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <__errno>:
 800461c:	4b01      	ldr	r3, [pc, #4]	; (8004624 <__errno+0x8>)
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	2000000c 	.word	0x2000000c

08004628 <__libc_init_array>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	4d0d      	ldr	r5, [pc, #52]	; (8004660 <__libc_init_array+0x38>)
 800462c:	4c0d      	ldr	r4, [pc, #52]	; (8004664 <__libc_init_array+0x3c>)
 800462e:	1b64      	subs	r4, r4, r5
 8004630:	10a4      	asrs	r4, r4, #2
 8004632:	2600      	movs	r6, #0
 8004634:	42a6      	cmp	r6, r4
 8004636:	d109      	bne.n	800464c <__libc_init_array+0x24>
 8004638:	4d0b      	ldr	r5, [pc, #44]	; (8004668 <__libc_init_array+0x40>)
 800463a:	4c0c      	ldr	r4, [pc, #48]	; (800466c <__libc_init_array+0x44>)
 800463c:	f000 ffec 	bl	8005618 <_init>
 8004640:	1b64      	subs	r4, r4, r5
 8004642:	10a4      	asrs	r4, r4, #2
 8004644:	2600      	movs	r6, #0
 8004646:	42a6      	cmp	r6, r4
 8004648:	d105      	bne.n	8004656 <__libc_init_array+0x2e>
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004650:	4798      	blx	r3
 8004652:	3601      	adds	r6, #1
 8004654:	e7ee      	b.n	8004634 <__libc_init_array+0xc>
 8004656:	f855 3b04 	ldr.w	r3, [r5], #4
 800465a:	4798      	blx	r3
 800465c:	3601      	adds	r6, #1
 800465e:	e7f2      	b.n	8004646 <__libc_init_array+0x1e>
 8004660:	08005760 	.word	0x08005760
 8004664:	08005760 	.word	0x08005760
 8004668:	08005760 	.word	0x08005760
 800466c:	08005764 	.word	0x08005764

08004670 <memset>:
 8004670:	4402      	add	r2, r0
 8004672:	4603      	mov	r3, r0
 8004674:	4293      	cmp	r3, r2
 8004676:	d100      	bne.n	800467a <memset+0xa>
 8004678:	4770      	bx	lr
 800467a:	f803 1b01 	strb.w	r1, [r3], #1
 800467e:	e7f9      	b.n	8004674 <memset+0x4>

08004680 <iprintf>:
 8004680:	b40f      	push	{r0, r1, r2, r3}
 8004682:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <iprintf+0x2c>)
 8004684:	b513      	push	{r0, r1, r4, lr}
 8004686:	681c      	ldr	r4, [r3, #0]
 8004688:	b124      	cbz	r4, 8004694 <iprintf+0x14>
 800468a:	69a3      	ldr	r3, [r4, #24]
 800468c:	b913      	cbnz	r3, 8004694 <iprintf+0x14>
 800468e:	4620      	mov	r0, r4
 8004690:	f000 fa5e 	bl	8004b50 <__sinit>
 8004694:	ab05      	add	r3, sp, #20
 8004696:	9a04      	ldr	r2, [sp, #16]
 8004698:	68a1      	ldr	r1, [r4, #8]
 800469a:	9301      	str	r3, [sp, #4]
 800469c:	4620      	mov	r0, r4
 800469e:	f000 fc2f 	bl	8004f00 <_vfiprintf_r>
 80046a2:	b002      	add	sp, #8
 80046a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046a8:	b004      	add	sp, #16
 80046aa:	4770      	bx	lr
 80046ac:	2000000c 	.word	0x2000000c

080046b0 <_puts_r>:
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	460e      	mov	r6, r1
 80046b4:	4605      	mov	r5, r0
 80046b6:	b118      	cbz	r0, 80046c0 <_puts_r+0x10>
 80046b8:	6983      	ldr	r3, [r0, #24]
 80046ba:	b90b      	cbnz	r3, 80046c0 <_puts_r+0x10>
 80046bc:	f000 fa48 	bl	8004b50 <__sinit>
 80046c0:	69ab      	ldr	r3, [r5, #24]
 80046c2:	68ac      	ldr	r4, [r5, #8]
 80046c4:	b913      	cbnz	r3, 80046cc <_puts_r+0x1c>
 80046c6:	4628      	mov	r0, r5
 80046c8:	f000 fa42 	bl	8004b50 <__sinit>
 80046cc:	4b2c      	ldr	r3, [pc, #176]	; (8004780 <_puts_r+0xd0>)
 80046ce:	429c      	cmp	r4, r3
 80046d0:	d120      	bne.n	8004714 <_puts_r+0x64>
 80046d2:	686c      	ldr	r4, [r5, #4]
 80046d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046d6:	07db      	lsls	r3, r3, #31
 80046d8:	d405      	bmi.n	80046e6 <_puts_r+0x36>
 80046da:	89a3      	ldrh	r3, [r4, #12]
 80046dc:	0598      	lsls	r0, r3, #22
 80046de:	d402      	bmi.n	80046e6 <_puts_r+0x36>
 80046e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046e2:	f000 fad3 	bl	8004c8c <__retarget_lock_acquire_recursive>
 80046e6:	89a3      	ldrh	r3, [r4, #12]
 80046e8:	0719      	lsls	r1, r3, #28
 80046ea:	d51d      	bpl.n	8004728 <_puts_r+0x78>
 80046ec:	6923      	ldr	r3, [r4, #16]
 80046ee:	b1db      	cbz	r3, 8004728 <_puts_r+0x78>
 80046f0:	3e01      	subs	r6, #1
 80046f2:	68a3      	ldr	r3, [r4, #8]
 80046f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046f8:	3b01      	subs	r3, #1
 80046fa:	60a3      	str	r3, [r4, #8]
 80046fc:	bb39      	cbnz	r1, 800474e <_puts_r+0x9e>
 80046fe:	2b00      	cmp	r3, #0
 8004700:	da38      	bge.n	8004774 <_puts_r+0xc4>
 8004702:	4622      	mov	r2, r4
 8004704:	210a      	movs	r1, #10
 8004706:	4628      	mov	r0, r5
 8004708:	f000 f848 	bl	800479c <__swbuf_r>
 800470c:	3001      	adds	r0, #1
 800470e:	d011      	beq.n	8004734 <_puts_r+0x84>
 8004710:	250a      	movs	r5, #10
 8004712:	e011      	b.n	8004738 <_puts_r+0x88>
 8004714:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <_puts_r+0xd4>)
 8004716:	429c      	cmp	r4, r3
 8004718:	d101      	bne.n	800471e <_puts_r+0x6e>
 800471a:	68ac      	ldr	r4, [r5, #8]
 800471c:	e7da      	b.n	80046d4 <_puts_r+0x24>
 800471e:	4b1a      	ldr	r3, [pc, #104]	; (8004788 <_puts_r+0xd8>)
 8004720:	429c      	cmp	r4, r3
 8004722:	bf08      	it	eq
 8004724:	68ec      	ldreq	r4, [r5, #12]
 8004726:	e7d5      	b.n	80046d4 <_puts_r+0x24>
 8004728:	4621      	mov	r1, r4
 800472a:	4628      	mov	r0, r5
 800472c:	f000 f888 	bl	8004840 <__swsetup_r>
 8004730:	2800      	cmp	r0, #0
 8004732:	d0dd      	beq.n	80046f0 <_puts_r+0x40>
 8004734:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004738:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800473a:	07da      	lsls	r2, r3, #31
 800473c:	d405      	bmi.n	800474a <_puts_r+0x9a>
 800473e:	89a3      	ldrh	r3, [r4, #12]
 8004740:	059b      	lsls	r3, r3, #22
 8004742:	d402      	bmi.n	800474a <_puts_r+0x9a>
 8004744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004746:	f000 faa2 	bl	8004c8e <__retarget_lock_release_recursive>
 800474a:	4628      	mov	r0, r5
 800474c:	bd70      	pop	{r4, r5, r6, pc}
 800474e:	2b00      	cmp	r3, #0
 8004750:	da04      	bge.n	800475c <_puts_r+0xac>
 8004752:	69a2      	ldr	r2, [r4, #24]
 8004754:	429a      	cmp	r2, r3
 8004756:	dc06      	bgt.n	8004766 <_puts_r+0xb6>
 8004758:	290a      	cmp	r1, #10
 800475a:	d004      	beq.n	8004766 <_puts_r+0xb6>
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	6022      	str	r2, [r4, #0]
 8004762:	7019      	strb	r1, [r3, #0]
 8004764:	e7c5      	b.n	80046f2 <_puts_r+0x42>
 8004766:	4622      	mov	r2, r4
 8004768:	4628      	mov	r0, r5
 800476a:	f000 f817 	bl	800479c <__swbuf_r>
 800476e:	3001      	adds	r0, #1
 8004770:	d1bf      	bne.n	80046f2 <_puts_r+0x42>
 8004772:	e7df      	b.n	8004734 <_puts_r+0x84>
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	250a      	movs	r5, #10
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	6022      	str	r2, [r4, #0]
 800477c:	701d      	strb	r5, [r3, #0]
 800477e:	e7db      	b.n	8004738 <_puts_r+0x88>
 8004780:	080056e4 	.word	0x080056e4
 8004784:	08005704 	.word	0x08005704
 8004788:	080056c4 	.word	0x080056c4

0800478c <puts>:
 800478c:	4b02      	ldr	r3, [pc, #8]	; (8004798 <puts+0xc>)
 800478e:	4601      	mov	r1, r0
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	f7ff bf8d 	b.w	80046b0 <_puts_r>
 8004796:	bf00      	nop
 8004798:	2000000c 	.word	0x2000000c

0800479c <__swbuf_r>:
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	460e      	mov	r6, r1
 80047a0:	4614      	mov	r4, r2
 80047a2:	4605      	mov	r5, r0
 80047a4:	b118      	cbz	r0, 80047ae <__swbuf_r+0x12>
 80047a6:	6983      	ldr	r3, [r0, #24]
 80047a8:	b90b      	cbnz	r3, 80047ae <__swbuf_r+0x12>
 80047aa:	f000 f9d1 	bl	8004b50 <__sinit>
 80047ae:	4b21      	ldr	r3, [pc, #132]	; (8004834 <__swbuf_r+0x98>)
 80047b0:	429c      	cmp	r4, r3
 80047b2:	d12b      	bne.n	800480c <__swbuf_r+0x70>
 80047b4:	686c      	ldr	r4, [r5, #4]
 80047b6:	69a3      	ldr	r3, [r4, #24]
 80047b8:	60a3      	str	r3, [r4, #8]
 80047ba:	89a3      	ldrh	r3, [r4, #12]
 80047bc:	071a      	lsls	r2, r3, #28
 80047be:	d52f      	bpl.n	8004820 <__swbuf_r+0x84>
 80047c0:	6923      	ldr	r3, [r4, #16]
 80047c2:	b36b      	cbz	r3, 8004820 <__swbuf_r+0x84>
 80047c4:	6923      	ldr	r3, [r4, #16]
 80047c6:	6820      	ldr	r0, [r4, #0]
 80047c8:	1ac0      	subs	r0, r0, r3
 80047ca:	6963      	ldr	r3, [r4, #20]
 80047cc:	b2f6      	uxtb	r6, r6
 80047ce:	4283      	cmp	r3, r0
 80047d0:	4637      	mov	r7, r6
 80047d2:	dc04      	bgt.n	80047de <__swbuf_r+0x42>
 80047d4:	4621      	mov	r1, r4
 80047d6:	4628      	mov	r0, r5
 80047d8:	f000 f926 	bl	8004a28 <_fflush_r>
 80047dc:	bb30      	cbnz	r0, 800482c <__swbuf_r+0x90>
 80047de:	68a3      	ldr	r3, [r4, #8]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	60a3      	str	r3, [r4, #8]
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	6022      	str	r2, [r4, #0]
 80047ea:	701e      	strb	r6, [r3, #0]
 80047ec:	6963      	ldr	r3, [r4, #20]
 80047ee:	3001      	adds	r0, #1
 80047f0:	4283      	cmp	r3, r0
 80047f2:	d004      	beq.n	80047fe <__swbuf_r+0x62>
 80047f4:	89a3      	ldrh	r3, [r4, #12]
 80047f6:	07db      	lsls	r3, r3, #31
 80047f8:	d506      	bpl.n	8004808 <__swbuf_r+0x6c>
 80047fa:	2e0a      	cmp	r6, #10
 80047fc:	d104      	bne.n	8004808 <__swbuf_r+0x6c>
 80047fe:	4621      	mov	r1, r4
 8004800:	4628      	mov	r0, r5
 8004802:	f000 f911 	bl	8004a28 <_fflush_r>
 8004806:	b988      	cbnz	r0, 800482c <__swbuf_r+0x90>
 8004808:	4638      	mov	r0, r7
 800480a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800480c:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <__swbuf_r+0x9c>)
 800480e:	429c      	cmp	r4, r3
 8004810:	d101      	bne.n	8004816 <__swbuf_r+0x7a>
 8004812:	68ac      	ldr	r4, [r5, #8]
 8004814:	e7cf      	b.n	80047b6 <__swbuf_r+0x1a>
 8004816:	4b09      	ldr	r3, [pc, #36]	; (800483c <__swbuf_r+0xa0>)
 8004818:	429c      	cmp	r4, r3
 800481a:	bf08      	it	eq
 800481c:	68ec      	ldreq	r4, [r5, #12]
 800481e:	e7ca      	b.n	80047b6 <__swbuf_r+0x1a>
 8004820:	4621      	mov	r1, r4
 8004822:	4628      	mov	r0, r5
 8004824:	f000 f80c 	bl	8004840 <__swsetup_r>
 8004828:	2800      	cmp	r0, #0
 800482a:	d0cb      	beq.n	80047c4 <__swbuf_r+0x28>
 800482c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004830:	e7ea      	b.n	8004808 <__swbuf_r+0x6c>
 8004832:	bf00      	nop
 8004834:	080056e4 	.word	0x080056e4
 8004838:	08005704 	.word	0x08005704
 800483c:	080056c4 	.word	0x080056c4

08004840 <__swsetup_r>:
 8004840:	4b32      	ldr	r3, [pc, #200]	; (800490c <__swsetup_r+0xcc>)
 8004842:	b570      	push	{r4, r5, r6, lr}
 8004844:	681d      	ldr	r5, [r3, #0]
 8004846:	4606      	mov	r6, r0
 8004848:	460c      	mov	r4, r1
 800484a:	b125      	cbz	r5, 8004856 <__swsetup_r+0x16>
 800484c:	69ab      	ldr	r3, [r5, #24]
 800484e:	b913      	cbnz	r3, 8004856 <__swsetup_r+0x16>
 8004850:	4628      	mov	r0, r5
 8004852:	f000 f97d 	bl	8004b50 <__sinit>
 8004856:	4b2e      	ldr	r3, [pc, #184]	; (8004910 <__swsetup_r+0xd0>)
 8004858:	429c      	cmp	r4, r3
 800485a:	d10f      	bne.n	800487c <__swsetup_r+0x3c>
 800485c:	686c      	ldr	r4, [r5, #4]
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004864:	0719      	lsls	r1, r3, #28
 8004866:	d42c      	bmi.n	80048c2 <__swsetup_r+0x82>
 8004868:	06dd      	lsls	r5, r3, #27
 800486a:	d411      	bmi.n	8004890 <__swsetup_r+0x50>
 800486c:	2309      	movs	r3, #9
 800486e:	6033      	str	r3, [r6, #0]
 8004870:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004874:	81a3      	strh	r3, [r4, #12]
 8004876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800487a:	e03e      	b.n	80048fa <__swsetup_r+0xba>
 800487c:	4b25      	ldr	r3, [pc, #148]	; (8004914 <__swsetup_r+0xd4>)
 800487e:	429c      	cmp	r4, r3
 8004880:	d101      	bne.n	8004886 <__swsetup_r+0x46>
 8004882:	68ac      	ldr	r4, [r5, #8]
 8004884:	e7eb      	b.n	800485e <__swsetup_r+0x1e>
 8004886:	4b24      	ldr	r3, [pc, #144]	; (8004918 <__swsetup_r+0xd8>)
 8004888:	429c      	cmp	r4, r3
 800488a:	bf08      	it	eq
 800488c:	68ec      	ldreq	r4, [r5, #12]
 800488e:	e7e6      	b.n	800485e <__swsetup_r+0x1e>
 8004890:	0758      	lsls	r0, r3, #29
 8004892:	d512      	bpl.n	80048ba <__swsetup_r+0x7a>
 8004894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004896:	b141      	cbz	r1, 80048aa <__swsetup_r+0x6a>
 8004898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800489c:	4299      	cmp	r1, r3
 800489e:	d002      	beq.n	80048a6 <__swsetup_r+0x66>
 80048a0:	4630      	mov	r0, r6
 80048a2:	f000 fa59 	bl	8004d58 <_free_r>
 80048a6:	2300      	movs	r3, #0
 80048a8:	6363      	str	r3, [r4, #52]	; 0x34
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048b0:	81a3      	strh	r3, [r4, #12]
 80048b2:	2300      	movs	r3, #0
 80048b4:	6063      	str	r3, [r4, #4]
 80048b6:	6923      	ldr	r3, [r4, #16]
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	89a3      	ldrh	r3, [r4, #12]
 80048bc:	f043 0308 	orr.w	r3, r3, #8
 80048c0:	81a3      	strh	r3, [r4, #12]
 80048c2:	6923      	ldr	r3, [r4, #16]
 80048c4:	b94b      	cbnz	r3, 80048da <__swsetup_r+0x9a>
 80048c6:	89a3      	ldrh	r3, [r4, #12]
 80048c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d0:	d003      	beq.n	80048da <__swsetup_r+0x9a>
 80048d2:	4621      	mov	r1, r4
 80048d4:	4630      	mov	r0, r6
 80048d6:	f000 f9ff 	bl	8004cd8 <__smakebuf_r>
 80048da:	89a0      	ldrh	r0, [r4, #12]
 80048dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048e0:	f010 0301 	ands.w	r3, r0, #1
 80048e4:	d00a      	beq.n	80048fc <__swsetup_r+0xbc>
 80048e6:	2300      	movs	r3, #0
 80048e8:	60a3      	str	r3, [r4, #8]
 80048ea:	6963      	ldr	r3, [r4, #20]
 80048ec:	425b      	negs	r3, r3
 80048ee:	61a3      	str	r3, [r4, #24]
 80048f0:	6923      	ldr	r3, [r4, #16]
 80048f2:	b943      	cbnz	r3, 8004906 <__swsetup_r+0xc6>
 80048f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048f8:	d1ba      	bne.n	8004870 <__swsetup_r+0x30>
 80048fa:	bd70      	pop	{r4, r5, r6, pc}
 80048fc:	0781      	lsls	r1, r0, #30
 80048fe:	bf58      	it	pl
 8004900:	6963      	ldrpl	r3, [r4, #20]
 8004902:	60a3      	str	r3, [r4, #8]
 8004904:	e7f4      	b.n	80048f0 <__swsetup_r+0xb0>
 8004906:	2000      	movs	r0, #0
 8004908:	e7f7      	b.n	80048fa <__swsetup_r+0xba>
 800490a:	bf00      	nop
 800490c:	2000000c 	.word	0x2000000c
 8004910:	080056e4 	.word	0x080056e4
 8004914:	08005704 	.word	0x08005704
 8004918:	080056c4 	.word	0x080056c4

0800491c <__sflush_r>:
 800491c:	898a      	ldrh	r2, [r1, #12]
 800491e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004922:	4605      	mov	r5, r0
 8004924:	0710      	lsls	r0, r2, #28
 8004926:	460c      	mov	r4, r1
 8004928:	d458      	bmi.n	80049dc <__sflush_r+0xc0>
 800492a:	684b      	ldr	r3, [r1, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	dc05      	bgt.n	800493c <__sflush_r+0x20>
 8004930:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	dc02      	bgt.n	800493c <__sflush_r+0x20>
 8004936:	2000      	movs	r0, #0
 8004938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800493c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800493e:	2e00      	cmp	r6, #0
 8004940:	d0f9      	beq.n	8004936 <__sflush_r+0x1a>
 8004942:	2300      	movs	r3, #0
 8004944:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004948:	682f      	ldr	r7, [r5, #0]
 800494a:	602b      	str	r3, [r5, #0]
 800494c:	d032      	beq.n	80049b4 <__sflush_r+0x98>
 800494e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004950:	89a3      	ldrh	r3, [r4, #12]
 8004952:	075a      	lsls	r2, r3, #29
 8004954:	d505      	bpl.n	8004962 <__sflush_r+0x46>
 8004956:	6863      	ldr	r3, [r4, #4]
 8004958:	1ac0      	subs	r0, r0, r3
 800495a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800495c:	b10b      	cbz	r3, 8004962 <__sflush_r+0x46>
 800495e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004960:	1ac0      	subs	r0, r0, r3
 8004962:	2300      	movs	r3, #0
 8004964:	4602      	mov	r2, r0
 8004966:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004968:	6a21      	ldr	r1, [r4, #32]
 800496a:	4628      	mov	r0, r5
 800496c:	47b0      	blx	r6
 800496e:	1c43      	adds	r3, r0, #1
 8004970:	89a3      	ldrh	r3, [r4, #12]
 8004972:	d106      	bne.n	8004982 <__sflush_r+0x66>
 8004974:	6829      	ldr	r1, [r5, #0]
 8004976:	291d      	cmp	r1, #29
 8004978:	d82c      	bhi.n	80049d4 <__sflush_r+0xb8>
 800497a:	4a2a      	ldr	r2, [pc, #168]	; (8004a24 <__sflush_r+0x108>)
 800497c:	40ca      	lsrs	r2, r1
 800497e:	07d6      	lsls	r6, r2, #31
 8004980:	d528      	bpl.n	80049d4 <__sflush_r+0xb8>
 8004982:	2200      	movs	r2, #0
 8004984:	6062      	str	r2, [r4, #4]
 8004986:	04d9      	lsls	r1, r3, #19
 8004988:	6922      	ldr	r2, [r4, #16]
 800498a:	6022      	str	r2, [r4, #0]
 800498c:	d504      	bpl.n	8004998 <__sflush_r+0x7c>
 800498e:	1c42      	adds	r2, r0, #1
 8004990:	d101      	bne.n	8004996 <__sflush_r+0x7a>
 8004992:	682b      	ldr	r3, [r5, #0]
 8004994:	b903      	cbnz	r3, 8004998 <__sflush_r+0x7c>
 8004996:	6560      	str	r0, [r4, #84]	; 0x54
 8004998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800499a:	602f      	str	r7, [r5, #0]
 800499c:	2900      	cmp	r1, #0
 800499e:	d0ca      	beq.n	8004936 <__sflush_r+0x1a>
 80049a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049a4:	4299      	cmp	r1, r3
 80049a6:	d002      	beq.n	80049ae <__sflush_r+0x92>
 80049a8:	4628      	mov	r0, r5
 80049aa:	f000 f9d5 	bl	8004d58 <_free_r>
 80049ae:	2000      	movs	r0, #0
 80049b0:	6360      	str	r0, [r4, #52]	; 0x34
 80049b2:	e7c1      	b.n	8004938 <__sflush_r+0x1c>
 80049b4:	6a21      	ldr	r1, [r4, #32]
 80049b6:	2301      	movs	r3, #1
 80049b8:	4628      	mov	r0, r5
 80049ba:	47b0      	blx	r6
 80049bc:	1c41      	adds	r1, r0, #1
 80049be:	d1c7      	bne.n	8004950 <__sflush_r+0x34>
 80049c0:	682b      	ldr	r3, [r5, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0c4      	beq.n	8004950 <__sflush_r+0x34>
 80049c6:	2b1d      	cmp	r3, #29
 80049c8:	d001      	beq.n	80049ce <__sflush_r+0xb2>
 80049ca:	2b16      	cmp	r3, #22
 80049cc:	d101      	bne.n	80049d2 <__sflush_r+0xb6>
 80049ce:	602f      	str	r7, [r5, #0]
 80049d0:	e7b1      	b.n	8004936 <__sflush_r+0x1a>
 80049d2:	89a3      	ldrh	r3, [r4, #12]
 80049d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049d8:	81a3      	strh	r3, [r4, #12]
 80049da:	e7ad      	b.n	8004938 <__sflush_r+0x1c>
 80049dc:	690f      	ldr	r7, [r1, #16]
 80049de:	2f00      	cmp	r7, #0
 80049e0:	d0a9      	beq.n	8004936 <__sflush_r+0x1a>
 80049e2:	0793      	lsls	r3, r2, #30
 80049e4:	680e      	ldr	r6, [r1, #0]
 80049e6:	bf08      	it	eq
 80049e8:	694b      	ldreq	r3, [r1, #20]
 80049ea:	600f      	str	r7, [r1, #0]
 80049ec:	bf18      	it	ne
 80049ee:	2300      	movne	r3, #0
 80049f0:	eba6 0807 	sub.w	r8, r6, r7
 80049f4:	608b      	str	r3, [r1, #8]
 80049f6:	f1b8 0f00 	cmp.w	r8, #0
 80049fa:	dd9c      	ble.n	8004936 <__sflush_r+0x1a>
 80049fc:	6a21      	ldr	r1, [r4, #32]
 80049fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a00:	4643      	mov	r3, r8
 8004a02:	463a      	mov	r2, r7
 8004a04:	4628      	mov	r0, r5
 8004a06:	47b0      	blx	r6
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	dc06      	bgt.n	8004a1a <__sflush_r+0xfe>
 8004a0c:	89a3      	ldrh	r3, [r4, #12]
 8004a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a12:	81a3      	strh	r3, [r4, #12]
 8004a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a18:	e78e      	b.n	8004938 <__sflush_r+0x1c>
 8004a1a:	4407      	add	r7, r0
 8004a1c:	eba8 0800 	sub.w	r8, r8, r0
 8004a20:	e7e9      	b.n	80049f6 <__sflush_r+0xda>
 8004a22:	bf00      	nop
 8004a24:	20400001 	.word	0x20400001

08004a28 <_fflush_r>:
 8004a28:	b538      	push	{r3, r4, r5, lr}
 8004a2a:	690b      	ldr	r3, [r1, #16]
 8004a2c:	4605      	mov	r5, r0
 8004a2e:	460c      	mov	r4, r1
 8004a30:	b913      	cbnz	r3, 8004a38 <_fflush_r+0x10>
 8004a32:	2500      	movs	r5, #0
 8004a34:	4628      	mov	r0, r5
 8004a36:	bd38      	pop	{r3, r4, r5, pc}
 8004a38:	b118      	cbz	r0, 8004a42 <_fflush_r+0x1a>
 8004a3a:	6983      	ldr	r3, [r0, #24]
 8004a3c:	b90b      	cbnz	r3, 8004a42 <_fflush_r+0x1a>
 8004a3e:	f000 f887 	bl	8004b50 <__sinit>
 8004a42:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <_fflush_r+0x6c>)
 8004a44:	429c      	cmp	r4, r3
 8004a46:	d11b      	bne.n	8004a80 <_fflush_r+0x58>
 8004a48:	686c      	ldr	r4, [r5, #4]
 8004a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0ef      	beq.n	8004a32 <_fflush_r+0xa>
 8004a52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a54:	07d0      	lsls	r0, r2, #31
 8004a56:	d404      	bmi.n	8004a62 <_fflush_r+0x3a>
 8004a58:	0599      	lsls	r1, r3, #22
 8004a5a:	d402      	bmi.n	8004a62 <_fflush_r+0x3a>
 8004a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a5e:	f000 f915 	bl	8004c8c <__retarget_lock_acquire_recursive>
 8004a62:	4628      	mov	r0, r5
 8004a64:	4621      	mov	r1, r4
 8004a66:	f7ff ff59 	bl	800491c <__sflush_r>
 8004a6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a6c:	07da      	lsls	r2, r3, #31
 8004a6e:	4605      	mov	r5, r0
 8004a70:	d4e0      	bmi.n	8004a34 <_fflush_r+0xc>
 8004a72:	89a3      	ldrh	r3, [r4, #12]
 8004a74:	059b      	lsls	r3, r3, #22
 8004a76:	d4dd      	bmi.n	8004a34 <_fflush_r+0xc>
 8004a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a7a:	f000 f908 	bl	8004c8e <__retarget_lock_release_recursive>
 8004a7e:	e7d9      	b.n	8004a34 <_fflush_r+0xc>
 8004a80:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <_fflush_r+0x70>)
 8004a82:	429c      	cmp	r4, r3
 8004a84:	d101      	bne.n	8004a8a <_fflush_r+0x62>
 8004a86:	68ac      	ldr	r4, [r5, #8]
 8004a88:	e7df      	b.n	8004a4a <_fflush_r+0x22>
 8004a8a:	4b04      	ldr	r3, [pc, #16]	; (8004a9c <_fflush_r+0x74>)
 8004a8c:	429c      	cmp	r4, r3
 8004a8e:	bf08      	it	eq
 8004a90:	68ec      	ldreq	r4, [r5, #12]
 8004a92:	e7da      	b.n	8004a4a <_fflush_r+0x22>
 8004a94:	080056e4 	.word	0x080056e4
 8004a98:	08005704 	.word	0x08005704
 8004a9c:	080056c4 	.word	0x080056c4

08004aa0 <std>:
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	b510      	push	{r4, lr}
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8004aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aae:	6083      	str	r3, [r0, #8]
 8004ab0:	8181      	strh	r1, [r0, #12]
 8004ab2:	6643      	str	r3, [r0, #100]	; 0x64
 8004ab4:	81c2      	strh	r2, [r0, #14]
 8004ab6:	6183      	str	r3, [r0, #24]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	2208      	movs	r2, #8
 8004abc:	305c      	adds	r0, #92	; 0x5c
 8004abe:	f7ff fdd7 	bl	8004670 <memset>
 8004ac2:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <std+0x38>)
 8004ac4:	6263      	str	r3, [r4, #36]	; 0x24
 8004ac6:	4b05      	ldr	r3, [pc, #20]	; (8004adc <std+0x3c>)
 8004ac8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004aca:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <std+0x40>)
 8004acc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ace:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <std+0x44>)
 8004ad0:	6224      	str	r4, [r4, #32]
 8004ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8004ad4:	bd10      	pop	{r4, pc}
 8004ad6:	bf00      	nop
 8004ad8:	080054a9 	.word	0x080054a9
 8004adc:	080054cb 	.word	0x080054cb
 8004ae0:	08005503 	.word	0x08005503
 8004ae4:	08005527 	.word	0x08005527

08004ae8 <_cleanup_r>:
 8004ae8:	4901      	ldr	r1, [pc, #4]	; (8004af0 <_cleanup_r+0x8>)
 8004aea:	f000 b8af 	b.w	8004c4c <_fwalk_reent>
 8004aee:	bf00      	nop
 8004af0:	08004a29 	.word	0x08004a29

08004af4 <__sfmoreglue>:
 8004af4:	b570      	push	{r4, r5, r6, lr}
 8004af6:	1e4a      	subs	r2, r1, #1
 8004af8:	2568      	movs	r5, #104	; 0x68
 8004afa:	4355      	muls	r5, r2
 8004afc:	460e      	mov	r6, r1
 8004afe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b02:	f000 f979 	bl	8004df8 <_malloc_r>
 8004b06:	4604      	mov	r4, r0
 8004b08:	b140      	cbz	r0, 8004b1c <__sfmoreglue+0x28>
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	e9c0 1600 	strd	r1, r6, [r0]
 8004b10:	300c      	adds	r0, #12
 8004b12:	60a0      	str	r0, [r4, #8]
 8004b14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b18:	f7ff fdaa 	bl	8004670 <memset>
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	bd70      	pop	{r4, r5, r6, pc}

08004b20 <__sfp_lock_acquire>:
 8004b20:	4801      	ldr	r0, [pc, #4]	; (8004b28 <__sfp_lock_acquire+0x8>)
 8004b22:	f000 b8b3 	b.w	8004c8c <__retarget_lock_acquire_recursive>
 8004b26:	bf00      	nop
 8004b28:	20000174 	.word	0x20000174

08004b2c <__sfp_lock_release>:
 8004b2c:	4801      	ldr	r0, [pc, #4]	; (8004b34 <__sfp_lock_release+0x8>)
 8004b2e:	f000 b8ae 	b.w	8004c8e <__retarget_lock_release_recursive>
 8004b32:	bf00      	nop
 8004b34:	20000174 	.word	0x20000174

08004b38 <__sinit_lock_acquire>:
 8004b38:	4801      	ldr	r0, [pc, #4]	; (8004b40 <__sinit_lock_acquire+0x8>)
 8004b3a:	f000 b8a7 	b.w	8004c8c <__retarget_lock_acquire_recursive>
 8004b3e:	bf00      	nop
 8004b40:	2000016f 	.word	0x2000016f

08004b44 <__sinit_lock_release>:
 8004b44:	4801      	ldr	r0, [pc, #4]	; (8004b4c <__sinit_lock_release+0x8>)
 8004b46:	f000 b8a2 	b.w	8004c8e <__retarget_lock_release_recursive>
 8004b4a:	bf00      	nop
 8004b4c:	2000016f 	.word	0x2000016f

08004b50 <__sinit>:
 8004b50:	b510      	push	{r4, lr}
 8004b52:	4604      	mov	r4, r0
 8004b54:	f7ff fff0 	bl	8004b38 <__sinit_lock_acquire>
 8004b58:	69a3      	ldr	r3, [r4, #24]
 8004b5a:	b11b      	cbz	r3, 8004b64 <__sinit+0x14>
 8004b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b60:	f7ff bff0 	b.w	8004b44 <__sinit_lock_release>
 8004b64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b68:	6523      	str	r3, [r4, #80]	; 0x50
 8004b6a:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <__sinit+0x68>)
 8004b6c:	4a13      	ldr	r2, [pc, #76]	; (8004bbc <__sinit+0x6c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b72:	42a3      	cmp	r3, r4
 8004b74:	bf04      	itt	eq
 8004b76:	2301      	moveq	r3, #1
 8004b78:	61a3      	streq	r3, [r4, #24]
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f000 f820 	bl	8004bc0 <__sfp>
 8004b80:	6060      	str	r0, [r4, #4]
 8004b82:	4620      	mov	r0, r4
 8004b84:	f000 f81c 	bl	8004bc0 <__sfp>
 8004b88:	60a0      	str	r0, [r4, #8]
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	f000 f818 	bl	8004bc0 <__sfp>
 8004b90:	2200      	movs	r2, #0
 8004b92:	60e0      	str	r0, [r4, #12]
 8004b94:	2104      	movs	r1, #4
 8004b96:	6860      	ldr	r0, [r4, #4]
 8004b98:	f7ff ff82 	bl	8004aa0 <std>
 8004b9c:	68a0      	ldr	r0, [r4, #8]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	2109      	movs	r1, #9
 8004ba2:	f7ff ff7d 	bl	8004aa0 <std>
 8004ba6:	68e0      	ldr	r0, [r4, #12]
 8004ba8:	2202      	movs	r2, #2
 8004baa:	2112      	movs	r1, #18
 8004bac:	f7ff ff78 	bl	8004aa0 <std>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	61a3      	str	r3, [r4, #24]
 8004bb4:	e7d2      	b.n	8004b5c <__sinit+0xc>
 8004bb6:	bf00      	nop
 8004bb8:	080056c0 	.word	0x080056c0
 8004bbc:	08004ae9 	.word	0x08004ae9

08004bc0 <__sfp>:
 8004bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc2:	4607      	mov	r7, r0
 8004bc4:	f7ff ffac 	bl	8004b20 <__sfp_lock_acquire>
 8004bc8:	4b1e      	ldr	r3, [pc, #120]	; (8004c44 <__sfp+0x84>)
 8004bca:	681e      	ldr	r6, [r3, #0]
 8004bcc:	69b3      	ldr	r3, [r6, #24]
 8004bce:	b913      	cbnz	r3, 8004bd6 <__sfp+0x16>
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f7ff ffbd 	bl	8004b50 <__sinit>
 8004bd6:	3648      	adds	r6, #72	; 0x48
 8004bd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	d503      	bpl.n	8004be8 <__sfp+0x28>
 8004be0:	6833      	ldr	r3, [r6, #0]
 8004be2:	b30b      	cbz	r3, 8004c28 <__sfp+0x68>
 8004be4:	6836      	ldr	r6, [r6, #0]
 8004be6:	e7f7      	b.n	8004bd8 <__sfp+0x18>
 8004be8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004bec:	b9d5      	cbnz	r5, 8004c24 <__sfp+0x64>
 8004bee:	4b16      	ldr	r3, [pc, #88]	; (8004c48 <__sfp+0x88>)
 8004bf0:	60e3      	str	r3, [r4, #12]
 8004bf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004bf6:	6665      	str	r5, [r4, #100]	; 0x64
 8004bf8:	f000 f847 	bl	8004c8a <__retarget_lock_init_recursive>
 8004bfc:	f7ff ff96 	bl	8004b2c <__sfp_lock_release>
 8004c00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c08:	6025      	str	r5, [r4, #0]
 8004c0a:	61a5      	str	r5, [r4, #24]
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	4629      	mov	r1, r5
 8004c10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c14:	f7ff fd2c 	bl	8004670 <memset>
 8004c18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c20:	4620      	mov	r0, r4
 8004c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c24:	3468      	adds	r4, #104	; 0x68
 8004c26:	e7d9      	b.n	8004bdc <__sfp+0x1c>
 8004c28:	2104      	movs	r1, #4
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	f7ff ff62 	bl	8004af4 <__sfmoreglue>
 8004c30:	4604      	mov	r4, r0
 8004c32:	6030      	str	r0, [r6, #0]
 8004c34:	2800      	cmp	r0, #0
 8004c36:	d1d5      	bne.n	8004be4 <__sfp+0x24>
 8004c38:	f7ff ff78 	bl	8004b2c <__sfp_lock_release>
 8004c3c:	230c      	movs	r3, #12
 8004c3e:	603b      	str	r3, [r7, #0]
 8004c40:	e7ee      	b.n	8004c20 <__sfp+0x60>
 8004c42:	bf00      	nop
 8004c44:	080056c0 	.word	0x080056c0
 8004c48:	ffff0001 	.word	0xffff0001

08004c4c <_fwalk_reent>:
 8004c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c50:	4606      	mov	r6, r0
 8004c52:	4688      	mov	r8, r1
 8004c54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c58:	2700      	movs	r7, #0
 8004c5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c5e:	f1b9 0901 	subs.w	r9, r9, #1
 8004c62:	d505      	bpl.n	8004c70 <_fwalk_reent+0x24>
 8004c64:	6824      	ldr	r4, [r4, #0]
 8004c66:	2c00      	cmp	r4, #0
 8004c68:	d1f7      	bne.n	8004c5a <_fwalk_reent+0xe>
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c70:	89ab      	ldrh	r3, [r5, #12]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d907      	bls.n	8004c86 <_fwalk_reent+0x3a>
 8004c76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	d003      	beq.n	8004c86 <_fwalk_reent+0x3a>
 8004c7e:	4629      	mov	r1, r5
 8004c80:	4630      	mov	r0, r6
 8004c82:	47c0      	blx	r8
 8004c84:	4307      	orrs	r7, r0
 8004c86:	3568      	adds	r5, #104	; 0x68
 8004c88:	e7e9      	b.n	8004c5e <_fwalk_reent+0x12>

08004c8a <__retarget_lock_init_recursive>:
 8004c8a:	4770      	bx	lr

08004c8c <__retarget_lock_acquire_recursive>:
 8004c8c:	4770      	bx	lr

08004c8e <__retarget_lock_release_recursive>:
 8004c8e:	4770      	bx	lr

08004c90 <__swhatbuf_r>:
 8004c90:	b570      	push	{r4, r5, r6, lr}
 8004c92:	460e      	mov	r6, r1
 8004c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c98:	2900      	cmp	r1, #0
 8004c9a:	b096      	sub	sp, #88	; 0x58
 8004c9c:	4614      	mov	r4, r2
 8004c9e:	461d      	mov	r5, r3
 8004ca0:	da07      	bge.n	8004cb2 <__swhatbuf_r+0x22>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	602b      	str	r3, [r5, #0]
 8004ca6:	89b3      	ldrh	r3, [r6, #12]
 8004ca8:	061a      	lsls	r2, r3, #24
 8004caa:	d410      	bmi.n	8004cce <__swhatbuf_r+0x3e>
 8004cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cb0:	e00e      	b.n	8004cd0 <__swhatbuf_r+0x40>
 8004cb2:	466a      	mov	r2, sp
 8004cb4:	f000 fc5e 	bl	8005574 <_fstat_r>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	dbf2      	blt.n	8004ca2 <__swhatbuf_r+0x12>
 8004cbc:	9a01      	ldr	r2, [sp, #4]
 8004cbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004cc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004cc6:	425a      	negs	r2, r3
 8004cc8:	415a      	adcs	r2, r3
 8004cca:	602a      	str	r2, [r5, #0]
 8004ccc:	e7ee      	b.n	8004cac <__swhatbuf_r+0x1c>
 8004cce:	2340      	movs	r3, #64	; 0x40
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	6023      	str	r3, [r4, #0]
 8004cd4:	b016      	add	sp, #88	; 0x58
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}

08004cd8 <__smakebuf_r>:
 8004cd8:	898b      	ldrh	r3, [r1, #12]
 8004cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cdc:	079d      	lsls	r5, r3, #30
 8004cde:	4606      	mov	r6, r0
 8004ce0:	460c      	mov	r4, r1
 8004ce2:	d507      	bpl.n	8004cf4 <__smakebuf_r+0x1c>
 8004ce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	6123      	str	r3, [r4, #16]
 8004cec:	2301      	movs	r3, #1
 8004cee:	6163      	str	r3, [r4, #20]
 8004cf0:	b002      	add	sp, #8
 8004cf2:	bd70      	pop	{r4, r5, r6, pc}
 8004cf4:	ab01      	add	r3, sp, #4
 8004cf6:	466a      	mov	r2, sp
 8004cf8:	f7ff ffca 	bl	8004c90 <__swhatbuf_r>
 8004cfc:	9900      	ldr	r1, [sp, #0]
 8004cfe:	4605      	mov	r5, r0
 8004d00:	4630      	mov	r0, r6
 8004d02:	f000 f879 	bl	8004df8 <_malloc_r>
 8004d06:	b948      	cbnz	r0, 8004d1c <__smakebuf_r+0x44>
 8004d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d0c:	059a      	lsls	r2, r3, #22
 8004d0e:	d4ef      	bmi.n	8004cf0 <__smakebuf_r+0x18>
 8004d10:	f023 0303 	bic.w	r3, r3, #3
 8004d14:	f043 0302 	orr.w	r3, r3, #2
 8004d18:	81a3      	strh	r3, [r4, #12]
 8004d1a:	e7e3      	b.n	8004ce4 <__smakebuf_r+0xc>
 8004d1c:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <__smakebuf_r+0x7c>)
 8004d1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	6020      	str	r0, [r4, #0]
 8004d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d28:	81a3      	strh	r3, [r4, #12]
 8004d2a:	9b00      	ldr	r3, [sp, #0]
 8004d2c:	6163      	str	r3, [r4, #20]
 8004d2e:	9b01      	ldr	r3, [sp, #4]
 8004d30:	6120      	str	r0, [r4, #16]
 8004d32:	b15b      	cbz	r3, 8004d4c <__smakebuf_r+0x74>
 8004d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d38:	4630      	mov	r0, r6
 8004d3a:	f000 fc2d 	bl	8005598 <_isatty_r>
 8004d3e:	b128      	cbz	r0, 8004d4c <__smakebuf_r+0x74>
 8004d40:	89a3      	ldrh	r3, [r4, #12]
 8004d42:	f023 0303 	bic.w	r3, r3, #3
 8004d46:	f043 0301 	orr.w	r3, r3, #1
 8004d4a:	81a3      	strh	r3, [r4, #12]
 8004d4c:	89a0      	ldrh	r0, [r4, #12]
 8004d4e:	4305      	orrs	r5, r0
 8004d50:	81a5      	strh	r5, [r4, #12]
 8004d52:	e7cd      	b.n	8004cf0 <__smakebuf_r+0x18>
 8004d54:	08004ae9 	.word	0x08004ae9

08004d58 <_free_r>:
 8004d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d5a:	2900      	cmp	r1, #0
 8004d5c:	d048      	beq.n	8004df0 <_free_r+0x98>
 8004d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d62:	9001      	str	r0, [sp, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f1a1 0404 	sub.w	r4, r1, #4
 8004d6a:	bfb8      	it	lt
 8004d6c:	18e4      	addlt	r4, r4, r3
 8004d6e:	f000 fc35 	bl	80055dc <__malloc_lock>
 8004d72:	4a20      	ldr	r2, [pc, #128]	; (8004df4 <_free_r+0x9c>)
 8004d74:	9801      	ldr	r0, [sp, #4]
 8004d76:	6813      	ldr	r3, [r2, #0]
 8004d78:	4615      	mov	r5, r2
 8004d7a:	b933      	cbnz	r3, 8004d8a <_free_r+0x32>
 8004d7c:	6063      	str	r3, [r4, #4]
 8004d7e:	6014      	str	r4, [r2, #0]
 8004d80:	b003      	add	sp, #12
 8004d82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d86:	f000 bc2f 	b.w	80055e8 <__malloc_unlock>
 8004d8a:	42a3      	cmp	r3, r4
 8004d8c:	d90b      	bls.n	8004da6 <_free_r+0x4e>
 8004d8e:	6821      	ldr	r1, [r4, #0]
 8004d90:	1862      	adds	r2, r4, r1
 8004d92:	4293      	cmp	r3, r2
 8004d94:	bf04      	itt	eq
 8004d96:	681a      	ldreq	r2, [r3, #0]
 8004d98:	685b      	ldreq	r3, [r3, #4]
 8004d9a:	6063      	str	r3, [r4, #4]
 8004d9c:	bf04      	itt	eq
 8004d9e:	1852      	addeq	r2, r2, r1
 8004da0:	6022      	streq	r2, [r4, #0]
 8004da2:	602c      	str	r4, [r5, #0]
 8004da4:	e7ec      	b.n	8004d80 <_free_r+0x28>
 8004da6:	461a      	mov	r2, r3
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	b10b      	cbz	r3, 8004db0 <_free_r+0x58>
 8004dac:	42a3      	cmp	r3, r4
 8004dae:	d9fa      	bls.n	8004da6 <_free_r+0x4e>
 8004db0:	6811      	ldr	r1, [r2, #0]
 8004db2:	1855      	adds	r5, r2, r1
 8004db4:	42a5      	cmp	r5, r4
 8004db6:	d10b      	bne.n	8004dd0 <_free_r+0x78>
 8004db8:	6824      	ldr	r4, [r4, #0]
 8004dba:	4421      	add	r1, r4
 8004dbc:	1854      	adds	r4, r2, r1
 8004dbe:	42a3      	cmp	r3, r4
 8004dc0:	6011      	str	r1, [r2, #0]
 8004dc2:	d1dd      	bne.n	8004d80 <_free_r+0x28>
 8004dc4:	681c      	ldr	r4, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	6053      	str	r3, [r2, #4]
 8004dca:	4421      	add	r1, r4
 8004dcc:	6011      	str	r1, [r2, #0]
 8004dce:	e7d7      	b.n	8004d80 <_free_r+0x28>
 8004dd0:	d902      	bls.n	8004dd8 <_free_r+0x80>
 8004dd2:	230c      	movs	r3, #12
 8004dd4:	6003      	str	r3, [r0, #0]
 8004dd6:	e7d3      	b.n	8004d80 <_free_r+0x28>
 8004dd8:	6825      	ldr	r5, [r4, #0]
 8004dda:	1961      	adds	r1, r4, r5
 8004ddc:	428b      	cmp	r3, r1
 8004dde:	bf04      	itt	eq
 8004de0:	6819      	ldreq	r1, [r3, #0]
 8004de2:	685b      	ldreq	r3, [r3, #4]
 8004de4:	6063      	str	r3, [r4, #4]
 8004de6:	bf04      	itt	eq
 8004de8:	1949      	addeq	r1, r1, r5
 8004dea:	6021      	streq	r1, [r4, #0]
 8004dec:	6054      	str	r4, [r2, #4]
 8004dee:	e7c7      	b.n	8004d80 <_free_r+0x28>
 8004df0:	b003      	add	sp, #12
 8004df2:	bd30      	pop	{r4, r5, pc}
 8004df4:	20000090 	.word	0x20000090

08004df8 <_malloc_r>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	1ccd      	adds	r5, r1, #3
 8004dfc:	f025 0503 	bic.w	r5, r5, #3
 8004e00:	3508      	adds	r5, #8
 8004e02:	2d0c      	cmp	r5, #12
 8004e04:	bf38      	it	cc
 8004e06:	250c      	movcc	r5, #12
 8004e08:	2d00      	cmp	r5, #0
 8004e0a:	4606      	mov	r6, r0
 8004e0c:	db01      	blt.n	8004e12 <_malloc_r+0x1a>
 8004e0e:	42a9      	cmp	r1, r5
 8004e10:	d903      	bls.n	8004e1a <_malloc_r+0x22>
 8004e12:	230c      	movs	r3, #12
 8004e14:	6033      	str	r3, [r6, #0]
 8004e16:	2000      	movs	r0, #0
 8004e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e1a:	f000 fbdf 	bl	80055dc <__malloc_lock>
 8004e1e:	4921      	ldr	r1, [pc, #132]	; (8004ea4 <_malloc_r+0xac>)
 8004e20:	680a      	ldr	r2, [r1, #0]
 8004e22:	4614      	mov	r4, r2
 8004e24:	b99c      	cbnz	r4, 8004e4e <_malloc_r+0x56>
 8004e26:	4f20      	ldr	r7, [pc, #128]	; (8004ea8 <_malloc_r+0xb0>)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	b923      	cbnz	r3, 8004e36 <_malloc_r+0x3e>
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	4630      	mov	r0, r6
 8004e30:	f000 fb2a 	bl	8005488 <_sbrk_r>
 8004e34:	6038      	str	r0, [r7, #0]
 8004e36:	4629      	mov	r1, r5
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f000 fb25 	bl	8005488 <_sbrk_r>
 8004e3e:	1c43      	adds	r3, r0, #1
 8004e40:	d123      	bne.n	8004e8a <_malloc_r+0x92>
 8004e42:	230c      	movs	r3, #12
 8004e44:	6033      	str	r3, [r6, #0]
 8004e46:	4630      	mov	r0, r6
 8004e48:	f000 fbce 	bl	80055e8 <__malloc_unlock>
 8004e4c:	e7e3      	b.n	8004e16 <_malloc_r+0x1e>
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	1b5b      	subs	r3, r3, r5
 8004e52:	d417      	bmi.n	8004e84 <_malloc_r+0x8c>
 8004e54:	2b0b      	cmp	r3, #11
 8004e56:	d903      	bls.n	8004e60 <_malloc_r+0x68>
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	441c      	add	r4, r3
 8004e5c:	6025      	str	r5, [r4, #0]
 8004e5e:	e004      	b.n	8004e6a <_malloc_r+0x72>
 8004e60:	6863      	ldr	r3, [r4, #4]
 8004e62:	42a2      	cmp	r2, r4
 8004e64:	bf0c      	ite	eq
 8004e66:	600b      	streq	r3, [r1, #0]
 8004e68:	6053      	strne	r3, [r2, #4]
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	f000 fbbc 	bl	80055e8 <__malloc_unlock>
 8004e70:	f104 000b 	add.w	r0, r4, #11
 8004e74:	1d23      	adds	r3, r4, #4
 8004e76:	f020 0007 	bic.w	r0, r0, #7
 8004e7a:	1ac2      	subs	r2, r0, r3
 8004e7c:	d0cc      	beq.n	8004e18 <_malloc_r+0x20>
 8004e7e:	1a1b      	subs	r3, r3, r0
 8004e80:	50a3      	str	r3, [r4, r2]
 8004e82:	e7c9      	b.n	8004e18 <_malloc_r+0x20>
 8004e84:	4622      	mov	r2, r4
 8004e86:	6864      	ldr	r4, [r4, #4]
 8004e88:	e7cc      	b.n	8004e24 <_malloc_r+0x2c>
 8004e8a:	1cc4      	adds	r4, r0, #3
 8004e8c:	f024 0403 	bic.w	r4, r4, #3
 8004e90:	42a0      	cmp	r0, r4
 8004e92:	d0e3      	beq.n	8004e5c <_malloc_r+0x64>
 8004e94:	1a21      	subs	r1, r4, r0
 8004e96:	4630      	mov	r0, r6
 8004e98:	f000 faf6 	bl	8005488 <_sbrk_r>
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	d1dd      	bne.n	8004e5c <_malloc_r+0x64>
 8004ea0:	e7cf      	b.n	8004e42 <_malloc_r+0x4a>
 8004ea2:	bf00      	nop
 8004ea4:	20000090 	.word	0x20000090
 8004ea8:	20000094 	.word	0x20000094

08004eac <__sfputc_r>:
 8004eac:	6893      	ldr	r3, [r2, #8]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	b410      	push	{r4}
 8004eb4:	6093      	str	r3, [r2, #8]
 8004eb6:	da08      	bge.n	8004eca <__sfputc_r+0x1e>
 8004eb8:	6994      	ldr	r4, [r2, #24]
 8004eba:	42a3      	cmp	r3, r4
 8004ebc:	db01      	blt.n	8004ec2 <__sfputc_r+0x16>
 8004ebe:	290a      	cmp	r1, #10
 8004ec0:	d103      	bne.n	8004eca <__sfputc_r+0x1e>
 8004ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ec6:	f7ff bc69 	b.w	800479c <__swbuf_r>
 8004eca:	6813      	ldr	r3, [r2, #0]
 8004ecc:	1c58      	adds	r0, r3, #1
 8004ece:	6010      	str	r0, [r2, #0]
 8004ed0:	7019      	strb	r1, [r3, #0]
 8004ed2:	4608      	mov	r0, r1
 8004ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <__sfputs_r>:
 8004eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004edc:	4606      	mov	r6, r0
 8004ede:	460f      	mov	r7, r1
 8004ee0:	4614      	mov	r4, r2
 8004ee2:	18d5      	adds	r5, r2, r3
 8004ee4:	42ac      	cmp	r4, r5
 8004ee6:	d101      	bne.n	8004eec <__sfputs_r+0x12>
 8004ee8:	2000      	movs	r0, #0
 8004eea:	e007      	b.n	8004efc <__sfputs_r+0x22>
 8004eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ef0:	463a      	mov	r2, r7
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f7ff ffda 	bl	8004eac <__sfputc_r>
 8004ef8:	1c43      	adds	r3, r0, #1
 8004efa:	d1f3      	bne.n	8004ee4 <__sfputs_r+0xa>
 8004efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f00 <_vfiprintf_r>:
 8004f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f04:	460d      	mov	r5, r1
 8004f06:	b09d      	sub	sp, #116	; 0x74
 8004f08:	4614      	mov	r4, r2
 8004f0a:	4698      	mov	r8, r3
 8004f0c:	4606      	mov	r6, r0
 8004f0e:	b118      	cbz	r0, 8004f18 <_vfiprintf_r+0x18>
 8004f10:	6983      	ldr	r3, [r0, #24]
 8004f12:	b90b      	cbnz	r3, 8004f18 <_vfiprintf_r+0x18>
 8004f14:	f7ff fe1c 	bl	8004b50 <__sinit>
 8004f18:	4b89      	ldr	r3, [pc, #548]	; (8005140 <_vfiprintf_r+0x240>)
 8004f1a:	429d      	cmp	r5, r3
 8004f1c:	d11b      	bne.n	8004f56 <_vfiprintf_r+0x56>
 8004f1e:	6875      	ldr	r5, [r6, #4]
 8004f20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f22:	07d9      	lsls	r1, r3, #31
 8004f24:	d405      	bmi.n	8004f32 <_vfiprintf_r+0x32>
 8004f26:	89ab      	ldrh	r3, [r5, #12]
 8004f28:	059a      	lsls	r2, r3, #22
 8004f2a:	d402      	bmi.n	8004f32 <_vfiprintf_r+0x32>
 8004f2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f2e:	f7ff fead 	bl	8004c8c <__retarget_lock_acquire_recursive>
 8004f32:	89ab      	ldrh	r3, [r5, #12]
 8004f34:	071b      	lsls	r3, r3, #28
 8004f36:	d501      	bpl.n	8004f3c <_vfiprintf_r+0x3c>
 8004f38:	692b      	ldr	r3, [r5, #16]
 8004f3a:	b9eb      	cbnz	r3, 8004f78 <_vfiprintf_r+0x78>
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	4630      	mov	r0, r6
 8004f40:	f7ff fc7e 	bl	8004840 <__swsetup_r>
 8004f44:	b1c0      	cbz	r0, 8004f78 <_vfiprintf_r+0x78>
 8004f46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f48:	07dc      	lsls	r4, r3, #31
 8004f4a:	d50e      	bpl.n	8004f6a <_vfiprintf_r+0x6a>
 8004f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f50:	b01d      	add	sp, #116	; 0x74
 8004f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f56:	4b7b      	ldr	r3, [pc, #492]	; (8005144 <_vfiprintf_r+0x244>)
 8004f58:	429d      	cmp	r5, r3
 8004f5a:	d101      	bne.n	8004f60 <_vfiprintf_r+0x60>
 8004f5c:	68b5      	ldr	r5, [r6, #8]
 8004f5e:	e7df      	b.n	8004f20 <_vfiprintf_r+0x20>
 8004f60:	4b79      	ldr	r3, [pc, #484]	; (8005148 <_vfiprintf_r+0x248>)
 8004f62:	429d      	cmp	r5, r3
 8004f64:	bf08      	it	eq
 8004f66:	68f5      	ldreq	r5, [r6, #12]
 8004f68:	e7da      	b.n	8004f20 <_vfiprintf_r+0x20>
 8004f6a:	89ab      	ldrh	r3, [r5, #12]
 8004f6c:	0598      	lsls	r0, r3, #22
 8004f6e:	d4ed      	bmi.n	8004f4c <_vfiprintf_r+0x4c>
 8004f70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f72:	f7ff fe8c 	bl	8004c8e <__retarget_lock_release_recursive>
 8004f76:	e7e9      	b.n	8004f4c <_vfiprintf_r+0x4c>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f7c:	2320      	movs	r3, #32
 8004f7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f82:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f86:	2330      	movs	r3, #48	; 0x30
 8004f88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800514c <_vfiprintf_r+0x24c>
 8004f8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f90:	f04f 0901 	mov.w	r9, #1
 8004f94:	4623      	mov	r3, r4
 8004f96:	469a      	mov	sl, r3
 8004f98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f9c:	b10a      	cbz	r2, 8004fa2 <_vfiprintf_r+0xa2>
 8004f9e:	2a25      	cmp	r2, #37	; 0x25
 8004fa0:	d1f9      	bne.n	8004f96 <_vfiprintf_r+0x96>
 8004fa2:	ebba 0b04 	subs.w	fp, sl, r4
 8004fa6:	d00b      	beq.n	8004fc0 <_vfiprintf_r+0xc0>
 8004fa8:	465b      	mov	r3, fp
 8004faa:	4622      	mov	r2, r4
 8004fac:	4629      	mov	r1, r5
 8004fae:	4630      	mov	r0, r6
 8004fb0:	f7ff ff93 	bl	8004eda <__sfputs_r>
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	f000 80aa 	beq.w	800510e <_vfiprintf_r+0x20e>
 8004fba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fbc:	445a      	add	r2, fp
 8004fbe:	9209      	str	r2, [sp, #36]	; 0x24
 8004fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 80a2 	beq.w	800510e <_vfiprintf_r+0x20e>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fd4:	f10a 0a01 	add.w	sl, sl, #1
 8004fd8:	9304      	str	r3, [sp, #16]
 8004fda:	9307      	str	r3, [sp, #28]
 8004fdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fe0:	931a      	str	r3, [sp, #104]	; 0x68
 8004fe2:	4654      	mov	r4, sl
 8004fe4:	2205      	movs	r2, #5
 8004fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fea:	4858      	ldr	r0, [pc, #352]	; (800514c <_vfiprintf_r+0x24c>)
 8004fec:	f7fb f8f0 	bl	80001d0 <memchr>
 8004ff0:	9a04      	ldr	r2, [sp, #16]
 8004ff2:	b9d8      	cbnz	r0, 800502c <_vfiprintf_r+0x12c>
 8004ff4:	06d1      	lsls	r1, r2, #27
 8004ff6:	bf44      	itt	mi
 8004ff8:	2320      	movmi	r3, #32
 8004ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ffe:	0713      	lsls	r3, r2, #28
 8005000:	bf44      	itt	mi
 8005002:	232b      	movmi	r3, #43	; 0x2b
 8005004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005008:	f89a 3000 	ldrb.w	r3, [sl]
 800500c:	2b2a      	cmp	r3, #42	; 0x2a
 800500e:	d015      	beq.n	800503c <_vfiprintf_r+0x13c>
 8005010:	9a07      	ldr	r2, [sp, #28]
 8005012:	4654      	mov	r4, sl
 8005014:	2000      	movs	r0, #0
 8005016:	f04f 0c0a 	mov.w	ip, #10
 800501a:	4621      	mov	r1, r4
 800501c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005020:	3b30      	subs	r3, #48	; 0x30
 8005022:	2b09      	cmp	r3, #9
 8005024:	d94e      	bls.n	80050c4 <_vfiprintf_r+0x1c4>
 8005026:	b1b0      	cbz	r0, 8005056 <_vfiprintf_r+0x156>
 8005028:	9207      	str	r2, [sp, #28]
 800502a:	e014      	b.n	8005056 <_vfiprintf_r+0x156>
 800502c:	eba0 0308 	sub.w	r3, r0, r8
 8005030:	fa09 f303 	lsl.w	r3, r9, r3
 8005034:	4313      	orrs	r3, r2
 8005036:	9304      	str	r3, [sp, #16]
 8005038:	46a2      	mov	sl, r4
 800503a:	e7d2      	b.n	8004fe2 <_vfiprintf_r+0xe2>
 800503c:	9b03      	ldr	r3, [sp, #12]
 800503e:	1d19      	adds	r1, r3, #4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	9103      	str	r1, [sp, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	bfbb      	ittet	lt
 8005048:	425b      	neglt	r3, r3
 800504a:	f042 0202 	orrlt.w	r2, r2, #2
 800504e:	9307      	strge	r3, [sp, #28]
 8005050:	9307      	strlt	r3, [sp, #28]
 8005052:	bfb8      	it	lt
 8005054:	9204      	strlt	r2, [sp, #16]
 8005056:	7823      	ldrb	r3, [r4, #0]
 8005058:	2b2e      	cmp	r3, #46	; 0x2e
 800505a:	d10c      	bne.n	8005076 <_vfiprintf_r+0x176>
 800505c:	7863      	ldrb	r3, [r4, #1]
 800505e:	2b2a      	cmp	r3, #42	; 0x2a
 8005060:	d135      	bne.n	80050ce <_vfiprintf_r+0x1ce>
 8005062:	9b03      	ldr	r3, [sp, #12]
 8005064:	1d1a      	adds	r2, r3, #4
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	9203      	str	r2, [sp, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	bfb8      	it	lt
 800506e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005072:	3402      	adds	r4, #2
 8005074:	9305      	str	r3, [sp, #20]
 8005076:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800515c <_vfiprintf_r+0x25c>
 800507a:	7821      	ldrb	r1, [r4, #0]
 800507c:	2203      	movs	r2, #3
 800507e:	4650      	mov	r0, sl
 8005080:	f7fb f8a6 	bl	80001d0 <memchr>
 8005084:	b140      	cbz	r0, 8005098 <_vfiprintf_r+0x198>
 8005086:	2340      	movs	r3, #64	; 0x40
 8005088:	eba0 000a 	sub.w	r0, r0, sl
 800508c:	fa03 f000 	lsl.w	r0, r3, r0
 8005090:	9b04      	ldr	r3, [sp, #16]
 8005092:	4303      	orrs	r3, r0
 8005094:	3401      	adds	r4, #1
 8005096:	9304      	str	r3, [sp, #16]
 8005098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800509c:	482c      	ldr	r0, [pc, #176]	; (8005150 <_vfiprintf_r+0x250>)
 800509e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050a2:	2206      	movs	r2, #6
 80050a4:	f7fb f894 	bl	80001d0 <memchr>
 80050a8:	2800      	cmp	r0, #0
 80050aa:	d03f      	beq.n	800512c <_vfiprintf_r+0x22c>
 80050ac:	4b29      	ldr	r3, [pc, #164]	; (8005154 <_vfiprintf_r+0x254>)
 80050ae:	bb1b      	cbnz	r3, 80050f8 <_vfiprintf_r+0x1f8>
 80050b0:	9b03      	ldr	r3, [sp, #12]
 80050b2:	3307      	adds	r3, #7
 80050b4:	f023 0307 	bic.w	r3, r3, #7
 80050b8:	3308      	adds	r3, #8
 80050ba:	9303      	str	r3, [sp, #12]
 80050bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050be:	443b      	add	r3, r7
 80050c0:	9309      	str	r3, [sp, #36]	; 0x24
 80050c2:	e767      	b.n	8004f94 <_vfiprintf_r+0x94>
 80050c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80050c8:	460c      	mov	r4, r1
 80050ca:	2001      	movs	r0, #1
 80050cc:	e7a5      	b.n	800501a <_vfiprintf_r+0x11a>
 80050ce:	2300      	movs	r3, #0
 80050d0:	3401      	adds	r4, #1
 80050d2:	9305      	str	r3, [sp, #20]
 80050d4:	4619      	mov	r1, r3
 80050d6:	f04f 0c0a 	mov.w	ip, #10
 80050da:	4620      	mov	r0, r4
 80050dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050e0:	3a30      	subs	r2, #48	; 0x30
 80050e2:	2a09      	cmp	r2, #9
 80050e4:	d903      	bls.n	80050ee <_vfiprintf_r+0x1ee>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0c5      	beq.n	8005076 <_vfiprintf_r+0x176>
 80050ea:	9105      	str	r1, [sp, #20]
 80050ec:	e7c3      	b.n	8005076 <_vfiprintf_r+0x176>
 80050ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80050f2:	4604      	mov	r4, r0
 80050f4:	2301      	movs	r3, #1
 80050f6:	e7f0      	b.n	80050da <_vfiprintf_r+0x1da>
 80050f8:	ab03      	add	r3, sp, #12
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	462a      	mov	r2, r5
 80050fe:	4b16      	ldr	r3, [pc, #88]	; (8005158 <_vfiprintf_r+0x258>)
 8005100:	a904      	add	r1, sp, #16
 8005102:	4630      	mov	r0, r6
 8005104:	f3af 8000 	nop.w
 8005108:	4607      	mov	r7, r0
 800510a:	1c78      	adds	r0, r7, #1
 800510c:	d1d6      	bne.n	80050bc <_vfiprintf_r+0x1bc>
 800510e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005110:	07d9      	lsls	r1, r3, #31
 8005112:	d405      	bmi.n	8005120 <_vfiprintf_r+0x220>
 8005114:	89ab      	ldrh	r3, [r5, #12]
 8005116:	059a      	lsls	r2, r3, #22
 8005118:	d402      	bmi.n	8005120 <_vfiprintf_r+0x220>
 800511a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800511c:	f7ff fdb7 	bl	8004c8e <__retarget_lock_release_recursive>
 8005120:	89ab      	ldrh	r3, [r5, #12]
 8005122:	065b      	lsls	r3, r3, #25
 8005124:	f53f af12 	bmi.w	8004f4c <_vfiprintf_r+0x4c>
 8005128:	9809      	ldr	r0, [sp, #36]	; 0x24
 800512a:	e711      	b.n	8004f50 <_vfiprintf_r+0x50>
 800512c:	ab03      	add	r3, sp, #12
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	462a      	mov	r2, r5
 8005132:	4b09      	ldr	r3, [pc, #36]	; (8005158 <_vfiprintf_r+0x258>)
 8005134:	a904      	add	r1, sp, #16
 8005136:	4630      	mov	r0, r6
 8005138:	f000 f880 	bl	800523c <_printf_i>
 800513c:	e7e4      	b.n	8005108 <_vfiprintf_r+0x208>
 800513e:	bf00      	nop
 8005140:	080056e4 	.word	0x080056e4
 8005144:	08005704 	.word	0x08005704
 8005148:	080056c4 	.word	0x080056c4
 800514c:	08005724 	.word	0x08005724
 8005150:	0800572e 	.word	0x0800572e
 8005154:	00000000 	.word	0x00000000
 8005158:	08004edb 	.word	0x08004edb
 800515c:	0800572a 	.word	0x0800572a

08005160 <_printf_common>:
 8005160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005164:	4616      	mov	r6, r2
 8005166:	4699      	mov	r9, r3
 8005168:	688a      	ldr	r2, [r1, #8]
 800516a:	690b      	ldr	r3, [r1, #16]
 800516c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005170:	4293      	cmp	r3, r2
 8005172:	bfb8      	it	lt
 8005174:	4613      	movlt	r3, r2
 8005176:	6033      	str	r3, [r6, #0]
 8005178:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800517c:	4607      	mov	r7, r0
 800517e:	460c      	mov	r4, r1
 8005180:	b10a      	cbz	r2, 8005186 <_printf_common+0x26>
 8005182:	3301      	adds	r3, #1
 8005184:	6033      	str	r3, [r6, #0]
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	0699      	lsls	r1, r3, #26
 800518a:	bf42      	ittt	mi
 800518c:	6833      	ldrmi	r3, [r6, #0]
 800518e:	3302      	addmi	r3, #2
 8005190:	6033      	strmi	r3, [r6, #0]
 8005192:	6825      	ldr	r5, [r4, #0]
 8005194:	f015 0506 	ands.w	r5, r5, #6
 8005198:	d106      	bne.n	80051a8 <_printf_common+0x48>
 800519a:	f104 0a19 	add.w	sl, r4, #25
 800519e:	68e3      	ldr	r3, [r4, #12]
 80051a0:	6832      	ldr	r2, [r6, #0]
 80051a2:	1a9b      	subs	r3, r3, r2
 80051a4:	42ab      	cmp	r3, r5
 80051a6:	dc26      	bgt.n	80051f6 <_printf_common+0x96>
 80051a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051ac:	1e13      	subs	r3, r2, #0
 80051ae:	6822      	ldr	r2, [r4, #0]
 80051b0:	bf18      	it	ne
 80051b2:	2301      	movne	r3, #1
 80051b4:	0692      	lsls	r2, r2, #26
 80051b6:	d42b      	bmi.n	8005210 <_printf_common+0xb0>
 80051b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051bc:	4649      	mov	r1, r9
 80051be:	4638      	mov	r0, r7
 80051c0:	47c0      	blx	r8
 80051c2:	3001      	adds	r0, #1
 80051c4:	d01e      	beq.n	8005204 <_printf_common+0xa4>
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	68e5      	ldr	r5, [r4, #12]
 80051ca:	6832      	ldr	r2, [r6, #0]
 80051cc:	f003 0306 	and.w	r3, r3, #6
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	bf08      	it	eq
 80051d4:	1aad      	subeq	r5, r5, r2
 80051d6:	68a3      	ldr	r3, [r4, #8]
 80051d8:	6922      	ldr	r2, [r4, #16]
 80051da:	bf0c      	ite	eq
 80051dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051e0:	2500      	movne	r5, #0
 80051e2:	4293      	cmp	r3, r2
 80051e4:	bfc4      	itt	gt
 80051e6:	1a9b      	subgt	r3, r3, r2
 80051e8:	18ed      	addgt	r5, r5, r3
 80051ea:	2600      	movs	r6, #0
 80051ec:	341a      	adds	r4, #26
 80051ee:	42b5      	cmp	r5, r6
 80051f0:	d11a      	bne.n	8005228 <_printf_common+0xc8>
 80051f2:	2000      	movs	r0, #0
 80051f4:	e008      	b.n	8005208 <_printf_common+0xa8>
 80051f6:	2301      	movs	r3, #1
 80051f8:	4652      	mov	r2, sl
 80051fa:	4649      	mov	r1, r9
 80051fc:	4638      	mov	r0, r7
 80051fe:	47c0      	blx	r8
 8005200:	3001      	adds	r0, #1
 8005202:	d103      	bne.n	800520c <_printf_common+0xac>
 8005204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520c:	3501      	adds	r5, #1
 800520e:	e7c6      	b.n	800519e <_printf_common+0x3e>
 8005210:	18e1      	adds	r1, r4, r3
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	2030      	movs	r0, #48	; 0x30
 8005216:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800521a:	4422      	add	r2, r4
 800521c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005220:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005224:	3302      	adds	r3, #2
 8005226:	e7c7      	b.n	80051b8 <_printf_common+0x58>
 8005228:	2301      	movs	r3, #1
 800522a:	4622      	mov	r2, r4
 800522c:	4649      	mov	r1, r9
 800522e:	4638      	mov	r0, r7
 8005230:	47c0      	blx	r8
 8005232:	3001      	adds	r0, #1
 8005234:	d0e6      	beq.n	8005204 <_printf_common+0xa4>
 8005236:	3601      	adds	r6, #1
 8005238:	e7d9      	b.n	80051ee <_printf_common+0x8e>
	...

0800523c <_printf_i>:
 800523c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005240:	460c      	mov	r4, r1
 8005242:	4691      	mov	r9, r2
 8005244:	7e27      	ldrb	r7, [r4, #24]
 8005246:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005248:	2f78      	cmp	r7, #120	; 0x78
 800524a:	4680      	mov	r8, r0
 800524c:	469a      	mov	sl, r3
 800524e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005252:	d807      	bhi.n	8005264 <_printf_i+0x28>
 8005254:	2f62      	cmp	r7, #98	; 0x62
 8005256:	d80a      	bhi.n	800526e <_printf_i+0x32>
 8005258:	2f00      	cmp	r7, #0
 800525a:	f000 80d8 	beq.w	800540e <_printf_i+0x1d2>
 800525e:	2f58      	cmp	r7, #88	; 0x58
 8005260:	f000 80a3 	beq.w	80053aa <_printf_i+0x16e>
 8005264:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005268:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800526c:	e03a      	b.n	80052e4 <_printf_i+0xa8>
 800526e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005272:	2b15      	cmp	r3, #21
 8005274:	d8f6      	bhi.n	8005264 <_printf_i+0x28>
 8005276:	a001      	add	r0, pc, #4	; (adr r0, 800527c <_printf_i+0x40>)
 8005278:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800527c:	080052d5 	.word	0x080052d5
 8005280:	080052e9 	.word	0x080052e9
 8005284:	08005265 	.word	0x08005265
 8005288:	08005265 	.word	0x08005265
 800528c:	08005265 	.word	0x08005265
 8005290:	08005265 	.word	0x08005265
 8005294:	080052e9 	.word	0x080052e9
 8005298:	08005265 	.word	0x08005265
 800529c:	08005265 	.word	0x08005265
 80052a0:	08005265 	.word	0x08005265
 80052a4:	08005265 	.word	0x08005265
 80052a8:	080053f5 	.word	0x080053f5
 80052ac:	08005319 	.word	0x08005319
 80052b0:	080053d7 	.word	0x080053d7
 80052b4:	08005265 	.word	0x08005265
 80052b8:	08005265 	.word	0x08005265
 80052bc:	08005417 	.word	0x08005417
 80052c0:	08005265 	.word	0x08005265
 80052c4:	08005319 	.word	0x08005319
 80052c8:	08005265 	.word	0x08005265
 80052cc:	08005265 	.word	0x08005265
 80052d0:	080053df 	.word	0x080053df
 80052d4:	680b      	ldr	r3, [r1, #0]
 80052d6:	1d1a      	adds	r2, r3, #4
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	600a      	str	r2, [r1, #0]
 80052dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0a3      	b.n	8005430 <_printf_i+0x1f4>
 80052e8:	6825      	ldr	r5, [r4, #0]
 80052ea:	6808      	ldr	r0, [r1, #0]
 80052ec:	062e      	lsls	r6, r5, #24
 80052ee:	f100 0304 	add.w	r3, r0, #4
 80052f2:	d50a      	bpl.n	800530a <_printf_i+0xce>
 80052f4:	6805      	ldr	r5, [r0, #0]
 80052f6:	600b      	str	r3, [r1, #0]
 80052f8:	2d00      	cmp	r5, #0
 80052fa:	da03      	bge.n	8005304 <_printf_i+0xc8>
 80052fc:	232d      	movs	r3, #45	; 0x2d
 80052fe:	426d      	negs	r5, r5
 8005300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005304:	485e      	ldr	r0, [pc, #376]	; (8005480 <_printf_i+0x244>)
 8005306:	230a      	movs	r3, #10
 8005308:	e019      	b.n	800533e <_printf_i+0x102>
 800530a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800530e:	6805      	ldr	r5, [r0, #0]
 8005310:	600b      	str	r3, [r1, #0]
 8005312:	bf18      	it	ne
 8005314:	b22d      	sxthne	r5, r5
 8005316:	e7ef      	b.n	80052f8 <_printf_i+0xbc>
 8005318:	680b      	ldr	r3, [r1, #0]
 800531a:	6825      	ldr	r5, [r4, #0]
 800531c:	1d18      	adds	r0, r3, #4
 800531e:	6008      	str	r0, [r1, #0]
 8005320:	0628      	lsls	r0, r5, #24
 8005322:	d501      	bpl.n	8005328 <_printf_i+0xec>
 8005324:	681d      	ldr	r5, [r3, #0]
 8005326:	e002      	b.n	800532e <_printf_i+0xf2>
 8005328:	0669      	lsls	r1, r5, #25
 800532a:	d5fb      	bpl.n	8005324 <_printf_i+0xe8>
 800532c:	881d      	ldrh	r5, [r3, #0]
 800532e:	4854      	ldr	r0, [pc, #336]	; (8005480 <_printf_i+0x244>)
 8005330:	2f6f      	cmp	r7, #111	; 0x6f
 8005332:	bf0c      	ite	eq
 8005334:	2308      	moveq	r3, #8
 8005336:	230a      	movne	r3, #10
 8005338:	2100      	movs	r1, #0
 800533a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800533e:	6866      	ldr	r6, [r4, #4]
 8005340:	60a6      	str	r6, [r4, #8]
 8005342:	2e00      	cmp	r6, #0
 8005344:	bfa2      	ittt	ge
 8005346:	6821      	ldrge	r1, [r4, #0]
 8005348:	f021 0104 	bicge.w	r1, r1, #4
 800534c:	6021      	strge	r1, [r4, #0]
 800534e:	b90d      	cbnz	r5, 8005354 <_printf_i+0x118>
 8005350:	2e00      	cmp	r6, #0
 8005352:	d04d      	beq.n	80053f0 <_printf_i+0x1b4>
 8005354:	4616      	mov	r6, r2
 8005356:	fbb5 f1f3 	udiv	r1, r5, r3
 800535a:	fb03 5711 	mls	r7, r3, r1, r5
 800535e:	5dc7      	ldrb	r7, [r0, r7]
 8005360:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005364:	462f      	mov	r7, r5
 8005366:	42bb      	cmp	r3, r7
 8005368:	460d      	mov	r5, r1
 800536a:	d9f4      	bls.n	8005356 <_printf_i+0x11a>
 800536c:	2b08      	cmp	r3, #8
 800536e:	d10b      	bne.n	8005388 <_printf_i+0x14c>
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	07df      	lsls	r7, r3, #31
 8005374:	d508      	bpl.n	8005388 <_printf_i+0x14c>
 8005376:	6923      	ldr	r3, [r4, #16]
 8005378:	6861      	ldr	r1, [r4, #4]
 800537a:	4299      	cmp	r1, r3
 800537c:	bfde      	ittt	le
 800537e:	2330      	movle	r3, #48	; 0x30
 8005380:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005384:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005388:	1b92      	subs	r2, r2, r6
 800538a:	6122      	str	r2, [r4, #16]
 800538c:	f8cd a000 	str.w	sl, [sp]
 8005390:	464b      	mov	r3, r9
 8005392:	aa03      	add	r2, sp, #12
 8005394:	4621      	mov	r1, r4
 8005396:	4640      	mov	r0, r8
 8005398:	f7ff fee2 	bl	8005160 <_printf_common>
 800539c:	3001      	adds	r0, #1
 800539e:	d14c      	bne.n	800543a <_printf_i+0x1fe>
 80053a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053a4:	b004      	add	sp, #16
 80053a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053aa:	4835      	ldr	r0, [pc, #212]	; (8005480 <_printf_i+0x244>)
 80053ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	680e      	ldr	r6, [r1, #0]
 80053b4:	061f      	lsls	r7, r3, #24
 80053b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80053ba:	600e      	str	r6, [r1, #0]
 80053bc:	d514      	bpl.n	80053e8 <_printf_i+0x1ac>
 80053be:	07d9      	lsls	r1, r3, #31
 80053c0:	bf44      	itt	mi
 80053c2:	f043 0320 	orrmi.w	r3, r3, #32
 80053c6:	6023      	strmi	r3, [r4, #0]
 80053c8:	b91d      	cbnz	r5, 80053d2 <_printf_i+0x196>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	f023 0320 	bic.w	r3, r3, #32
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	2310      	movs	r3, #16
 80053d4:	e7b0      	b.n	8005338 <_printf_i+0xfc>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	f043 0320 	orr.w	r3, r3, #32
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	2378      	movs	r3, #120	; 0x78
 80053e0:	4828      	ldr	r0, [pc, #160]	; (8005484 <_printf_i+0x248>)
 80053e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053e6:	e7e3      	b.n	80053b0 <_printf_i+0x174>
 80053e8:	065e      	lsls	r6, r3, #25
 80053ea:	bf48      	it	mi
 80053ec:	b2ad      	uxthmi	r5, r5
 80053ee:	e7e6      	b.n	80053be <_printf_i+0x182>
 80053f0:	4616      	mov	r6, r2
 80053f2:	e7bb      	b.n	800536c <_printf_i+0x130>
 80053f4:	680b      	ldr	r3, [r1, #0]
 80053f6:	6826      	ldr	r6, [r4, #0]
 80053f8:	6960      	ldr	r0, [r4, #20]
 80053fa:	1d1d      	adds	r5, r3, #4
 80053fc:	600d      	str	r5, [r1, #0]
 80053fe:	0635      	lsls	r5, r6, #24
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	d501      	bpl.n	8005408 <_printf_i+0x1cc>
 8005404:	6018      	str	r0, [r3, #0]
 8005406:	e002      	b.n	800540e <_printf_i+0x1d2>
 8005408:	0671      	lsls	r1, r6, #25
 800540a:	d5fb      	bpl.n	8005404 <_printf_i+0x1c8>
 800540c:	8018      	strh	r0, [r3, #0]
 800540e:	2300      	movs	r3, #0
 8005410:	6123      	str	r3, [r4, #16]
 8005412:	4616      	mov	r6, r2
 8005414:	e7ba      	b.n	800538c <_printf_i+0x150>
 8005416:	680b      	ldr	r3, [r1, #0]
 8005418:	1d1a      	adds	r2, r3, #4
 800541a:	600a      	str	r2, [r1, #0]
 800541c:	681e      	ldr	r6, [r3, #0]
 800541e:	6862      	ldr	r2, [r4, #4]
 8005420:	2100      	movs	r1, #0
 8005422:	4630      	mov	r0, r6
 8005424:	f7fa fed4 	bl	80001d0 <memchr>
 8005428:	b108      	cbz	r0, 800542e <_printf_i+0x1f2>
 800542a:	1b80      	subs	r0, r0, r6
 800542c:	6060      	str	r0, [r4, #4]
 800542e:	6863      	ldr	r3, [r4, #4]
 8005430:	6123      	str	r3, [r4, #16]
 8005432:	2300      	movs	r3, #0
 8005434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005438:	e7a8      	b.n	800538c <_printf_i+0x150>
 800543a:	6923      	ldr	r3, [r4, #16]
 800543c:	4632      	mov	r2, r6
 800543e:	4649      	mov	r1, r9
 8005440:	4640      	mov	r0, r8
 8005442:	47d0      	blx	sl
 8005444:	3001      	adds	r0, #1
 8005446:	d0ab      	beq.n	80053a0 <_printf_i+0x164>
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	079b      	lsls	r3, r3, #30
 800544c:	d413      	bmi.n	8005476 <_printf_i+0x23a>
 800544e:	68e0      	ldr	r0, [r4, #12]
 8005450:	9b03      	ldr	r3, [sp, #12]
 8005452:	4298      	cmp	r0, r3
 8005454:	bfb8      	it	lt
 8005456:	4618      	movlt	r0, r3
 8005458:	e7a4      	b.n	80053a4 <_printf_i+0x168>
 800545a:	2301      	movs	r3, #1
 800545c:	4632      	mov	r2, r6
 800545e:	4649      	mov	r1, r9
 8005460:	4640      	mov	r0, r8
 8005462:	47d0      	blx	sl
 8005464:	3001      	adds	r0, #1
 8005466:	d09b      	beq.n	80053a0 <_printf_i+0x164>
 8005468:	3501      	adds	r5, #1
 800546a:	68e3      	ldr	r3, [r4, #12]
 800546c:	9903      	ldr	r1, [sp, #12]
 800546e:	1a5b      	subs	r3, r3, r1
 8005470:	42ab      	cmp	r3, r5
 8005472:	dcf2      	bgt.n	800545a <_printf_i+0x21e>
 8005474:	e7eb      	b.n	800544e <_printf_i+0x212>
 8005476:	2500      	movs	r5, #0
 8005478:	f104 0619 	add.w	r6, r4, #25
 800547c:	e7f5      	b.n	800546a <_printf_i+0x22e>
 800547e:	bf00      	nop
 8005480:	08005735 	.word	0x08005735
 8005484:	08005746 	.word	0x08005746

08005488 <_sbrk_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4d06      	ldr	r5, [pc, #24]	; (80054a4 <_sbrk_r+0x1c>)
 800548c:	2300      	movs	r3, #0
 800548e:	4604      	mov	r4, r0
 8005490:	4608      	mov	r0, r1
 8005492:	602b      	str	r3, [r5, #0]
 8005494:	f7fb feca 	bl	800122c <_sbrk>
 8005498:	1c43      	adds	r3, r0, #1
 800549a:	d102      	bne.n	80054a2 <_sbrk_r+0x1a>
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	b103      	cbz	r3, 80054a2 <_sbrk_r+0x1a>
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
 80054a4:	20000178 	.word	0x20000178

080054a8 <__sread>:
 80054a8:	b510      	push	{r4, lr}
 80054aa:	460c      	mov	r4, r1
 80054ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b0:	f000 f8a0 	bl	80055f4 <_read_r>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	bfab      	itete	ge
 80054b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054ba:	89a3      	ldrhlt	r3, [r4, #12]
 80054bc:	181b      	addge	r3, r3, r0
 80054be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054c2:	bfac      	ite	ge
 80054c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80054c6:	81a3      	strhlt	r3, [r4, #12]
 80054c8:	bd10      	pop	{r4, pc}

080054ca <__swrite>:
 80054ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ce:	461f      	mov	r7, r3
 80054d0:	898b      	ldrh	r3, [r1, #12]
 80054d2:	05db      	lsls	r3, r3, #23
 80054d4:	4605      	mov	r5, r0
 80054d6:	460c      	mov	r4, r1
 80054d8:	4616      	mov	r6, r2
 80054da:	d505      	bpl.n	80054e8 <__swrite+0x1e>
 80054dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e0:	2302      	movs	r3, #2
 80054e2:	2200      	movs	r2, #0
 80054e4:	f000 f868 	bl	80055b8 <_lseek_r>
 80054e8:	89a3      	ldrh	r3, [r4, #12]
 80054ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054f2:	81a3      	strh	r3, [r4, #12]
 80054f4:	4632      	mov	r2, r6
 80054f6:	463b      	mov	r3, r7
 80054f8:	4628      	mov	r0, r5
 80054fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054fe:	f000 b817 	b.w	8005530 <_write_r>

08005502 <__sseek>:
 8005502:	b510      	push	{r4, lr}
 8005504:	460c      	mov	r4, r1
 8005506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800550a:	f000 f855 	bl	80055b8 <_lseek_r>
 800550e:	1c43      	adds	r3, r0, #1
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	bf15      	itete	ne
 8005514:	6560      	strne	r0, [r4, #84]	; 0x54
 8005516:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800551a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800551e:	81a3      	strheq	r3, [r4, #12]
 8005520:	bf18      	it	ne
 8005522:	81a3      	strhne	r3, [r4, #12]
 8005524:	bd10      	pop	{r4, pc}

08005526 <__sclose>:
 8005526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800552a:	f000 b813 	b.w	8005554 <_close_r>
	...

08005530 <_write_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	4d07      	ldr	r5, [pc, #28]	; (8005550 <_write_r+0x20>)
 8005534:	4604      	mov	r4, r0
 8005536:	4608      	mov	r0, r1
 8005538:	4611      	mov	r1, r2
 800553a:	2200      	movs	r2, #0
 800553c:	602a      	str	r2, [r5, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	f7fb fc1c 	bl	8000d7c <_write>
 8005544:	1c43      	adds	r3, r0, #1
 8005546:	d102      	bne.n	800554e <_write_r+0x1e>
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	b103      	cbz	r3, 800554e <_write_r+0x1e>
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	bd38      	pop	{r3, r4, r5, pc}
 8005550:	20000178 	.word	0x20000178

08005554 <_close_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	4d06      	ldr	r5, [pc, #24]	; (8005570 <_close_r+0x1c>)
 8005558:	2300      	movs	r3, #0
 800555a:	4604      	mov	r4, r0
 800555c:	4608      	mov	r0, r1
 800555e:	602b      	str	r3, [r5, #0]
 8005560:	f7fb fe2f 	bl	80011c2 <_close>
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	d102      	bne.n	800556e <_close_r+0x1a>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	b103      	cbz	r3, 800556e <_close_r+0x1a>
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	bd38      	pop	{r3, r4, r5, pc}
 8005570:	20000178 	.word	0x20000178

08005574 <_fstat_r>:
 8005574:	b538      	push	{r3, r4, r5, lr}
 8005576:	4d07      	ldr	r5, [pc, #28]	; (8005594 <_fstat_r+0x20>)
 8005578:	2300      	movs	r3, #0
 800557a:	4604      	mov	r4, r0
 800557c:	4608      	mov	r0, r1
 800557e:	4611      	mov	r1, r2
 8005580:	602b      	str	r3, [r5, #0]
 8005582:	f7fb fe2a 	bl	80011da <_fstat>
 8005586:	1c43      	adds	r3, r0, #1
 8005588:	d102      	bne.n	8005590 <_fstat_r+0x1c>
 800558a:	682b      	ldr	r3, [r5, #0]
 800558c:	b103      	cbz	r3, 8005590 <_fstat_r+0x1c>
 800558e:	6023      	str	r3, [r4, #0]
 8005590:	bd38      	pop	{r3, r4, r5, pc}
 8005592:	bf00      	nop
 8005594:	20000178 	.word	0x20000178

08005598 <_isatty_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	4d06      	ldr	r5, [pc, #24]	; (80055b4 <_isatty_r+0x1c>)
 800559c:	2300      	movs	r3, #0
 800559e:	4604      	mov	r4, r0
 80055a0:	4608      	mov	r0, r1
 80055a2:	602b      	str	r3, [r5, #0]
 80055a4:	f7fb fe29 	bl	80011fa <_isatty>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	d102      	bne.n	80055b2 <_isatty_r+0x1a>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	b103      	cbz	r3, 80055b2 <_isatty_r+0x1a>
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	bd38      	pop	{r3, r4, r5, pc}
 80055b4:	20000178 	.word	0x20000178

080055b8 <_lseek_r>:
 80055b8:	b538      	push	{r3, r4, r5, lr}
 80055ba:	4d07      	ldr	r5, [pc, #28]	; (80055d8 <_lseek_r+0x20>)
 80055bc:	4604      	mov	r4, r0
 80055be:	4608      	mov	r0, r1
 80055c0:	4611      	mov	r1, r2
 80055c2:	2200      	movs	r2, #0
 80055c4:	602a      	str	r2, [r5, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	f7fb fe22 	bl	8001210 <_lseek>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	d102      	bne.n	80055d6 <_lseek_r+0x1e>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	b103      	cbz	r3, 80055d6 <_lseek_r+0x1e>
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	20000178 	.word	0x20000178

080055dc <__malloc_lock>:
 80055dc:	4801      	ldr	r0, [pc, #4]	; (80055e4 <__malloc_lock+0x8>)
 80055de:	f7ff bb55 	b.w	8004c8c <__retarget_lock_acquire_recursive>
 80055e2:	bf00      	nop
 80055e4:	20000170 	.word	0x20000170

080055e8 <__malloc_unlock>:
 80055e8:	4801      	ldr	r0, [pc, #4]	; (80055f0 <__malloc_unlock+0x8>)
 80055ea:	f7ff bb50 	b.w	8004c8e <__retarget_lock_release_recursive>
 80055ee:	bf00      	nop
 80055f0:	20000170 	.word	0x20000170

080055f4 <_read_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4d07      	ldr	r5, [pc, #28]	; (8005614 <_read_r+0x20>)
 80055f8:	4604      	mov	r4, r0
 80055fa:	4608      	mov	r0, r1
 80055fc:	4611      	mov	r1, r2
 80055fe:	2200      	movs	r2, #0
 8005600:	602a      	str	r2, [r5, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	f7fb fdc0 	bl	8001188 <_read>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d102      	bne.n	8005612 <_read_r+0x1e>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	b103      	cbz	r3, 8005612 <_read_r+0x1e>
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	20000178 	.word	0x20000178

08005618 <_init>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	bf00      	nop
 800561c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561e:	bc08      	pop	{r3}
 8005620:	469e      	mov	lr, r3
 8005622:	4770      	bx	lr

08005624 <_fini>:
 8005624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005626:	bf00      	nop
 8005628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562a:	bc08      	pop	{r3}
 800562c:	469e      	mov	lr, r3
 800562e:	4770      	bx	lr
